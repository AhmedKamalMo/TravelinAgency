import{u as e}from"./nitro.mjs";import r from"mysql2/promise";import o from"bcryptjs";import t from"jsonwebtoken";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";let s=null;function createDatabasePool(){if(!s){const e={host:process.env.DB_HOST||"localhost",port:Number(process.env.DB_PORT)||3306,user:process.env.DB_USER||"travel",password:process.env.DB_PASSWORD||"support@Passord123",database:process.env.DB_NAME||"travel"};console.log("ðŸ”§ MySQL Config:",{host:e.host,port:e.port,user:e.user,password:"[SET]",database:e.database}),s=r.createPool({...e,charset:"utf8mb4",timezone:"+00:00",connectionLimit:5,queueLimit:0,waitForConnections:!0,reconnect:!0,ssl:{rejectUnauthorized:!1},acquireTimeout:6e4,timeout:6e4,keepAliveInitialDelay:0,enableKeepAlive:!0})}return s}async function executeQuery(e,r=[]){try{const o=createDatabasePool(),[t]=await o.execute(e,r);return t}catch(o){if(console.error("Database query error:",{message:o.message,code:o.code,errno:o.errno,sql:e.substring(0,100)+"...",params:r}),"ECONNREFUSED"===o.code)throw new Error("Database connection refused. Please check your database configuration.");if("ER_ACCESS_DENIED_ERROR"===o.code)throw new Error("Database access denied. Please check your credentials.");if("ER_BAD_DB_ERROR"===o.code)throw new Error("Database does not exist. Please check your database name.");if("ER_HOST_NOT_PRIVILEGED"===o.code)throw new Error("Database host not allowed. Please configure remote access in GoDaddy cPanel.");throw o}}async function findOne(e,r=[]){const o=await executeQuery(e,r);return o.length>0?o[0]:null}async function verifyPassword(e,r){return await o.compare(e,r)}function generateJWT(r,o="24h"){const s=e();return t.sign(r,s.jwtSecret,{expiresIn:o})}function verifyJWT(r){const o=e();try{return t.verify(r,o.jwtSecret)}catch(e){throw new Error("Invalid token")}}async function authenticateUser(e,r){try{const o=await findOne("SELECT * FROM users WHERE email = ?",[e]);if(!o)return null;if(!await verifyPassword(r,o.password))return null;const t=await findOne("SELECT * FROM admin_profiles WHERE user_id = ?",[o.id]);return{user:{...o,role:(null==t?void 0:t.role)||"admin",permissions:(null==t?void 0:t.permissions)?JSON.parse(t.permissions):{}}}}catch(e){return console.error("Authentication error:",e),null}}async function getUserById(e){const r=await findOne("\n    SELECT u.id, u.email, u.full_name, u.phone, u.status, u.created_at, u.updated_at,\n           ap.role, ap.permissions\n    FROM users u\n    LEFT JOIN admin_profiles ap ON u.id = ap.user_id\n    WHERE u.id = ?\n  ",[e]);if(r){if(r.permissions&&"string"==typeof r.permissions)try{r.permissions=JSON.parse(r.permissions)}catch(e){console.error("Error parsing permissions JSON:",e),r.permissions={}}else r.permissions||(r.permissions={});r.role||(r.role="admin")}return r}export{authenticateUser,createDatabasePool,executeQuery,findOne,generateJWT,getUserById,verifyJWT,verifyPassword};
//# sourceMappingURL=database.mjs.map
