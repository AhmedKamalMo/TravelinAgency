import{c as t,g as s,r as e,e as o}from"../../../../_/nitro.mjs";import{executeQuery as a}from"../../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"node:module";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const i=t((async t=>{try{const i=s(t,"id"),p=await e(t);if(!i)throw o({statusCode:400,statusMessage:"Page ID is required"});const{slug:r,title:u,meta_title:d,meta_description:m,meta_keywords:n,status:h,template:g,updated_by:c=1}=p;if(0===(await a("SELECT id FROM cms_pages WHERE id = ?",[i])).length)throw o({statusCode:404,statusMessage:"Page not found"});if(r){if((await a("SELECT id FROM cms_pages WHERE slug = ? AND id != ?",[r,i])).length>0)throw o({statusCode:400,statusMessage:"Page with this slug already exists"})}const l=[],E=[];void 0!==r&&(l.push("slug = ?"),E.push(r)),void 0!==u&&(l.push("title = ?"),E.push(u)),void 0!==d&&(l.push("meta_title = ?"),E.push(d)),void 0!==m&&(l.push("meta_description = ?"),E.push(m)),void 0!==n&&(l.push("meta_keywords = ?"),E.push(n)),void 0!==h&&(l.push("status = ?"),E.push(h)),void 0!==g&&(l.push("template = ?"),E.push(g)),l.push("updated_by = ?"),E.push(c),E.push(i);const f=`UPDATE cms_pages SET ${l.join(", ")} WHERE id = ?`;await a(f,E);return{success:!0,data:{page:(await a("SELECT * FROM cms_pages WHERE id = ?",[i]))[0]},message:"Page updated successfully"}}catch(t){if(console.error("Error updating page:",t),t.statusCode)throw t;throw o({statusCode:500,statusMessage:"Error updating page"})}}));export{i as default};
//# sourceMappingURL=_id_.put.mjs.map
