import{c as t,r as e,e as s}from"../../../_/nitro.mjs";import{executeQuery as i}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"node:module";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const o=t((async t=>{try{const o=await e(t),{settings:n,updated_by:r=1}=o;if(!n||!Array.isArray(n))throw s({statusCode:400,statusMessage:"Settings array is required"});const a=[];for(const t of n){const{setting_key:e,setting_value:s,setting_type:o,category:n,description:p,is_public:d}=t;if(!e)continue;if((await i("SELECT id FROM cms_site_settings WHERE setting_key = ?",[e])).length>0){const t="\n          UPDATE cms_site_settings \n          SET setting_value = ?, setting_type = ?, category = ?, description = ?, is_public = ?, updated_by = ?\n          WHERE setting_key = ?\n        ";await i(t,[s,o||"text",n||"general",p||null,d||!1,r,e])}else{const t="\n          INSERT INTO cms_site_settings \n          (setting_key, setting_value, setting_type, category, description, is_public, updated_by)\n          VALUES (?, ?, ?, ?, ?, ?, ?)\n        ";await i(t,[e,s,o||"text",n||"general",p||null,d||!1,r])}a.push({setting_key:e,updated:!0})}return{success:!0,data:{updated_settings:a},message:"Site settings updated successfully"}}catch(t){if(console.error("Error updating site settings:",t),t.statusCode)throw t;throw s({statusCode:500,statusMessage:"Error updating site settings"})}}));export{o as default};
//# sourceMappingURL=site-settings.put.mjs.map
