import{c as e}from"../../../_/nitro.mjs";import{readdir as t,stat as i}from"fs/promises";import{join as r,extname as o}from"path";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";const s=e((async e=>{try{const e=r(process.cwd(),"public","images","packages","imported"),s=r(process.cwd(),"public","images","packages","thumbnails"),a=(await t(e)).filter((e=>{const t=o(e).toLowerCase();return[".jpg",".jpeg",".png",".webp",".gif"].includes(t)})),m=[];for(const t of a)try{const a=r(e,t),p=await i(a),g=`thumb_${t}`,c=r(s,g);let n=!1;try{await i(c),n=!0}catch{n=!1}m.push({filename:t,originalName:t,path:`/images/packages/imported/${t}`,thumbnailPath:n?`/images/packages/thumbnails/${g}`:null,size:p.size,type:getMimeType(o(t)),createdAt:p.birthtime,modifiedAt:p.mtime})}catch(e){console.error(`Error processing file ${t}:`,e)}return m.sort(((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime())),{success:!0,message:"Images retrieved successfully",images:m}}catch(e){return console.error("Error listing images:",e),{success:!1,message:"Failed to list images",images:[]}}}));function getMimeType(e){return{".jpg":"image/jpeg",".jpeg":"image/jpeg",".png":"image/png",".webp":"image/webp",".gif":"image/gif"}[e.toLowerCase()]||"image/jpeg"}export{s as default};
//# sourceMappingURL=list.get.mjs.map
