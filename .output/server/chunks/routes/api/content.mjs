import{c as t,j as e,e as a,r as n}from"../../_/nitro.mjs";import{executeQuery as r}from"../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const s=t((async t=>{switch(e(t)){case"GET":return await async function(){try{return{success:!0,pages:(await r("\n        SELECT \n          id, \n          title,\n          meta_title,\n          meta_description,\n          'page' as type,\n          status,\n          template,\n          created_at,\n          updated_at\n        FROM cms_pages \n        ORDER BY created_at DESC\n      ")).map((t=>({id:t.id,title:t.title,title_ar:t.title,title_en:t.meta_title||t.title,content:t.meta_description||"",content_ar:t.meta_description||"",content_en:t.meta_description||"",type:t.type,status:t.status,template:t.template,created_at:t.created_at,updated_at:t.updated_at})))}}catch(t){return console.error("Error fetching content pages:",t),{success:!1,error:"Failed to fetch content pages",pages:[]}}}();case"POST":return await async function(t){try{const e=await n(t);if(!(e.title_ar&&e.title_en&&e.content_ar&&e.content_en))throw a({statusCode:400,statusMessage:"Missing required fields"});return{success:!0,message:"Content page created successfully",id:(await r("\n      INSERT INTO cms_pages (\n        title, meta_title, meta_description, \n        status, template, created_by\n      ) VALUES (?, ?, ?, ?, ?, ?)\n    ",[e.title_ar||e.title,e.title_en||e.meta_title,e.content_ar||e.meta_description,e.status||"draft",e.template||"default",1])).insertId}}catch(t){return console.error("Error creating content page:",t),{success:!1,error:"Failed to create content page"}}}(t);default:throw a({statusCode:405,statusMessage:"Method not allowed"})}}));export{s as default};
//# sourceMappingURL=content.mjs.map
