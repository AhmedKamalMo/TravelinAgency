import{c as t,g as s,e}from"../../../../_/nitro.mjs";import{executeQuery as o}from"../../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"node:module";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const i=t((async t=>{try{const i=s(t,"slug");if(!i)throw e({statusCode:400,statusMessage:"Page slug is required"});const n=await o("SELECT \n        p.id, p.slug, p.title, p.meta_title, p.meta_description, p.meta_keywords, p.template\n       FROM cms_pages p\n       WHERE p.slug = ? AND p.status = 'published'",[i]);if(0===n.length)throw e({statusCode:404,statusMessage:"Page not found"});const r=await o("SELECT \n        s.id, s.section_type, s.title, s.subtitle, s.content, \n        s.background_color, s.background_image, s.text_color, s.order_index, s.settings\n       FROM cms_sections s\n       WHERE s.page_id = ? AND s.is_active = 1\n       ORDER BY s.order_index ASC",[n[0].id]);for(const t of r){if(t.content_blocks=await o("SELECT \n          id, block_type, title, content, image_url, video_url, link_url, link_text, order_index, settings\n         FROM cms_content_blocks \n         WHERE section_id = ? AND is_active = 1\n         ORDER BY order_index ASC",[t.id]),t.settings)try{t.settings=JSON.parse(t.settings)}catch(s){t.settings={}}t.content_blocks.forEach((t=>{if(t.settings)try{t.settings=JSON.parse(t.settings)}catch(s){t.settings={}}}))}return{success:!0,data:{page:n[0],sections:r}}}catch(t){if(console.error("Error fetching public page:",t),t.statusCode)throw t;throw e({statusCode:500,statusMessage:"Error fetching page"})}}));export{i as default};
//# sourceMappingURL=_slug_.get.mjs.map
