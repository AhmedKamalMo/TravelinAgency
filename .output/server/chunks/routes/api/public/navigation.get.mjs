import{c as n,f as e,e as t}from"../../../_/nitro.mjs";import{e as o}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const r=n((async n=>{try{const t=e(n),{menu_name:r}=t;let s="\n      SELECT \n        n.id, n.menu_name, n.title, n.url, n.page_id, n.parent_id, n.order_index, n.target, n.icon,\n        p.slug as page_slug\n      FROM cms_navigation n\n      LEFT JOIN cms_pages p ON n.page_id = p.id AND p.status = 'published'\n      WHERE n.is_active = 1\n    ";const i=[];r&&(s+=" AND n.menu_name = ?",i.push(r)),s+=" ORDER BY n.menu_name, n.order_index ASC";const a=await o(s,i),p=new Map,m=[];for(const n of a){const e=n.page_slug?`/${n.page_slug}`:n.url;p.set(n.id,{...n,url:e,children:[]})}for(const n of a)if(n.parent_id){const e=p.get(n.parent_id);e&&e.children.push(p.get(n.id))}else m.push(p.get(n.id));return{success:!0,data:{menus:m.reduce(((n,e)=>(n[e.menu_name]||(n[e.menu_name]=[]),n[e.menu_name].push(e),n)),{})}}}catch(n){throw console.error("Error fetching public navigation:",n),t({statusCode:500,statusMessage:"Error fetching navigation"})}}));export{r as default};
//# sourceMappingURL=navigation.get.mjs.map
