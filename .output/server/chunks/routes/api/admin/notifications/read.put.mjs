import{c as t,r as o,e as a}from"../../../../_/nitro.mjs";import{executeQuery as e}from"../../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"node:module";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const i=t((async t=>{try{const i=await o(t),{notificationId:s,type:r}=i;if(!s||!r)throw a({statusCode:400,statusMessage:"Notification ID and type are required"});console.log(`üìñ Marking notification as read: ${s} (${r})`);let n="";switch(r){case"contact":n="contact_messages";break;case"package":n="package_inquiries";break;case"destination":n="destination_inquiries";break;case"booking":n="bookings";break;default:throw a({statusCode:400,statusMessage:"Invalid notification type"})}return await e(`\n      UPDATE ${n} \n      SET is_read = 1, updated_at = NOW()\n      WHERE id = ?\n    `,[s]),{success:!0,message:"Notification marked as read"}}catch(t){if(console.error("‚ùå Error marking notification as read:",t),t.statusCode)throw t;throw a({statusCode:500,statusMessage:"Failed to mark notification as read"})}}));export{i as default};
//# sourceMappingURL=read.put.mjs.map
