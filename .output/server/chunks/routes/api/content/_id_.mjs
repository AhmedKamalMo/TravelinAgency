import{c as t,l as e,g as s,e as a,r as n}from"../../../_/nitro.mjs";import{executeQuery as o}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"node:module";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const i=t((async t=>{const i=e(t),r=s(t,"id");if(!r)throw a({statusCode:400,statusMessage:"Content ID is required"});switch(i){case"GET":return await async function(t){try{const e=await o("\n      SELECT \n        id, \n        title,\n        meta_title,\n        meta_description,\n        'page' as type,\n        status,\n        template,\n        created_at,\n        updated_at\n      FROM cms_pages \n      WHERE id = ?\n    ",[t]);if(!e||0===e.length)throw a({statusCode:404,statusMessage:"Content page not found"});const s=e[0];return{success:!0,page:{id:s.id,title:s.title,title_ar:s.title,title_en:s.meta_title||s.title,content:s.meta_description||"",content_ar:s.meta_description||"",content_en:s.meta_description||"",type:s.type,status:s.status,template:s.template,created_at:s.created_at,updated_at:s.updated_at}}}catch(t){if(console.error("Error fetching content page:",t),t.statusCode)throw t;throw a({statusCode:500,statusMessage:"Failed to fetch content page"})}}(r);case"PUT":return await async function(t,e){try{const s=await n(t);if(!(s.title_ar&&s.title_en&&s.content_ar&&s.content_en))throw a({statusCode:400,statusMessage:"Missing required fields"});return await o("\n      UPDATE cms_pages SET\n        title = ?,\n        meta_title = ?,\n        meta_description = ?,\n        status = ?,\n        template = ?,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    ",[s.title_ar||s.title,s.title_en||s.meta_title,s.content_ar||s.meta_description,s.status||"draft",s.template||"default",e]),{success:!0,message:"Content page updated successfully"}}catch(t){if(console.error("Error updating content page:",t),t.statusCode)throw t;throw a({statusCode:500,statusMessage:"Failed to update content page"})}}(t,r);case"DELETE":return await async function(t){try{const e=await o("\n      SELECT id FROM cms_pages WHERE id = ?\n    ",[t]);if(!e||0===e.length)throw a({statusCode:404,statusMessage:"Content page not found"});return await o("\n      DELETE FROM cms_pages WHERE id = ?\n    ",[t]),{success:!0,message:"Content page deleted successfully"}}catch(t){if(console.error("Error deleting content page:",t),t.statusCode)throw t;throw a({statusCode:500,statusMessage:"Failed to delete content page"})}}(r);default:throw a({statusCode:405,statusMessage:"Method not allowed"})}}));export{i as default};
//# sourceMappingURL=_id_.mjs.map
