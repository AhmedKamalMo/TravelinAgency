import{d as t,h as e,c as s}from"../../../_/nitro.mjs";import{mkdir as a,writeFile as o}from"fs/promises";import{join as i,extname as r}from"path";import{v as m}from"../../../_/v4.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"crypto";const n=t((async t=>{try{const n=await e(t);if(!n||0===n.length)throw s({statusCode:400,statusMessage:"No files uploaded"});const d=n[0];if(!d.data||!d.filename)throw s({statusCode:400,statusMessage:"Invalid file data"});if(!d.type?.startsWith("image/"))throw s({statusCode:400,statusMessage:"File must be an image"});const p=5242880;if(d.data.length>p)throw s({statusCode:400,statusMessage:"File size too large. Maximum 5MB allowed"});const l=i(process.cwd(),"public","images","destinations");await a(l,{recursive:!0});const u=r(d.filename),c=`dest_${m()}${u}`,f=i(l,c);await o(f,d.data);return{success:!0,message:"Image uploaded successfully",data:{originalName:d.filename,filename:c,url:`/images/destinations/${c}`,size:d.data.length,type:d.type||"image/jpeg"}}}catch(t){if(console.error("Error uploading destination image:",t),t.statusCode)throw t;throw s({statusCode:500,statusMessage:"Failed to upload image"})}}));export{n as default};
//# sourceMappingURL=upload-destination.post.mjs.map
