import{d as t,g as s,r as a,c as e}from"../../../../_/nitro.mjs";import{executeQuery as o}from"../../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const r=t((async t=>{try{const r=s(t,"id"),i=await a(t),{status:p}=i;if(!r)throw e({statusCode:400,statusMessage:"Page ID is required"});if(!p||!["published","draft","archived"].includes(p))throw e({statusCode:400,statusMessage:"Valid status is required (published, draft, archived)"});try{return await o("\n        UPDATE content_pages \n        SET status = ?, updated_at = NOW()\n        WHERE id = ?\n      ",[p,r]),{success:!0,message:`Page status updated to ${p} successfully`,pageId:r,status:p}}catch(t){try{const t=await import("fs/promises"),s=(await import("path")).join(process.cwd(),"page-statuses.json");let a={};try{const e=await t.readFile(s,"utf-8");a=JSON.parse(e)}catch(t){}a[r]=p,await t.writeFile(s,JSON.stringify(a,null,2))}catch(t){}return{success:!0,message:`Page status updated to ${p} successfully (saved to file)`,pageId:r,status:p,note:"Database not available - status saved to file"}}}catch(t){throw console.error("Error updating page status:",t),e({statusCode:t.statusCode||500,statusMessage:t.statusMessage||"Failed to update page status"})}}));export{r as default};
//# sourceMappingURL=status.put.mjs.map
