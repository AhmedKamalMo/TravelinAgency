import{d as e,r as t,c as s}from"../../_/nitro.mjs";import{executeQuery as a}from"../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const n=e((async e=>{try{const n=await t(e);if(!n.name||!n.email||!n.message)throw s({statusCode:400,statusMessage:"Name, email, and message are required"});try{const e=await a("\n        INSERT INTO contact_messages (\n          name,\n          email,\n          phone,\n          subject,\n          message,\n          status,\n          created_at,\n          updated_at\n        ) VALUES (?, ?, ?, ?, ?, 'new', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n      ",[n.name,n.email,n.phone||"",n.subject||"",n.message]),t=await a("\n        SELECT \n          id, \n          name,\n          email,\n          phone,\n          subject,\n          message,\n          status,\n          created_at,\n          updated_at\n        FROM contact_messages \n        WHERE id = ?\n      ",[e.insertId]);if(!t||0===t.length)throw s({statusCode:500,statusMessage:"Failed to retrieve created message"});const o=t[0];return{success:!0,message:"Contact message sent successfully",data:{id:o.id,name:o.name,email:o.email,phone:o.phone,subject:o.subject,message:o.message,status:o.status,created_at:o.created_at}}}catch(e){console.log("Database insert failed:",e);try{const e=await import("fs"),t=(await import("path")).join(process.cwd(),"public","contact-messages.json");let s=[];if(e.existsSync(t)){const a=e.readFileSync(t,"utf8");s=JSON.parse(a)}const a={id:Date.now(),name:n.name,email:n.email,phone:n.phone||"",subject:n.subject||"",message:n.message,status:"new",created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()};return s.push(a),e.writeFileSync(t,JSON.stringify(s,null,2)),{success:!0,message:"Contact message sent successfully (stored locally)",data:a}}catch(e){throw console.log("Local file storage failed:",e),s({statusCode:500,statusMessage:"Failed to store contact message"})}}}catch(e){if(console.error("Error creating contact message:",e),e.statusCode)throw e;throw s({statusCode:500,statusMessage:"Failed to send contact message"})}}));export{n as default};
//# sourceMappingURL=contact-messages.post.mjs.map
