import{d as t,r as e,c as o}from"../../../_/nitro.mjs";import{executeQuery as s}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const r=t((async t=>{try{const r=await e(t),{page_id:i,section_type:n,title:a,subtitle:c,content:d,background_color:p,background_image:u,text_color:l,order_index:m=0,settings:g={}}=r;if(!i||!n)throw o({statusCode:400,statusMessage:"Page ID and section type are required"});if(0===(await s("SELECT id FROM cms_pages WHERE id = ?",[i])).length)throw o({statusCode:404,statusMessage:"Page not found"});const _="\n      INSERT INTO cms_sections \n      (page_id, section_type, title, subtitle, content, background_color, background_image, text_color, order_index, settings)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    ",f=[i,n,a||null,c||null,d||null,p||null,u||null,l||null,m,JSON.stringify(g)],E=(await s(_,f)).insertId,y=await s("SELECT * FROM cms_sections WHERE id = ?",[E]);return y[0].settings&&(y[0].settings=JSON.parse(y[0].settings)),{success:!0,data:{section:y[0]},message:"Section created successfully"}}catch(t){if(console.error("Error creating section:",t),t.statusCode)throw t;throw o({statusCode:500,statusMessage:"Error creating section"})}}));export{r as default};
//# sourceMappingURL=sections.post.mjs.map
