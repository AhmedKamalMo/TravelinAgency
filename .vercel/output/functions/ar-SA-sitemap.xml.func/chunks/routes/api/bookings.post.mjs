import{d as e,r as t,c as a}from"../../_/nitro.mjs";import{e as n}from"../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const o=e((async e=>{try{const o=await t(e);if(!(o.customer_name&&o.customer_email&&o.customer_phone&&o.package_id&&o.departure_date&&o.total_amount))throw a({statusCode:400,statusMessage:"Customer name, email, phone, package, departure date, and total amount are required"});const s=o.booking_number||`BK${Date.now()}`,r=await n("\n      INSERT INTO bookings (\n        booking_number,\n        package_id,\n        customer_name,\n        customer_email,\n        customer_phone,\n        customer_details,\n        guests_count,\n        guests_details,\n        departure_date,\n        return_date,\n        total_amount,\n        paid_amount,\n        currency,\n        payment_status,\n        booking_status,\n        payment_method,\n        payment_reference,\n        special_requests,\n        notes,\n        cancellation_reason,\n        cancellation_date,\n        confirmed_at,\n        created_at,\n        updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n    ",[s,o.package_id,o.customer_name,o.customer_email,o.customer_phone,JSON.stringify(o.customer_details||{}),o.guests_count||1,JSON.stringify(o.guests_details||[]),o.departure_date,o.return_date||null,o.total_amount,o.paid_amount||0,o.currency||"SAR",o.payment_status||"pending",o.booking_status||"pending",o.payment_method||null,o.payment_reference||null,o.special_requests||null,o.notes||null,o.cancellation_reason||null,o.cancellation_date||null,o.confirmed_at||null]),_=await n("\n      SELECT \n        b.id, \n        b.booking_number,\n        b.customer_name,\n        b.customer_email,\n        b.customer_phone,\n        b.customer_details,\n        b.guests_count,\n        b.guests_details,\n        b.departure_date,\n        b.return_date,\n        b.total_amount,\n        b.paid_amount,\n        b.currency,\n        b.payment_status,\n        b.booking_status,\n        b.payment_method,\n        b.payment_reference,\n        b.special_requests,\n        b.notes,\n        b.cancellation_reason,\n        b.cancellation_date,\n        b.confirmed_at,\n        b.created_at,\n        b.updated_at,\n        p.title_ar as package_title,\n        p.title_en as package_title_en,\n        p.price as package_price,\n        p.duration_days as package_duration\n      FROM bookings b\n      LEFT JOIN packages p ON b.package_id = p.id\n      WHERE b.id = ?\n    ",[r.insertId]);if(!_||0===_.length)throw a({statusCode:500,statusMessage:"Failed to retrieve created booking"});const i=_[0];return{success:!0,message:"Booking created successfully",data:{id:i.id,booking_number:i.booking_number,customer_name:i.customer_name,customer_email:i.customer_email,customer_phone:i.customer_phone,customer_details:JSON.parse(i.customer_details||"{}"),guests_count:i.guests_count,guests_details:JSON.parse(i.guests_details||"[]"),departure_date:i.departure_date,return_date:i.return_date,total_amount:i.total_amount,paid_amount:i.paid_amount,currency:i.currency,payment_status:i.payment_status,booking_status:i.booking_status,payment_method:i.payment_method,payment_reference:i.payment_reference,special_requests:i.special_requests,notes:i.notes,cancellation_reason:i.cancellation_reason,cancellation_date:i.cancellation_date,confirmed_at:i.confirmed_at,created_at:i.created_at,updated_at:i.updated_at,package:{id:o.package_id,title_ar:i.package_title,title_en:i.package_title_en,price:i.package_price,duration_days:i.package_duration}}}}catch(e){if(console.error("Error creating booking:",e),e.statusCode)throw e;throw a({statusCode:500,statusMessage:"Failed to create booking"})}}));export{o as default};
//# sourceMappingURL=bookings.post.mjs.map
