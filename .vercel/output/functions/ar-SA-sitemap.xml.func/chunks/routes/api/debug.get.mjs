import{d as e}from"../../_/nitro.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";const t=e((async e=>{try{const e={NODE_ENV:"production",DB_HOST:process.env.DB_HOST?"[SET]":"[MISSING]",DB_PORT:process.env.DB_PORT?"[SET]":"[MISSING]",DB_USER:process.env.DB_USER?"[SET]":"[MISSING]",DB_PASSWORD:process.env.DB_PASSWORD?"[SET]":"[MISSING]",DB_NAME:process.env.DB_NAME?"[SET]":"[MISSING]",JWT_SECRET:process.env.JWT_SECRET?"[SET]":"[MISSING]",PUBLIC_SITE_URL:process.env.PUBLIC_SITE_URL?"[SET]":"[MISSING]"};let t="not_tested",o=null;try{const{executeQuery:e}=await import("../../_/database.mjs");await e("SELECT 1 as test"),t="connected"}catch(e){t="failed",o={message:e.message,code:e.code,errno:e.errno}}return{status:"debug_info",timestamp:(new Date).toISOString(),environment:e,database:{status:t,error:o},runtime:{node_version:process.version,platform:process.platform,arch:process.arch}}}catch(e){return{status:"debug_error",timestamp:(new Date).toISOString(),error:{message:e.message,stack:e.stack}}}}));export{t as default};
//# sourceMappingURL=debug.get.mjs.map
