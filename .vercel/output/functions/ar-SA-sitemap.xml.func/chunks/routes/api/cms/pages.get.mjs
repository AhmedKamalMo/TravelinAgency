import{d as t,a as s,c as e}from"../../../_/nitro.mjs";import{executeQuery as a}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const o=t((async t=>{try{const e=s(t),{status:o,template:p,limit:r=50,offset:n=0}=e;let i="\n      SELECT \n        p.*,\n        u1.email as created_by_email,\n        u2.email as updated_by_email\n      FROM cms_pages p\n      LEFT JOIN users u1 ON p.created_by = u1.id\n      LEFT JOIN users u2 ON p.updated_by = u2.id\n      WHERE 1=1\n    ";const m=[];o&&(i+=" AND p.status = ?",m.push(o)),p&&(i+=" AND p.template = ?",m.push(p)),i+=" ORDER BY p.updated_at DESC LIMIT ? OFFSET ?",m.push(parseInt(r),parseInt(n));const u=await a(i,m);let c="SELECT COUNT(*) as total FROM cms_pages WHERE 1=1";const d=[];o&&(c+=" AND status = ?",d.push(o)),p&&(c+=" AND template = ?",d.push(p));const l=await a(c,d),E=l[0]?.total||0;return{success:!0,data:{pages:u,pagination:{total:E,limit:parseInt(r),offset:parseInt(n),pages:Math.ceil(E/parseInt(r))}}}}catch(t){throw console.error("Error fetching pages:",t),e({statusCode:500,statusMessage:"Error fetching pages"})}}));export{o as default};
//# sourceMappingURL=pages.get.mjs.map
