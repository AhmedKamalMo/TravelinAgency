import{d as t,g as s,c as o}from"../../../../_/nitro.mjs";import{e}from"../../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const i=t((async t=>{try{const i=s(t,"id");if(!i)throw o({statusCode:400,statusMessage:"Page ID is required"});const n=await e("SELECT \n        p.*,\n        u1.email as created_by_email,\n        u2.email as updated_by_email\n       FROM cms_pages p\n       LEFT JOIN users u1 ON p.created_by = u1.id\n       LEFT JOIN users u2 ON p.updated_by = u2.id\n       WHERE p.id = ?",[i]);if(0===n.length)throw o({statusCode:404,statusMessage:"Page not found"});const r=await e("SELECT \n        s.*,\n        (SELECT COUNT(*) FROM cms_content_blocks WHERE section_id = s.id AND is_active = 1) as blocks_count\n       FROM cms_sections s\n       WHERE s.page_id = ? AND s.is_active = 1\n       ORDER BY s.order_index ASC",[i]);for(const t of r)t.content_blocks=await e("SELECT * FROM cms_content_blocks \n         WHERE section_id = ? AND is_active = 1\n         ORDER BY order_index ASC",[t.id]);return{success:!0,data:{page:n[0],sections:r}}}catch(t){if(console.error("Error fetching page:",t),t.statusCode)throw t;throw o({statusCode:500,statusMessage:"Error fetching page"})}}));export{i as default};
//# sourceMappingURL=_id_.get.mjs.map
