import{d as t,a as s,c as e}from"../../../_/nitro.mjs";import{executeQuery as a}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"@iconify/utils";import"node:crypto";import"consola";import"node:url";import"ipx";import"node:fs";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const o=t((async t=>{var o;try{const e=s(t),{status:p,template:r,limit:n=50,offset:i=0}=e;let m="\n      SELECT \n        p.*,\n        u1.email as created_by_email,\n        u2.email as updated_by_email\n      FROM cms_pages p\n      LEFT JOIN users u1 ON p.created_by = u1.id\n      LEFT JOIN users u2 ON p.updated_by = u2.id\n      WHERE 1=1\n    ";const u=[];p&&(m+=" AND p.status = ?",u.push(p)),r&&(m+=" AND p.template = ?",u.push(r)),m+=" ORDER BY p.updated_at DESC LIMIT ? OFFSET ?",u.push(parseInt(n),parseInt(i));const c=await a(m,u);let d="SELECT COUNT(*) as total FROM cms_pages WHERE 1=1";const l=[];p&&(d+=" AND status = ?",l.push(p)),r&&(d+=" AND template = ?",l.push(r));const E=(null==(o=(await a(d,l))[0])?void 0:o.total)||0;return{success:!0,data:{pages:c,pagination:{total:E,limit:parseInt(n),offset:parseInt(i),pages:Math.ceil(E/parseInt(n))}}}}catch(t){throw console.error("Error fetching pages:",t),e({statusCode:500,statusMessage:"Error fetching pages"})}}));export{o as default};
//# sourceMappingURL=pages.get.mjs.map
