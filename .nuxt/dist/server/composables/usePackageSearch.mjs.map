{"version":3,"file":"usePackageSearch.mjs","sources":["../../../../composables/usePackageSearch.ts"],"sourcesContent":["import { ref, computed } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { usePackages } from './usePackages'\r\n\r\nexport interface PackageFilters {\r\n  periods: string[]\r\n  priceRange: {\r\n    min: number\r\n    max: number\r\n  }\r\n  duration: {\r\n    min: number\r\n    max: number\r\n  }\r\n  dates: {\r\n    start: string | null\r\n    end: string | null\r\n  }\r\n  travelers: number\r\n  type: string[]\r\n}\r\n\r\nexport const usePackageSearch = () => {\r\n  const { locale } = useI18n()\r\n  const { getPackages } = usePackages()\r\n  \r\n  // Search query\r\n  const searchQuery = ref('')\r\n  \r\n  // Filters with default values\r\n  const filters = ref<PackageFilters>({\r\n    periods: [],\r\n    priceRange: {\r\n      min: 0,\r\n      max: Infinity\r\n    },\r\n    duration: {\r\n      min: 0,\r\n      max: Infinity\r\n    },\r\n    dates: {\r\n      start: null,\r\n      end: null\r\n    },\r\n    travelers: 1,\r\n    type: []\r\n  })\r\n\r\n  // Get packages\r\n  const packages = computed(() => getPackages())\r\n\r\n  // Get available filter options based on packages\r\n  const filterOptions = computed(() => {\r\n    const allPackages = packages.value || []\r\n    if (allPackages.length === 0) {\r\n      return {\r\n        periods: [],\r\n        priceRanges: [],\r\n        durationRanges: []\r\n      }\r\n    }\r\n\r\n    // Get unique travel periods\r\n    const uniquePeriods = new Set<string>()\r\n    allPackages.forEach(pkg => {\r\n      if (pkg.travel_period) {\r\n        uniquePeriods.add(pkg.travel_period)\r\n      }\r\n    })\r\n\r\n    // Sort periods by month\r\n    const monthOrder = [\r\n      'january', 'february', 'march', 'april', 'may', 'june',\r\n      'july', 'august', 'september', 'october', 'november', 'december'\r\n    ]\r\n    const sortedPeriods = Array.from(uniquePeriods).sort((a, b) => {\r\n      const aMonth = monthOrder.findIndex(month => \r\n        a.toLowerCase().includes(month)\r\n      )\r\n      const bMonth = monthOrder.findIndex(month => \r\n        b.toLowerCase().includes(month)\r\n      )\r\n      return aMonth - bMonth\r\n    })\r\n\r\n    // Month translations\r\n    const monthTranslations: Record<string, { en: string, ar: string }> = {\r\n      january: { en: 'January', ar: 'يناير' },\r\n      february: { en: 'February', ar: 'فبراير' },\r\n      march: { en: 'March', ar: 'مارس' },\r\n      april: { en: 'April', ar: 'أبريل' },\r\n      may: { en: 'May', ar: 'مايو' },\r\n      june: { en: 'June', ar: 'يونيو' },\r\n      july: { en: 'July', ar: 'يوليو' },\r\n      august: { en: 'August', ar: 'أغسطس' },\r\n      september: { en: 'September', ar: 'سبتمبر' },\r\n      october: { en: 'October', ar: 'أكتوبر' },\r\n      november: { en: 'November', ar: 'نوفمبر' },\r\n      december: { en: 'December', ar: 'ديسمبر' }\r\n    }\r\n\r\n    return {\r\n      periods: sortedPeriods.map(period => ({\r\n        id: period,\r\n        name: monthTranslations[period] || { en: period, ar: period }\r\n      })),\r\n      priceRanges: [\r\n        { min: 0, max: 1000, label: 'Under $1,000' },\r\n        { min: 1000, max: 3000, label: '$1,000 - $3,000' },\r\n        { min: 3000, max: 5000, label: '$3,000 - $5,000' },\r\n        { min: 5000, max: Infinity, label: 'Over $5,000' }\r\n      ],\r\n      durationRanges: [\r\n        { min: 0, max: 3, label: '1-3 days' },\r\n        { min: 4, max: 7, label: '4-7 days' },\r\n        { min: 8, max: 14, label: '8-14 days' },\r\n        { min: 15, max: Infinity, label: '15+ days' }\r\n      ]\r\n    }\r\n  })\r\n\r\n  // Filter packages based on current filters\r\n  const filteredPackages = computed(() => {\r\n    let results = packages.value || []\r\n\r\n    // Apply search query filter\r\n    if (searchQuery.value) {\r\n      const query = searchQuery.value.toLowerCase()\r\n      results = results.filter(pkg => \r\n        pkg.title_en.toLowerCase().includes(query) ||\r\n        pkg.description_en.toLowerCase().includes(query)\r\n      )\r\n    }\r\n\r\n    // Apply period filter\r\n    if (filters.value.periods.length > 0) {\r\n      results = results.filter(pkg => \r\n        filters.value.periods.some(period => \r\n          pkg.travel_period.toLowerCase() === period.toLowerCase()\r\n        )\r\n      )\r\n    }\r\n\r\n    // Apply price range filter\r\n    if (filters.value.priceRange.min > 0 || filters.value.priceRange.max < Infinity) {\r\n      results = results.filter(pkg => \r\n        pkg.price >= filters.value.priceRange.min &&\r\n        pkg.price <= filters.value.priceRange.max\r\n      )\r\n    }\r\n\r\n    // Apply duration filter\r\n    if (filters.value.duration.min > 0 || filters.value.duration.max < Infinity) {\r\n      results = results.filter(pkg => \r\n        pkg.duration_days >= filters.value.duration.min &&\r\n        pkg.duration_days <= filters.value.duration.max\r\n      )\r\n    }\r\n\r\n    return results\r\n  })\r\n\r\n  // Active filters count\r\n  const activeFiltersCount = computed(() => {\r\n    let count = 0\r\n    count += filters.value.periods.length\r\n    if (filters.value.priceRange.min !== 0 || filters.value.priceRange.max !== Infinity) count++\r\n    if (filters.value.duration.min !== 0 || filters.value.duration.max !== Infinity) count++\r\n    if (filters.value.dates.start && filters.value.dates.end) count++\r\n    if (filters.value.travelers > 1) count++\r\n    return count\r\n  })\r\n\r\n  // Reset all filters and search query\r\n  const resetFilters = () => {\r\n    searchQuery.value = ''\r\n    filters.value = {\r\n      periods: [],\r\n      priceRange: {\r\n        min: 0,\r\n        max: Infinity\r\n      },\r\n      duration: {\r\n        min: 0,\r\n        max: Infinity\r\n      },\r\n      dates: {\r\n        start: null,\r\n        end: null\r\n      },\r\n      travelers: 1,\r\n      type: []\r\n    }\r\n  }\r\n\r\n  return {\r\n    searchQuery,\r\n    filters,\r\n    filterOptions,\r\n    filteredPackages,\r\n    activeFiltersCount,\r\n    resetFilters\r\n  }\r\n}\r\n"],"names":["usePackageSearch","locale","useI18n","getPackages","usePackages","searchQuery","ref","filters","packages","computed","filterOptions","allPackages","uniquePeriods","pkg","monthOrder","sortedPeriods","a","b","aMonth","month","bMonth","monthTranslations","period","filteredPackages","results","query","activeFiltersCount","count"],"mappings":"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"}