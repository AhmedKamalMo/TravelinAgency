{"file":"useAuth.mjs","mappings":"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","names":["useAuth","userCookie","useCookie","user","useState","loading","error","login","email","password","response","err","_a","logout","tokenCookie","navigateTo","checkAuth","silent","refreshUser","hasPermission","permission","hasRole","role","isAdmin","computed","isSuperAdmin","userInitials","name","readonly"],"sources":["../../../../composables/useAuth.ts"],"sourcesContent":["import type { User, AdminProfile } from '~/utils/database'\r\n\r\n// Cache-busting comment - v2.5\r\ninterface AuthUser extends User {\r\n  role?: 'admin' | 'super_admin' | 'moderator'\r\n  permissions?: Record<string, boolean>\r\n}\r\n\r\nexport const useAuth = () => {\r\n  // Use useCookie for persistent storage that survives page refreshes\r\n  const userCookie = useCookie<AuthUser | null>('auth.user', {\r\n    default: () => null,\r\n    maxAge: 60 * 60 * 24 * 7, // 7 days\r\n    sameSite: 'lax',\r\n    secure: process.env.NODE_ENV === 'production'\r\n  })\r\n  \r\n  const user = useState<AuthUser | null>('auth.user', () => userCookie.value)\r\n  const loading = useState<boolean>('auth.loading', () => false)\r\n  const error = useState<string>('auth.error', () => '')\r\n\r\n  // Login function\r\n  const login = async (email: string, password: string) => {\r\n    loading.value = true\r\n    error.value = ''\r\n\r\n    try {\r\n      const response = await $fetch<{ success: boolean; data: { user: AuthUser; token: string } }>('/api/auth/login', {\r\n        method: 'POST',\r\n        body: { email, password }\r\n      })\r\n\r\n      if (response.success && response.data.user && response.data.token) {\r\n        user.value = response.data.user\r\n        userCookie.value = response.data.user // Store user data in cookie for persistence\r\n        \r\n        // Token is already stored in cookie by the server\r\n        // No need to store it again on client side\r\n\r\n        return { success: true }\r\n      } else {\r\n        throw new Error('Invalid response from server')\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Login error:', err)\r\n      \r\n      // Handle specific error messages\r\n      if (err.data?.message) {\r\n        error.value = err.data.message\r\n      } else if (err.message === 'Invalid login credentials') {\r\n        error.value = 'ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿ£Ÿà ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©'\r\n      } else {\r\n        error.value = 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ'\r\n      }\r\n      \r\n      return { success: false, error: error.value }\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      const response = await $fetch<{ success: boolean; message: string }>('/api/auth/logout', { method: 'POST' })\r\n      console.log('Logout response:', response.message)\r\n    } catch (err) {\r\n      console.error('Logout error:', err)\r\n    } finally {\r\n      user.value = null\r\n      userCookie.value = null // Clear user data from cookie\r\n      \r\n      // Clear token cookie (server will handle this)\r\n      const tokenCookie = useCookie('auth-token')\r\n      tokenCookie.value = null\r\n      \r\n      await navigateTo('/admin/login')\r\n    }\r\n  }\r\n\r\n  // Check authentication status\r\n  const checkAuth = async (silent = false) => {\r\n    if (user.value) {\r\n      if (!silent) console.log('üë§ User already in state:', user.value.email, 'role:', user.value.role)\r\n      return user.value\r\n    }\r\n\r\n    // Check if token cookie exists first\r\n    const tokenCookie = useCookie('auth-token')\r\n    if (!tokenCookie.value) {\r\n      if (!silent) console.log('üîç No auth token found in cookie')\r\n      user.value = null\r\n      return null\r\n    }\r\n\r\n    try {\r\n      if (!silent) console.log('üîç Fetching user data from API...')\r\n      const response = await $fetch<{ success: boolean; data: { user: AuthUser } }>('/api/auth/me')\r\n      \r\n      if (response.success && response.data.user) {\r\n        user.value = response.data.user\r\n        userCookie.value = response.data.user // Store user data in cookie for persistence\r\n        if (!silent) console.log('‚úÖ User authenticated:', user.value.email, 'role:', user.value.role)\r\n        return user.value\r\n      } else {\r\n        if (!silent) console.log('‚ùå Invalid response from auth API')\r\n        user.value = null\r\n        userCookie.value = null // Clear user data from cookie\r\n        return null\r\n      }\r\n    } catch (err: any) {\r\n      // Only log errors if not silent mode and not a 401 (which is expected for unauthenticated users)\r\n      if (!silent && err.statusCode !== 401) {\r\n        console.error('‚ùå Auth check error:', err)\r\n      }\r\n      \r\n      user.value = null\r\n      userCookie.value = null // Clear user data from cookie\r\n      \r\n      // If it's a 401 error, clear any existing token silently\r\n      if (err.statusCode === 401) {\r\n        tokenCookie.value = null\r\n        if (!silent) console.log('üîí Cleared invalid token')\r\n      }\r\n      \r\n      return null\r\n    }\r\n  }\r\n\r\n  // Refresh user data\r\n  const refreshUser = async () => {\r\n    if (!user.value) return null\r\n\r\n    try {\r\n      const response = await $fetch<{ success: boolean; data: { user: AuthUser } }>('/api/auth/me')\r\n      \r\n      if (response.success && response.data.user) {\r\n        user.value = response.data.user\r\n        userCookie.value = response.data.user // Store user data in cookie for persistence\r\n        return user.value\r\n      } else {\r\n        user.value = null\r\n        userCookie.value = null // Clear user data from cookie\r\n        return null\r\n      }\r\n    } catch (err) {\r\n      console.error('Refresh user error:', err)\r\n      user.value = null\r\n      userCookie.value = null // Clear user data from cookie\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Check if user has specific permission\r\n  const hasPermission = (permission: string): boolean => {\r\n    if (!user.value || !user.value.permissions) return false\r\n    return user.value.permissions[permission] === true\r\n  }\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (role: string | string[]): boolean => {\r\n    if (!user.value || !user.value.role) return false\r\n    \r\n    if (Array.isArray(role)) {\r\n      return role.includes(user.value.role)\r\n    }\r\n    \r\n    return user.value.role === role\r\n  }\r\n\r\n  // Check if user is admin\r\n  const isAdmin = computed(() => {\r\n    return hasRole(['admin', 'super_admin', 'moderator'])\r\n  })\r\n\r\n  // Check if user is super admin\r\n  const isSuperAdmin = computed(() => {\r\n    return hasRole('super_admin')\r\n  })\r\n\r\n  // Get user initials for avatar\r\n  const userInitials = computed(() => {\r\n    if (!user.value?.full_name) return 'AD'\r\n    return user.value.full_name\r\n      .split(' ')\r\n      .map(name => name.charAt(0))\r\n      .slice(0, 2)\r\n      .join('')\r\n      .toUpperCase()\r\n  })\r\n\r\n  return {\r\n    // State\r\n    user: readonly(user),\r\n    loading: readonly(loading),\r\n    error: readonly(error),\r\n    \r\n    // Computed\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    userInitials,\r\n    \r\n    // Methods\r\n    login,\r\n    logout,\r\n    checkAuth,\r\n    refreshUser,\r\n    hasPermission,\r\n    hasRole\r\n  }\r\n}\r\n"],"version":3}