{"file":"useCMS.mjs","mappings":"8GAAO,MAAMA,EAAS,IAAM,CAE1B,MAAMC,EAAeC,EAAS,mBAAoB,KAAO,CAAG,EAAA,EAGtDC,EAAaD,EAAS,iBAAkB,KAAO,CAAG,EAAA,EAGlDE,EAAcF,EAAS,kBAAmB,IAAM,IAAI,EAGpDG,EAAmB,SAAY,CAC/B,GAAA,CACI,MAAAC,EAAW,MAAM,OAAO,2BAA2B,EAC5C,OAAAL,EAAA,MAAQK,EAAS,KAAK,SAC5BA,EAAS,KAAK,eACdC,EAAO,CACN,eAAA,MAAM,+BAAgCA,CAAK,EAC5C,CAAC,CAAA,CAEZ,EAGMC,EAAiB,MAAOC,GAAsB,CAC9C,GAAA,CACF,MAAMC,EAAMD,EAAW,oCAAoCA,CAAQ,GAAK,yBAClEH,EAAW,MAAM,OAAOI,CAAG,EACtB,OAAAP,EAAA,MAAQG,EAAS,KAAK,MAC1BA,EAAS,KAAK,YACdC,EAAO,CACN,eAAA,MAAM,4BAA6BA,CAAK,EACzC,CAAC,CAAA,CAEZ,EAGMI,EAAW,MAAOC,GAAiB,CACnC,GAAA,CACF,MAAMN,EAAW,MAAM,OAAO,qBAAqBM,CAAI,EAAE,EACzD,OAAAR,EAAY,MAAQE,EAAS,KACtBA,EAAS,WACTC,EAAO,CACN,eAAA,MAAM,sBAAuBA,CAAK,EACnC,IAAA,CAEX,EAGMM,EAAa,CAACC,EAAkBC,EAAaC,EAAoB,KAAO,OAC5E,QAAOC,EAAAhB,EAAa,MAAMa,CAAQ,IAA3B,YAAAG,EAA+BF,KAAQC,CAChD,EAGME,EAAWT,GACRN,EAAW,MAAMM,CAAQ,GAAK,CAAC,EAIlCU,EAAiB,IACdf,EAAY,MAIfgB,EAAkBC,GAAwB,OAC9C,OAAKJ,EAAAb,EAAY,QAAZ,MAAAa,EAAmB,SACjBb,EAAY,MAAM,SAAS,KAAMkB,GAAiBA,EAAQ,eAAiBD,CAAW,EADpD,IAE3C,EAGME,EAAmBF,GAAwB,OAC/C,OAAKJ,EAAAb,EAAY,QAAZ,MAAAa,EAAmB,SACjBb,EAAY,MAAM,SAAS,OAAQkB,GAAiBA,EAAQ,eAAiBD,CAAW,EADtD,CAAC,CAE5C,EAGMG,EAAmB,CAACC,EAAmBC,IAAuB,OAClE,GAAI,GAACT,EAAAb,EAAY,QAAZ,MAAAa,EAAmB,gBAAiB,CAAC,EAEpC,MAAAK,EAAUlB,EAAY,MAAM,SAAS,KAAMuB,GAAWA,EAAE,KAAOF,CAAS,EAC9E,OAAKH,GAAA,MAAAA,EAAS,eAEVI,EACKJ,EAAQ,eAAe,OAAQM,GAAeA,EAAM,aAAeF,CAAS,EAG9EJ,EAAQ,eANsB,CAAC,CAOxC,EAGMO,EAAgB,SAAY,CAChC,MAAM,QAAQ,IAAI,CAChBxB,EAAiB,EACjBG,EAAe,CAAA,CAChB,CACH,EAEO,MAAA,CAEL,aAAcsB,EAAS7B,CAAY,EACnC,WAAY6B,EAAS3B,CAAU,EAC/B,YAAa2B,EAAS1B,CAAW,EAGjC,iBAAAC,EACA,eAAAG,EACA,SAAAG,EACA,WAAAE,EACA,QAAAK,EACA,eAAAC,EACA,eAAAC,EACA,gBAAAG,EACA,iBAAAC,EACA,cAAAK,CACF,CACF","names":["useCMS","siteSettings","useState","navigation","currentPage","loadSiteSettings","response","error","loadNavigation","menuName","url","loadPage","slug","getSetting","category","key","defaultValue","_a","getMenu","getCurrentPage","getPageSection","sectionType","section","getPageSections","getSectionBlocks","sectionId","blockType","s","block","initializeCMS","readonly"],"sources":["../../../../composables/useCMS.ts"],"sourcesContent":["export const useCMS = () => {\r\n  // Site settings\r\n  const siteSettings = useState('cms.siteSettings', () => ({}))\r\n  \r\n  // Navigation\r\n  const navigation = useState('cms.navigation', () => ({}))\r\n  \r\n  // Current page data\r\n  const currentPage = useState('cms.currentPage', () => null)\r\n\r\n  // Load site settings\r\n  const loadSiteSettings = async () => {\r\n    try {\r\n      const response = await $fetch('/api/public/site-settings')\r\n      siteSettings.value = response.data.settings\r\n      return response.data.settings\r\n    } catch (error) {\r\n      console.error('Error loading site settings:', error)\r\n      return {}\r\n    }\r\n  }\r\n\r\n  // Load navigation\r\n  const loadNavigation = async (menuName?: string) => {\r\n    try {\r\n      const url = menuName ? `/api/public/navigation?menu_name=${menuName}` : '/api/public/navigation'\r\n      const response = await $fetch(url)\r\n      navigation.value = response.data.menus\r\n      return response.data.menus\r\n    } catch (error) {\r\n      console.error('Error loading navigation:', error)\r\n      return {}\r\n    }\r\n  }\r\n\r\n  // Load page by slug\r\n  const loadPage = async (slug: string) => {\r\n    try {\r\n      const response = await $fetch(`/api/public/pages/${slug}`)\r\n      currentPage.value = response.data\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error loading page:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Get setting value\r\n  const getSetting = (category: string, key: string, defaultValue: any = '') => {\r\n    return siteSettings.value[category]?.[key] || defaultValue\r\n  }\r\n\r\n  // Get navigation menu\r\n  const getMenu = (menuName: string) => {\r\n    return navigation.value[menuName] || []\r\n  }\r\n\r\n  // Get current page data\r\n  const getCurrentPage = () => {\r\n    return currentPage.value\r\n  }\r\n\r\n  // Get page section by type\r\n  const getPageSection = (sectionType: string) => {\r\n    if (!currentPage.value?.sections) return null\r\n    return currentPage.value.sections.find((section: any) => section.section_type === sectionType)\r\n  }\r\n\r\n  // Get page sections by type\r\n  const getPageSections = (sectionType: string) => {\r\n    if (!currentPage.value?.sections) return []\r\n    return currentPage.value.sections.filter((section: any) => section.section_type === sectionType)\r\n  }\r\n\r\n  // Get content blocks from section\r\n  const getSectionBlocks = (sectionId: number, blockType?: string) => {\r\n    if (!currentPage.value?.sections) return []\r\n    \r\n    const section = currentPage.value.sections.find((s: any) => s.id === sectionId)\r\n    if (!section?.content_blocks) return []\r\n    \r\n    if (blockType) {\r\n      return section.content_blocks.filter((block: any) => block.block_type === blockType)\r\n    }\r\n    \r\n    return section.content_blocks\r\n  }\r\n\r\n  // Initialize CMS data\r\n  const initializeCMS = async () => {\r\n    await Promise.all([\r\n      loadSiteSettings(),\r\n      loadNavigation()\r\n    ])\r\n  }\r\n\r\n  return {\r\n    // State\r\n    siteSettings: readonly(siteSettings),\r\n    navigation: readonly(navigation),\r\n    currentPage: readonly(currentPage),\r\n    \r\n    // Methods\r\n    loadSiteSettings,\r\n    loadNavigation,\r\n    loadPage,\r\n    getSetting,\r\n    getMenu,\r\n    getCurrentPage,\r\n    getPageSection,\r\n    getPageSections,\r\n    getSectionBlocks,\r\n    initializeCMS\r\n  }\r\n}\r\n"],"version":3}