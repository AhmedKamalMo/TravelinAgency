{"version":3,"file":"useWhatsApp.mjs","sources":["../../../../composables/useWhatsApp.ts"],"sourcesContent":["import type { NotificationResult, PackageInquiry, DestinationInquiry } from '~/types/whatsapp'\nimport { ref } from 'vue'\n\nexport const useWhatsApp = () => {\n  const whatsappNumber = '+966500982394'\n  const whatsappBaseUrl = 'https://wa.me'\n  const { locale } = useI18n()\n\n  const notificationSent = ref(false)\n  const notificationError = ref<string | null>(null)\n  const isLoading = ref(false)\n\n  /**\n   * Get WhatsApp contact URL with optional message\n   * @param message Optional pre-filled message\n   * @returns Full WhatsApp URL\n   */\n  const getWhatsAppUrl = (message?: string) => {\n    const baseUrl = `${whatsappBaseUrl}/${whatsappNumber}`\n    if (!message) return baseUrl\n    \n    const encodedMessage = encodeURIComponent(message)\n    return `${baseUrl}?text=${encodedMessage}`\n  }\n\n  /**\n   * Send a WhatsApp notification via Twilio for package inquiries\n   * @param data Form data to send in the notification\n   * @returns Notification result with success status and optional error\n   */\n  const sendPackageNotification = async (data: Partial<PackageInquiry>): Promise<NotificationResult> => {\n    isLoading.value = true\n    notificationError.value = null\n    \n    try {\n      const response = await $fetch<{\n        success: boolean;\n        inquiryId: string;\n        notificationSent: boolean;\n        notificationId?: string;\n        error?: string;\n      }>('/api/package-contact-form', {\n        method: 'POST',\n        body: {\n          ...data,\n          locale: locale.value\n        }\n      })\n      \n      if (response.success) {\n        notificationSent.value = true\n      } else {\n        notificationError.value = response.error || 'Unknown error occurred'\n      }\n      \n      return {\n        success: response.notificationSent,\n        messageId: response.notificationId,\n        error: response.error\n      }\n    } catch (error: any) {\n      console.error('Failed to send WhatsApp notification:', error)\n      \n      notificationError.value = error.message || 'Failed to send notification'\n      \n      // Return error information for the UI\n      return {\n        success: false,\n        error: notificationError.value || 'Failed to send notification'\n      }\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  /**\n   * Send a WhatsApp notification via Twilio for destination inquiries\n   * @param data Form data to send in the notification\n   * @returns Notification result with success status and optional error\n   */\n  const sendDestinationNotification = async (data: Partial<DestinationInquiry>): Promise<NotificationResult> => {\n    isLoading.value = true\n    notificationError.value = null\n    \n    try {\n      const response = await $fetch<{\n        success: boolean;\n        inquiryId: string;\n        notificationSent: boolean;\n        notificationId?: string;\n        error?: string;\n      }>('/api/destination-contact-form', {\n        method: 'POST',\n        body: {\n          ...data,\n          locale: locale.value\n        }\n      })\n      \n      if (response.success) {\n        notificationSent.value = true\n      } else {\n        notificationError.value = response.error || 'Unknown error occurred'\n      }\n      \n      return {\n        success: response.notificationSent,\n        messageId: response.notificationId,\n        error: response.error\n      }\n    } catch (error: any) {\n      console.error('Failed to send destination WhatsApp notification:', error)\n      \n      notificationError.value = error.message || 'Failed to send notification'\n      \n      // Return error information for the UI\n      return {\n        success: false,\n        error: notificationError.value || 'Failed to send notification'\n      }\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  return {\n    whatsappNumber,\n    getWhatsAppUrl,\n    sendPackageNotification,\n    sendDestinationNotification,\n    notificationSent,\n    notificationError,\n    isLoading\n  }\n}\n"],"names":["useWhatsApp","whatsappNumber","whatsappBaseUrl","locale","useI18n","notificationSent","ref","notificationError","isLoading","message","baseUrl","encodedMessage","data","response","error"],"mappings":"+FAGO,MAAMA,EAAc,IAAM,CAC/B,MAAMC,EAAiB,gBACjBC,EAAkB,gBAClB,CAAE,OAAAC,CAAO,EAAIC,EAAQ,EAErBC,EAAmBC,EAAI,EAAK,EAC5BC,EAAoBD,EAAmB,IAAI,EAC3CE,EAAYF,EAAI,EAAK,EAmHpB,MAAA,CACL,eAAAL,EACA,eA9GsBQ,GAAqB,CAC3C,MAAMC,EAAU,GAAGR,CAAe,IAAID,CAAc,GAChD,GAAA,CAACQ,EAAgB,OAAAC,EAEf,MAAAC,EAAiB,mBAAmBF,CAAO,EAC1C,MAAA,GAAGC,CAAO,SAASC,CAAc,EAC1C,EAyGE,wBAlG8B,MAAOC,GAA+D,CACpGJ,EAAU,MAAQ,GAClBD,EAAkB,MAAQ,KAEtB,GAAA,CACI,MAAAM,EAAW,MAAM,OAMpB,4BAA6B,CAC9B,OAAQ,OACR,KAAM,CACJ,GAAGD,EACH,OAAQT,EAAO,KAAA,CACjB,CACD,EAED,OAAIU,EAAS,QACXR,EAAiB,MAAQ,GAEPE,EAAA,MAAQM,EAAS,OAAS,yBAGvC,CACL,QAASA,EAAS,iBAClB,UAAWA,EAAS,eACpB,MAAOA,EAAS,KAClB,QACOC,EAAY,CACX,eAAA,MAAM,wCAAyCA,CAAK,EAE1CP,EAAA,MAAQO,EAAM,SAAW,8BAGpC,CACL,QAAS,GACT,MAAOP,EAAkB,OAAS,6BACpC,CAAA,QACA,CACAC,EAAU,MAAQ,EAAA,CAEtB,EAwDE,4BAjDkC,MAAOI,GAAmE,CAC5GJ,EAAU,MAAQ,GAClBD,EAAkB,MAAQ,KAEtB,GAAA,CACI,MAAAM,EAAW,MAAM,OAMpB,gCAAiC,CAClC,OAAQ,OACR,KAAM,CACJ,GAAGD,EACH,OAAQT,EAAO,KAAA,CACjB,CACD,EAED,OAAIU,EAAS,QACXR,EAAiB,MAAQ,GAEPE,EAAA,MAAQM,EAAS,OAAS,yBAGvC,CACL,QAASA,EAAS,iBAClB,UAAWA,EAAS,eACpB,MAAOA,EAAS,KAClB,QACOC,EAAY,CACX,eAAA,MAAM,oDAAqDA,CAAK,EAEtDP,EAAA,MAAQO,EAAM,SAAW,8BAGpC,CACL,QAAS,GACT,MAAOP,EAAkB,OAAS,6BACpC,CAAA,QACA,CACAC,EAAU,MAAQ,EAAA,CAEtB,EAOE,iBAAAH,EACA,kBAAAE,EACA,UAAAC,CACF,CACF"}