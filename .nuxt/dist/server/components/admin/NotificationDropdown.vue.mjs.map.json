{"file":"NotificationDropdown.vue.mjs","mappings":"8zBA0IA,MAAMA,EAAmBC,EAAI,EAAK,EAC5BC,EAAkBD,EAAI,IAAI,EAC1BE,EAAYF,EAAI,EAAK,EAGiBG,EAAiB,EAI7D,MAAMC,EAAgBJ,EAAI,CAAE,CAAA,EAGtBK,EAAcC,EAAS,IACpBF,EAAc,MAAM,OAAOG,GAAKA,EAAE,SAAW,KAAK,EAAE,MAC5D,EAGDC,EAAeP,EAAiB,IAAM,CACpCF,EAAiB,MAAQ,EAC3B,CAAC,EAGDU,EAAMV,EAAkB,MAAOW,GAAW,CACpCA,GACF,MAAMC,EAAiB,CAE3B,CAAC,EAoBD,MAAMA,EAAoB,SAAY,CACpC,GAAI,CACFT,EAAU,MAAQ,GAClB,MAAMU,EAAW,MAAM,OAAO,uBAAuB,EAEjDA,GAAYA,EAAS,WAEvBR,EAAc,MAAQQ,EAAS,SAC5B,OAAOC,GAAOA,EAAI,SAAW,KAAK,EAClC,MAAM,EAAG,EAAE,EACX,IAAIA,IAAQ,CACX,GAAIA,EAAI,GACR,KAAMA,EAAI,OAAS,UAAY,UAAY,UAC3C,MAAOA,EAAI,OAAS,UAAY,kBAAoB,cACpD,YAAaA,EAAI,QAAQ,OAAS,IAAMA,EAAI,QAAQ,UAAU,EAAG,GAAG,EAAI,MAAQA,EAAI,QACpF,KAAMA,EAAI,KACV,MAAOA,EAAI,MACX,MAAOA,EAAI,MACX,QAASA,EAAI,QACb,OAAQA,EAAI,OACZ,WAAYA,EAAI,UAC1B,EAAU,EAEP,OAAQC,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,EAC9CV,EAAc,MAAQ,CAAA,CAC1B,QAAY,CACRF,EAAU,MAAQ,EACtB,CACA,EAsCMa,EAAuBC,IACb,CACZ,QAAS,2BACT,QAAS,yBACT,QAAS,2BACT,YAAa,wBACjB,GACeA,CAAI,GAAK,iCAIlBC,EAAwBD,IACb,CACb,QAAS,gBACT,QAAS,iBACT,QAAS,kBACT,YAAa,iBACjB,GACgBA,CAAI,GAAK,gBAInBE,EAA0BC,GAAe,CAC7C,MAAMC,EAAO,IAAI,KAAKD,CAAU,EAE1BE,EADM,IAAI,KACGD,EAEnB,OAAIC,EAAO,IAAc,OACrBA,EAAO,KAAgB,GAAG,KAAK,MAAMA,EAAO,GAAK,CAAC,SAClDA,EAAO,MAAiB,GAAG,KAAK,MAAMA,EAAO,IAAO,CAAC,QAClDD,EAAK,mBAAmB,OAAO,CACxC","names":["notificationOpen","ref","notificationRef","isLoading","useMessageCounter","notifications","totalUnread","computed","n","onClickOutside","watch","isOpen","loadNotifications","response","msg","error","getNotificationIcon","type","getNotificationColor","formatNotificationTime","dateString","date","diff"],"sources":["../../../../../components/admin/NotificationDropdown.vue"],"sourcesContent":["<template>\n  <div class=\"relative\" ref=\"notificationRef\">\n    <!-- زر الإشعارات -->\n    <button\n      @click=\"notificationOpen = !notificationOpen\"\n      class=\"p-2 rounded-full text-white hover:text-pink-100 hover:bg-pink-400/30 transition-all duration-200 relative\"\n      :class=\"{ 'bg-pink-400/20': notificationOpen }\"\n    >\n      <Icon name=\"material-symbols:notifications-outline\" class=\"h-6 w-6\" />\n      <!-- شارة الإشعارات -->\n      <span \n        v-if=\"totalUnread > 0\"\n        class=\"absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-medium animate-pulse\"\n      >\n        {{ totalUnread > 99 ? '99+' : totalUnread }}\n      </span>\n    </button>\n\n    <!-- قائمة الإشعارات المنسدلة -->\n    <Transition\n      enter-active-class=\"transition ease-out duration-100\"\n      enter-from-class=\"transform opacity-0 scale-95\"\n      enter-to-class=\"transform opacity-100 scale-100\"\n      leave-active-class=\"transition ease-in duration-75\"\n      leave-from-class=\"transform opacity-100 scale-100\"\n      leave-to-class=\"transform opacity-0 scale-95\"\n    >\n      <div\n        v-if=\"notificationOpen\"\n        class=\"absolute left-0 mt-2 w-96 bg-white rounded-xl shadow-2xl border border-gray-200 z-50 max-h-96 overflow-hidden backdrop-blur-sm\"\n      >\n        <!-- رأس القائمة -->\n        <div class=\"px-4 py-3 border-b border-gray-200 flex items-center justify-between\">\n          <h3 class=\"text-lg font-semibold text-gray-900\">الإشعارات</h3>\n          <div class=\"flex items-center space-x-2 space-x-reverse\">\n            <button\n              v-if=\"totalUnread > 0\"\n              @click=\"markAllAsRead\"\n              class=\"text-sm text-blue-600 hover:text-blue-800 font-medium\"\n            >\n              تعيين الكل كمقروء\n            </button>\n            <button\n              @click=\"refreshNotifications\"\n              class=\"p-1 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100\"\n              :disabled=\"isLoading\"\n            >\n              <Icon \n                name=\"material-symbols:refresh\" \n                class=\"h-4 w-4\"\n                :class=\"{ 'animate-spin': isLoading }\"\n              />\n            </button>\n          </div>\n        </div>\n\n        <!-- قائمة الإشعارات -->\n        <div class=\"max-h-80 overflow-y-auto\">\n          <div v-if=\"isLoading\" class=\"p-4 text-center\">\n            <Icon name=\"material-symbols:refresh\" class=\"h-6 w-6 animate-spin mx-auto text-gray-400\" />\n            <p class=\"text-sm text-gray-500 mt-2\">جاري تحميل الإشعارات...</p>\n          </div>\n\n          <div v-else-if=\"notifications.length === 0\" class=\"p-4 text-center\">\n            <Icon name=\"material-symbols:notifications-off\" class=\"h-8 w-8 mx-auto text-gray-400\" />\n            <p class=\"text-sm text-gray-500 mt-2\">لا توجد إشعارات جديدة</p>\n          </div>\n\n          <div v-else class=\"divide-y divide-gray-100\">\n            <div\n              v-for=\"notification in notifications\"\n              :key=\"`${notification.type}-${notification.id}`\"\n              @click=\"handleNotificationClick(notification)\"\n              class=\"p-4 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 cursor-pointer transition-all duration-200\"\n              :class=\"{ 'bg-gradient-to-r from-blue-50 to-purple-50 border-r-4 border-blue-500': !notification.is_read }\"\n            >\n              <div class=\"flex items-start space-x-3 space-x-reverse\">\n                <!-- أيقونة الإشعار -->\n                <div class=\"flex-shrink-0\">\n                  <div \n                    class=\"h-8 w-8 rounded-full flex items-center justify-center\"\n                    :class=\"getNotificationColor(notification.type).replace('text-', 'bg-').replace('-600', '-100')\"\n                  >\n                    <Icon \n                      :name=\"getNotificationIcon(notification.type)\" \n                      class=\"h-4 w-4\"\n                      :class=\"getNotificationColor(notification.type)\"\n                    />\n                  </div>\n                </div>\n\n                <!-- محتوى الإشعار -->\n                <div class=\"flex-1 min-w-0\">\n                  <div class=\"flex items-center justify-between\">\n                    <p class=\"text-sm font-medium text-gray-900 truncate\">\n                      {{ notification.title }}\n                    </p>\n                    <div class=\"flex items-center space-x-2 space-x-reverse\">\n                      <span class=\"text-xs text-gray-500\">\n                        {{ formatNotificationTime(notification.created_at) }}\n                      </span>\n                      <div \n                        v-if=\"!notification.is_read\"\n                        class=\"h-2 w-2 bg-blue-500 rounded-full\"\n                      ></div>\n                    </div>\n                  </div>\n                  <p class=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                    {{ notification.description }}\n                  </p>\n                  <div class=\"mt-2 flex items-center text-xs text-gray-500\">\n                    <span class=\"truncate\">{{ notification.name }}</span>\n                    <span class=\"mx-2\">•</span>\n                    <span class=\"truncate\">{{ notification.phone }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- تذييل القائمة -->\n        <div v-if=\"notifications.length > 0\" class=\"px-4 py-3 border-t border-gray-200\">\n          <NuxtLink\n            to=\"/admin/notifications\"\n            class=\"block text-center text-sm text-blue-600 hover:text-blue-800 font-medium\"\n            @click=\"notificationOpen = false\"\n          >\n            عرض جميع الإشعارات\n          </NuxtLink>\n        </div>\n      </div>\n    </Transition>\n  </div>\n</template>\n\n<script setup>\n// المتغيرات التفاعلية\nconst notificationOpen = ref(false)\nconst notificationRef = ref(null)\nconst isLoading = ref(false)\n\n// Message counter and notifications\nconst { unreadCount, fetchMessageCounts } = useMessageCounter()\nconst { startNotificationSystem, stopNotificationSystem } = useNotificationSystem()\n\n// الإشعارات الحقيقية\nconst notifications = ref([])\n\n// حساب الإشعارات غير المقروءة\nconst totalUnread = computed(() => {\n  return notifications.value.filter(n => n.status === 'new').length\n})\n\n// إغلاق القائمة عند النقر خارجها\nonClickOutside(notificationRef, () => {\n  notificationOpen.value = false\n})\n\n// تحميل الإشعارات عند فتح القائمة\nwatch(notificationOpen, async (isOpen) => {\n  if (isOpen) {\n    await loadNotifications()\n  }\n})\n\n// تهيئة النظام عند تحميل المكون\nonMounted(async () => {\n  await loadNotifications()\n  await fetchMessageCounts()\n  \n  // تحديث تلقائي كل 30 ثانية\n  const interval = setInterval(async () => {\n    await loadNotifications()\n    await fetchMessageCounts()\n  }, 30000)\n  \n  // تنظيف عند إلغاء تحميل المكون\n  onUnmounted(() => {\n    clearInterval(interval)\n  })\n})\n\n// دالة تحميل الإشعارات الحقيقية\nconst loadNotifications = async () => {\n  try {\n    isLoading.value = true\n    const response = await $fetch('/api/contact-messages')\n    \n    if (response && response.messages) {\n      // تحويل الرسائل إلى إشعارات\n      notifications.value = response.messages\n        .filter(msg => msg.status === 'new') // فقط الرسائل غير المقروءة\n        .slice(0, 10) // آخر 10 رسائل\n        .map(msg => ({\n          id: msg.id,\n          type: msg.type === 'booking' ? 'booking' : 'contact',\n          title: msg.type === 'booking' ? 'استفسار عن باقة' : 'رسالة جديدة',\n          description: msg.message.length > 100 ? msg.message.substring(0, 100) + '...' : msg.message,\n          name: msg.name,\n          phone: msg.phone,\n          email: msg.email,\n          is_read: msg.is_read,\n          status: msg.status,\n          created_at: msg.created_at\n        }))\n    }\n  } catch (error) {\n    console.error('خطأ في تحميل الإشعارات:', error)\n    notifications.value = []\n  } finally {\n    isLoading.value = false\n  }\n}\n\n// دالة تحديث الإشعارات\nconst refreshNotifications = async () => {\n  await loadNotifications()\n  await fetchMessageCounts()\n}\n\n// دالة تعيين الكل كمقروء\nconst markAllAsRead = async () => {\n  try {\n    // Update in database\n    const result = await $fetch('/api/contact-messages/mark-all-read', {\n      method: 'PUT'\n    })\n    \n    if (result.success) {\n      // تعيين جميع الإشعارات كمقروءة محلياً\n      notifications.value.forEach(notification => {\n        notification.status = 'read'\n        notification.is_read = true\n      })\n      \n      // تحديث العداد\n      const { fetchMessageCounts } = useMessageCounter()\n      await fetchMessageCounts()\n      \n      // إعادة تحميل الإشعارات\n      await loadNotifications()\n      \n      console.log(`تم تعيين ${result.affectedRows} إشعار كمقروء`)\n    }\n  } catch (error) {\n    console.error('خطأ في تعيين الإشعارات كمقروءة:', error)\n  }\n}\n\n// دالة الحصول على أيقونة الإشعار\nconst getNotificationIcon = (type) => {\n  const icons = {\n    contact: 'material-symbols:message',\n    booking: 'material-symbols:event',\n    package: 'material-symbols:luggage',\n    destination: 'material-symbols:place'\n  }\n  return icons[type] || 'material-symbols:notifications'\n}\n\n// دالة الحصول على لون الإشعار\nconst getNotificationColor = (type) => {\n  const colors = {\n    contact: 'text-blue-600',\n    booking: 'text-green-600',\n    package: 'text-purple-600',\n    destination: 'text-orange-600'\n  }\n  return colors[type] || 'text-gray-600'\n}\n\n// دالة تنسيق وقت الإشعار\nconst formatNotificationTime = (dateString) => {\n  const date = new Date(dateString)\n  const now = new Date()\n  const diff = now - date\n  \n  if (diff < 60000) return 'الآن'\n  if (diff < 3600000) return `${Math.floor(diff / 60000)} دقيقة`\n  if (diff < 86400000) return `${Math.floor(diff / 3600000)} ساعة`\n  return date.toLocaleDateString('ar-SA')\n}\n\n// دالة التعامل مع النقر على الإشعار\nconst handleNotificationClick = async (notification) => {\n  // تعيين الإشعار كمقروء\n  if (!notification.is_read) {\n    try {\n      // Update in database\n      const result = await $fetch(`/api/contact-messages/${notification.id}`, {\n        method: 'PUT',\n        body: {\n          is_read: true,\n          status: 'read'\n        }\n      })\n      \n      if (result.success) {\n        notification.status = 'read'\n        notification.is_read = true\n        \n        // تحديث العداد\n        const { fetchMessageCounts } = useMessageCounter()\n        await fetchMessageCounts()\n      }\n    } catch (error) {\n      console.error('خطأ في تحديث حالة الإشعار:', error)\n    }\n  }\n\n  // التنقل إلى الصفحة المناسبة\n  let route = ''\n  switch (notification.type) {\n    case 'contact':\n    case 'booking':\n      route = '/admin/contacts'\n      break\n    case 'package':\n      route = '/admin/packages'\n      break\n    case 'destination':\n      route = '/admin/destinations'\n      break\n  }\n\n  if (route) {\n    await navigateTo(route)\n    notificationOpen.value = false\n  }\n}\n</script>\n\n<style scoped>\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n</style>\n"],"version":3}