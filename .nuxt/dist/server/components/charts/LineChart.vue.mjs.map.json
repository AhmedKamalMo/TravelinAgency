{"file":"LineChart.vue.mjs","mappings":"2iBAsBAA,EAAM,SACJC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,CACF,EAEA,MAAMC,EAAQC,EAeM,OAAAC,EAAI,IAAI,EAqF5BC,EAAM,IAAMH,EAAM,KAPE,IAAM,CAK1B,EAEqC,CAAE,KAAM,GAAM,EACnDG,EAAM,IAAMH,EAAM,QAAS,IAAM,CAKjC,EAAG,CAAE,KAAM,GAAM","names":["Chart","CategoryScale","LinearScale","PointElement","LineElement","LineController","Title","Tooltip","Legend","Filler","props","__props","ref","watch"],"sources":["../../../../../components/charts/LineChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <canvas ref=\"chartCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted, watch } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  LineController,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\n\r\n// Register Chart.js components\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  LineController,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\nconst props = defineProps({\r\n  data: {\r\n    type: Object,\r\n    required: true\r\n  },\r\n  options: {\r\n    type: Object,\r\n    default: () => ({})\r\n  },\r\n  height: {\r\n    type: Number,\r\n    default: 300\r\n  }\r\n})\r\n\r\nconst chartCanvas = ref(null)\r\nlet chartInstance = null\r\n\r\nconst defaultOptions = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  plugins: {\r\n    legend: {\r\n      position: 'top',\r\n      labels: {\r\n        usePointStyle: true,\r\n        padding: 20,\r\n        font: {\r\n          family: 'Cairo, sans-serif'\r\n        }\r\n      }\r\n    },\r\n    tooltip: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n      titleColor: 'white',\r\n      bodyColor: 'white',\r\n      borderColor: 'rgba(255, 255, 255, 0.1)',\r\n      borderWidth: 1,\r\n      cornerRadius: 8,\r\n      displayColors: true,\r\n      intersect: false,\r\n      mode: 'index'\r\n    }\r\n  },\r\n  scales: {\r\n    x: {\r\n      grid: {\r\n        display: false\r\n      },\r\n      ticks: {\r\n        font: {\r\n          family: 'Cairo, sans-serif'\r\n        }\r\n      }\r\n    },\r\n    y: {\r\n      grid: {\r\n        color: 'rgba(0, 0, 0, 0.1)'\r\n      },\r\n      ticks: {\r\n        font: {\r\n          family: 'Cairo, sans-serif'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  elements: {\r\n    line: {\r\n      tension: 0.4\r\n    },\r\n    point: {\r\n      radius: 4,\r\n      hoverRadius: 6\r\n    }\r\n  }\r\n}\r\n\r\nconst createChart = () => {\r\n  if (!chartCanvas.value) return\r\n\r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  \r\n  if (chartInstance) {\r\n    chartInstance.destroy()\r\n  }\r\n\r\n  chartInstance = new Chart(ctx, {\r\n    type: 'line',\r\n    data: props.data,\r\n    options: { ...defaultOptions, ...props.options }\r\n  })\r\n}\r\n\r\nconst updateChart = () => {\r\n  if (chartInstance) {\r\n    chartInstance.data = props.data\r\n    chartInstance.update('active')\r\n  }\r\n}\r\n\r\nwatch(() => props.data, updateChart, { deep: true })\r\nwatch(() => props.options, () => {\r\n  if (chartInstance) {\r\n    chartInstance.options = { ...defaultOptions, ...props.options }\r\n    chartInstance.update()\r\n  }\r\n}, { deep: true })\r\n\r\nonMounted(() => {\r\n  createChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (chartInstance) {\r\n    chartInstance.destroy()\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  position: relative;\r\n  height: v-bind(height + 'px');\r\n  width: 100%;\r\n}\r\n</style>\r\n"],"version":3}