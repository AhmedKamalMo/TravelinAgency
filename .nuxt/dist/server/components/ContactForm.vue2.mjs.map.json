{"file":"ContactForm.vue2.mjs","mappings":"omBAuIM,KAAA,CAAE,EAAAA,CAAE,EAAIC,EAAQ,EAGhBC,EAAQC,EAORC,EAAeC,EAAI,EAAK,EACxBC,EAAcD,EAAI,EAAK,EACvBE,EAAYF,EAAI,EAAK,EACrBG,EAAmBC,EAAS,CAChC,MAAO,GACP,MAAO,EAAA,CACR,EAqBKC,EAAY,CAChB,CAAE,KAAM,OAAQ,KAAM,GAAI,QAAS,cAAe,IAAK,IAAK,EAC5D,CAAE,KAAM,MAAO,KAAM,GAAI,QAAS,eAAgB,IAAK,IAAK,EAC5D,CAAE,KAAM,OAAQ,KAAM,GAAI,QAAS,cAAe,IAAK,IAAK,EAC5D,CAAE,KAAM,OAAQ,KAAM,GAAI,QAAS,YAAa,IAAK,IAAK,EAC1D,CAAE,KAAM,OAAQ,KAAM,GAAI,QAAS,YAAa,IAAK,IAAK,EAC1D,CAAE,KAAM,OAAQ,KAAM,GAAI,QAAS,YAAa,IAAK,IAAK,EAC1D,CAAE,KAAM,OAAQ,KAAM,GAAI,QAAS,YAAa,IAAK,IAAK,CAC5D,EAEMC,EAAOF,EAAS,CACpB,SAAU,GACV,MAAO,GACP,YAAaC,EAAU,CAAC,EAAE,KAC1B,MAAO,GACP,QAAS,EAAA,CACV,EAGK,CAAE,OAAAE,CAAO,EAAIX,EAAQ,EAC3B,OAAAY,EAAM,IAAMX,EAAM,SAAWY,GAAe,CAC1C,GAAIA,EAAY,CACd,MAAMC,EAAgBH,EAAO,MAAM,MAAM,EAAG,CAAC,EAC7CD,EAAK,QAAU,qBAAqBG,EAAW,SAASC,CAAa,EAAE,CAAC,EAAA,CAC1E,EACC,CAAE,UAAW,GAAM","names":["t","useI18n","props","__props","isSubmitting","ref","showSuccess","showError","validationErrors","reactive","countries","form","locale","watch","newPackage","currentLocale"],"sources":["../../../../components/ContactForm.vue"],"sourcesContent":["<template>\n  <div v-if=\"modelValue\" class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\" @click=\"closeModal\">\n    <div class=\"bg-white rounded-2xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto transform transition-all duration-300\" \n         :class=\"{ 'scale-100 opacity-100': modelValue, 'scale-95 opacity-0': !modelValue }\"\n         @click.stop>\n      \n      <!-- Header -->\n      <div class=\"sticky top-0 bg-white border-b border-gray-100 px-6 py-4 rounded-t-2xl\">\n        <div class=\"flex justify-between items-center\">\n          <h2 class=\"text-xl font-bold text-gray-900\">{{ t('contact.title') }}</h2>\n          <button @click=\"closeModal\" class=\"text-gray-400 hover:text-gray-600 transition-colors\">\n            <Icon name=\"material-symbols:close\" class=\"h-6 w-6\" />\n          </button>\n        </div>\n        <p class=\"text-sm text-gray-600 mt-1\">{{ t('contact.description') }} <span class=\"text-primary font-medium\">{{ t('contact.free') }}</span></p>\n      </div>\n\n      <!-- Content -->\n      <div class=\"px-6 py-4\">\n      \n        <form @submit.prevent=\"handleSubmit\" class=\"space-y-4\">\n          <!-- Name Field -->\n          <div>\n            <label for=\"fullName\" class=\"block text-sm font-medium text-gray-700 mb-1\">{{ t('contact.form.fullName.label') }}</label>\n            <input\n              v-model=\"form.fullName\"\n              type=\"text\"\n              id=\"fullName\"\n              required\n              :placeholder=\"t('contact.form.fullName.placeholder')\"\n              class=\"w-full px-3 py-2.5 rounded-lg border border-gray-300 focus:border-primary focus:ring-1 focus:ring-primary transition-colors placeholder:text-gray-400 outline-none text-gray-700 text-sm\"\n            />\n          </div>\n          \n          <!-- Email Field -->\n          <div>\n            <label for=\"email\" class=\"block text-sm font-medium text-gray-700 mb-1\">{{ t('contact.form.email.label') }}</label>\n            <input\n              v-model=\"form.email\"\n              type=\"email\"\n              id=\"email\"\n              required\n              :placeholder=\"t('contact.form.email.placeholder')\"\n              class=\"w-full px-3 py-2.5 rounded-lg border border-gray-300 focus:border-primary focus:ring-1 focus:ring-primary transition-colors placeholder:text-gray-400 outline-none text-gray-700 text-sm\"\n              :class=\"{ 'border-red-500 focus:border-red-500 focus:ring-red-500': validationErrors.email }\"\n            />\n            <p v-if=\"validationErrors.email\" class=\"mt-1 text-red-500 text-xs\">{{ validationErrors.email }}</p>\n          </div>\n\n          <!-- Phone Field -->\n          <div>\n            <label for=\"phone\" class=\"block text-sm font-medium text-gray-700 mb-1\">{{ t('contact.form.phone.label') }}</label>\n            <div class=\"flex gap-2\">\n              <select\n                v-model=\"form.countryCode\"\n                class=\"px-3 py-2.5 rounded-lg border border-gray-300 focus:border-primary focus:ring-1 focus:ring-primary transition-colors outline-none text-gray-700 text-sm min-w-[80px]\"\n                :class=\"{ 'border-red-500 focus:border-red-500 focus:ring-red-500': validationErrors.phone }\"\n              >\n                <option v-for=\"country in countries\" :key=\"country.key\" :value=\"country.code\">\n                  {{ country.code }}\n                </option>\n              </select>\n              <input\n                v-model=\"form.phone\"\n                type=\"tel\"\n                id=\"phone\"\n                required\n                :placeholder=\"countries.find(c => c.code === form.countryCode)?.example\"\n                class=\"flex-1 px-3 py-2.5 rounded-lg border border-gray-300 focus:border-primary focus:ring-1 focus:ring-primary transition-colors placeholder:text-gray-400 outline-none text-gray-700 text-sm\"\n                :class=\"{ 'text-right': $i18n.locale === 'ar', 'border-red-500 focus:border-red-500 focus:ring-red-500': validationErrors.phone }\"\n                pattern=\"[0-9]*\"\n                inputmode=\"numeric\"\n                @input=\"handlePhoneInput\"\n              />\n            </div>\n            <p v-if=\"validationErrors.phone\" class=\"mt-1 text-red-500 text-xs\">{{ validationErrors.phone }}</p>\n          </div>\n\n          <!-- Message Field -->\n          <div>\n            <label for=\"message\" class=\"block text-sm font-medium text-gray-700 mb-1\">{{ t('contact.form.message.label') }}</label>\n            <textarea\n              v-model=\"form.message\"\n              id=\"message\"\n              rows=\"3\"\n              required\n              :placeholder=\"t('contact.form.message.placeholder')\"\n              class=\"w-full px-3 py-2.5 rounded-lg border border-gray-300 focus:border-primary focus:ring-1 focus:ring-primary transition-colors placeholder:text-gray-400 outline-none text-gray-700 text-sm resize-none\"\n            ></textarea>\n          </div>\n\n                 <!-- Success Message -->\n                 <div v-if=\"showSuccess\" class=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\n                   <div class=\"flex items-center gap-3\">\n                     <Icon name=\"material-symbols:check-circle\" class=\"h-6 w-6 text-green-600\" />\n                     <div>\n                       <h4 class=\"text-green-800 font-medium text-sm\">{{ t('contact.success.title') }}</h4>\n                       <p class=\"text-green-700 text-xs mt-1\">{{ t('contact.success.message') }}</p>\n                     </div>\n                   </div>\n                 </div>\n\n                 <!-- Error Message -->\n                 <div v-if=\"showError\" class=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n                   <div class=\"flex items-center gap-3\">\n                     <Icon name=\"material-symbols:error\" class=\"h-6 w-6 text-red-600\" />\n                     <div>\n                       <h4 class=\"text-red-800 font-medium text-sm\">{{ t('contact.error.title') }}</h4>\n                       <p class=\"text-red-700 text-xs mt-1\">{{ t('contact.error.message') }}</p>\n                     </div>\n                   </div>\n                 </div>\n\n                 <!-- Submit Button -->\n                 <div class=\"pt-2\">\n                   <button\n                     type=\"submit\"\n                     :disabled=\"isSubmitting\"\n                     class=\"w-full bg-gradient-to-r from-primary to-primary-dark text-white py-3 rounded-lg font-medium hover:from-primary-dark hover:to-primary transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n                   >\n                     <Icon v-if=\"isSubmitting\" name=\"material-symbols:refresh\" class=\"h-4 w-4 animate-spin\" />\n                     <span>{{ isSubmitting ? t('common.loading') : t('contact.form.submit') }}</span>\n                   </button>\n                 </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, ref, reactive, watch } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useSoundNotifications } from '~/composables/useSoundNotifications'\n\nconst { t } = useI18n()\nconst { playSuccessSound, playErrorSound } = useSoundNotifications()\n\nconst props = defineProps<{\n  modelValue: boolean\n  package_?: any\n}>()\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst isSubmitting = ref(false)\nconst showSuccess = ref(false)\nconst showError = ref(false)\nconst validationErrors = reactive({\n  email: '',\n  phone: ''\n})\n\nconst validateEmail = (email: string) => {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  return emailRegex.test(email)\n}\n\nconst validatePhone = (phone: string, countryCode: string) => {\n  // Phone regex patterns by country code\n  const patterns: { [key: string]: RegExp } = {\n    '+20': /^1[0-9]\\d{8}$/, // Egypt: 1XXXXXXXXX\n    '+966': /^5\\d{8}$/, // Saudi Arabia: 5XXXXXXXX\n    '+971': /^5\\d{8}$/, // UAE: 5XXXXXXXX\n    '+974': /^[3-7]\\d{7}$/, // Qatar: 3XXXXXXX to 7XXXXXXX\n    '+973': /^[3-7]\\d{7}$/, // Bahrain: 3XXXXXXX to 7XXXXXXX\n    '+965': /^[5-9]\\d{7}$/, // Kuwait: 5XXXXXXX to 9XXXXXXX\n    '+968': /^[7-9]\\d{7}$/, // Oman: 7XXXXXXX to 9XXXXXXX\n  }\n  return patterns[countryCode]?.test(phone) || false\n}\n\nconst countries = [\n  { code: '+966', flag: '', example: '5X XXX XXXX', key: 'sa' },\n  { code: '+20', flag: '', example: '1X XXXX XXXX', key: 'eg' },\n  { code: '+971', flag: '', example: '5X XXX XXXX', key: 'ae' },\n  { code: '+974', flag: '', example: '3XXX XXXX', key: 'qa' },\n  { code: '+973', flag: '', example: '3XXX XXXX', key: 'bh' },\n  { code: '+965', flag: '', example: '5XXX XXXX', key: 'kw' },\n  { code: '+968', flag: '', example: '9XXX XXXX', key: 'om' }\n]\n\nconst form = reactive({\n  fullName: '',\n  email: '',\n  countryCode: countries[0].code,\n  phone: '',\n  message: ''\n})\n\n// Initialize message based on package\nconst { locale } = useI18n()\nwatch(() => props.package_, (newPackage) => {\n  if (newPackage) {\n    const currentLocale = locale.value.slice(0, 2)\n    form.message = `أنا مهتم بالباقة: ${newPackage[`title_${currentLocale}`]}`\n  }\n}, { immediate: true })\n\nconst closeModal = () => {\n  emit('update:modelValue', false)\n}\n\nconst handlePhoneInput = (event: Event) => {\n  const input = event.target as HTMLInputElement\n  // Remove any non-numeric characters\n  form.phone = input.value.replace(/\\D/g, '')\n}\n\nconst handleSubmit = async () => {\n  // Reset validation errors\n  validationErrors.email = ''\n  validationErrors.phone = ''\n  \n  // Validate email\n  if (!validateEmail(form.email)) {\n    validationErrors.email = t('contact.form.email.error')\n    return\n  }\n\n  // Validate phone\n  if (!validatePhone(form.phone, form.countryCode)) {\n    validationErrors.phone = t('contact.form.phone.error')\n    return\n  }\n\n  try {\n    isSubmitting.value = true\n    showError.value = false\n    showSuccess.value = false\n\n    // Submit to appropriate API based on context\n    let result\n    if (props.package_) {\n      // Submit to package contact API\n      result = await $fetch('/api/package-contact-form', {\n        method: 'POST',\n        body: {\n          name: form.fullName,\n          email: form.email,\n          phone: `${form.countryCode}${form.phone}`,\n          message: form.message,\n          packageId: props.package_.id,\n          packageName: props.package_[`title_${locale.value.slice(0, 2)}`],\n          locale: locale.value\n        }\n      })\n    } else {\n      // Submit to general contact messages API\n      result = await $fetch('/api/contact-messages', {\n        method: 'POST',\n        body: {\n          name: form.fullName,\n          email: form.email,\n          phone: `${form.countryCode}${form.phone}`,\n          subject: 'استفسار عام',\n          message: form.message,\n          type: 'general',\n          source: 'website'\n        }\n      })\n    }\n\n    console.log('Form submission result:', result)\n\n    if (result.success) {\n      showSuccess.value = true\n      form.fullName = ''\n      form.email = ''\n      form.phone = ''\n      form.message = ''\n      \n      // Show success message and play sound\n      showSuccess.value = true\n      playSuccessSound()\n      \n      // Close modal after 3 seconds\n      setTimeout(() => {\n        closeModal()\n      }, 3000)\n    } else {\n      showError.value = true\n    }\n  } catch (error) {\n    console.error('Error submitting contact form:', error)\n    showError.value = true\n    playErrorSound()\n  } finally {\n    isSubmitting.value = false\n  }\n}\n\nonMounted(() => {\n  const handleEscape = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      closeModal()\n    }\n  }\n  \n  window.addEventListener('keydown', handleEscape)\n  onUnmounted(() => {\n    window.removeEventListener('keydown', handleEscape)\n  })\n})\n</script>\n"],"version":3}