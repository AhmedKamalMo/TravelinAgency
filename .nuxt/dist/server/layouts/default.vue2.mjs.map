{"version":3,"file":"default.vue2.mjs","sources":["../../../../layouts/default.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <DirectionHandler />\r\n    <header class=\"bg-white shadow-sm sticky top-0 z-50\">\r\n      <nav class=\"container mx-auto px-4 py-4 sticky top-0\">\r\n        <div class=\"flex items-center justify-between\">\r\n          <NuxtLink :to=\"localpath('/')\" class=\"flex items-center\">\r\n            <NuxtImg \r\n              src=\"/images/home/logo/WonderlandLogo.svg\" \r\n              class=\"h-[48px]\"\r\n              alt=\"Wonder Land Agency Logo\" \r\n              loading=\"eager\"\r\n            />\r\n            <span class=\"font-bold text-lg font-italic text-primary-900\">{{$t('common.app_title')}}</span>\r\n          </NuxtLink>\r\n          \r\n          <div class=\"hidden md:flex items-center space-x-6 rtl:space-x-reverse\">\r\n            <NuxtLink \r\n              v-for=\"(item, index) in navItems\" \r\n              :key=\"index\"\r\n              :to=\"localpath(item.to)\"\r\n              :class=\"[\r\n                'transition-colors',\r\n                $route.path == localpath(item.to) ? 'text-primary-900 font-medium' : 'text-gray-600 hover:text-primary'\r\n              ]\"\r\n            >\r\n              {{ $t(item.label) }}\r\n            </NuxtLink>\r\n            <!-- Language Switcher -->\r\n            <button\r\n              @click.prevent.stop=\"toggleLanguage\"\r\n              class=\"px-3 py-1 rounded-md bg-primary text-white hover:bg-primary-dark transition-colors\"\r\n            >\r\n              {{ currentLocale === 'en-US' ? 'العربية' : 'English' }}\r\n            </button>\r\n          </div>\r\n          <!-- Mobile Menu Button -->\r\n          <button\r\n            @click=\"isMenuOpen = !isMenuOpen\"\r\n            class=\"md:hidden text-gray-600 hover:text-primary\"\r\n          >\r\n            <span class=\"sr-only\">Menu</span>\r\n            <svg\r\n              class=\"h-6 w-6\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                v-if=\"!isMenuOpen\"\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n                d=\"M4 6h16M4 12h16M4 18h16\"\r\n              />\r\n              <path\r\n                v-else\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <!-- Mobile Menu -->\r\n        <div\r\n          v-show=\"isMenuOpen\"\r\n          class=\"md:hidden mt-4 space-y-4\"\r\n        >\r\n          <NuxtLink\r\n            v-for=\"(item, index) in navItems\"\r\n            :key=\"index\"\r\n            :to=\"localpath(item.to)\"\r\n            :class=\"[\r\n              'block transition-colors',\r\n              $route.path == localpath(item.to) ? 'text-primary-900 font-medium' : 'text-gray-600 hover:text-primary'\r\n            ]\"\r\n            @click=\"isMenuOpen = false\"\r\n          >\r\n            {{ $t(item.label) }}\r\n          </NuxtLink>\r\n          <button\r\n            @click=\"toggleLanguage\"\r\n            class=\"w-full text-left px-3 py-1 rounded-md bg-primary text-white hover:bg-primary-dark transition-colors\"\r\n          >\r\n            {{ currentLocale === 'en-US' ? 'العربية' : 'English' }}\r\n          </button>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n\r\n    <main>\r\n      <slot />\r\n    </main>\r\n    <AppFooter />\r\n    <FloatingButtons />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from 'vue'\r\nimport AppFooter from '~/components/layout/AppFooter.vue';\r\nimport FloatingButtons from '~/components/ui/FloatingButtons.vue';\r\nconst { locale } = useI18n()\r\nconst localpath = useLocalePath()\r\nconst switchLocalePath = useSwitchLocalePath()\r\nconst currentLocale = computed(() => locale.value)\r\nconst isMenuOpen = ref(false)\r\nconst isTransitioning = ref(false)\r\nconst { startLocaleTransition } = useViewTransition()\r\n\r\nconst navItems = [\r\n  { to: '/', label: 'nav.home' },\r\n  { to: '/packages', label: 'nav.packages' },\r\n  { to: '/custom-package', label: 'nav.custom_package' },\r\n  { to: '/about', label: 'nav.about' },\r\n  // { to: '/contact', label: 'nav.contact' }\r\n]\r\n\r\n// Use enhanced direction-aware view transition for language switching\r\nconst toggleLanguage = async () => {\r\n  if (isTransitioning.value) return\r\n  isTransitioning.value = true\r\n  \r\n  const currentLocaleValue = locale.value\r\n  const targetLocale = currentLocaleValue === 'ar-SA' ? 'en-US' : 'ar-SA'\r\n  \r\n  try {\r\n    // Use the enhanced direction-aware locale transition\r\n    await startLocaleTransition(\r\n      async () => {\r\n        // Set locale client-side\r\n        locale.value = targetLocale\r\n        \r\n        // Wait for locale to fully apply\r\n        await nextTick()\r\n        \r\n        // Update URL without reload using history API - only on client side\r\n        if (process.client) {\r\n          const path = switchLocalePath(targetLocale)\r\n          window.history.replaceState(null, '', path)\r\n        }\r\n      },\r\n      currentLocaleValue,  // From locale\r\n      targetLocale        // To locale\r\n    )\r\n  } finally {\r\n    // Always reset the transitioning state\r\n    isTransitioning.value = false\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.router-link-active {\r\n  color: var(--color-primary);\r\n  font-weight: 500;\r\n}\r\n\r\n/* View Transitions */\r\n::view-transition-old(root),\r\n::view-transition-new(root) {\r\n  animation: none;\r\n  mix-blend-mode: normal;\r\n}\r\n\r\n::view-transition-old(package-*),\r\n::view-transition-new(package-*) {\r\n  animation: none;\r\n  mix-blend-mode: normal;\r\n}\r\n\r\n::view-transition-old(package-image-*),\r\n::view-transition-new(package-image-*) {\r\n  animation: none;\r\n  mix-blend-mode: normal;\r\n}\r\n\r\n::view-transition-old(package-content-*),\r\n::view-transition-new(package-content-*) {\r\n  animation: none;\r\n  mix-blend-mode: normal;\r\n}\r\n\r\n/* Language transition - specialized for locale changes */\r\n.locale-transitioning {\r\n  pointer-events: none;\r\n}\r\n\r\n/* Different opacity levels for main content vs. navigation elements */\r\n.locale-transitioning header,\r\n.locale-transitioning footer {\r\n  transition: opacity 300ms;\r\n  opacity: 0.8;\r\n  will-change: opacity;\r\n}\r\n\r\n.locale-transitioning main {\r\n  transition: all 300ms;\r\n  will-change: transform, opacity;\r\n}\r\n\r\n/* Direction-specific transitions - these are now handled in transitions.css */\r\n/* RTL support for view transitions */\r\n:root[dir=\"rtl\"] {\r\n  ::view-transition-old(*) {\r\n    animation-direction: reverse;\r\n  }\r\n  ::view-transition-new(*) {\r\n    animation-direction: reverse;\r\n  }\r\n}\r\n\r\n/* Only apply these page transitions for page navigation, not language switches */\r\n.page-enter-active,\r\n.page-leave-active {\r\n  transition: all 0.4s;\r\n}\r\n.page-enter-from {\r\n  opacity: 0;\r\n  transform: translateX(20px);\r\n}\r\n.page-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(-20px);\r\n}\r\n\r\n/* RTL transitions */\r\n:root[dir=\"rtl\"] {\r\n  .page-enter-from {\r\n    transform: translateX(-20px);\r\n  }\r\n  .page-leave-to {\r\n    transform: translateX(20px);\r\n  }\r\n}\r\n\r\nhtml.locale-transitioning main {\r\n  view-transition-name: locale-main;\r\n}\r\n</style>"],"names":["locale","useI18n","localpath","useLocalePath","useSwitchLocalePath","currentLocale","computed","isMenuOpen","ref","navItems"],"mappings":"64BAwGM,KAAA,CAAE,OAAAA,CAAO,EAAIC,EAAQ,EACrBC,EAAYC,EAAc,EACPC,EAAoB,EAC7C,MAAMC,EAAgBC,EAAS,IAAMN,EAAO,KAAK,EAC3CO,EAAaC,EAAI,EAAK,EACJA,EAAI,EAAK,EAGjC,MAAMC,EAAW,CACf,CAAE,GAAI,IAAK,MAAO,UAAW,EAC7B,CAAE,GAAI,YAAa,MAAO,cAAe,EACzC,CAAE,GAAI,kBAAmB,MAAO,oBAAqB,EACrD,CAAE,GAAI,SAAU,MAAO,WAAY,CAErC"}