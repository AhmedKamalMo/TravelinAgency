{"file":"server.mjs","mappings":"saAQA,IAAIA,EAEMA,EAAA,eAAmCC,EAAY,OAC/C,MAAAC,EAASC,EAAUC,CAAa,EAChCC,EAAOC,EAAc,CAAE,OAAAJ,EAAQ,WAAAD,EAAY,EAC7C,GAAA,CACI,MAAAM,EAAaF,EAAMG,CAAO,EAChC,MAAMH,EAAK,MAAM,SAAS,cAAeH,CAAM,QACxCO,EAAO,CACd,MAAMJ,EAAK,MAAM,SAAS,YAAaI,CAAK,GACvCC,EAAAL,EAAA,SAAQ,QAARK,EAAQ,MAAUC,EAAYF,CAAK,EAAA,CAE1C,GAAIR,GAAA,MAAAA,EAAY,gBACR,MAAA,IAAI,MAAM,iBAAiB,EAE5B,OAAAC,CACT,EAoDF,MAAAU,EAAgBX,GAAeD,EAAMC,CAAU","names":["entry","ssrContext","vueApp","createApp","RootComponent","nuxt","createNuxtApp","applyPlugins","plugins","error","_a","createError","entry$1"],"sources":["../../../node_modules/nuxt/dist/app/entry.js"],"sourcesContent":["import { createApp, createSSRApp, nextTick } from \"vue\";\r\nimport \"#build/fetch.mjs\";\r\nimport { applyPlugins, createNuxtApp } from \"./nuxt.js\";\r\nimport { createError } from \"./composables/error.js\";\r\nimport \"#build/css\";\r\nimport plugins from \"#build/plugins\";\r\nimport RootComponent from \"#build/root-component.mjs\";\r\nimport { appId, appSpaLoaderAttrs, multiApp, spaLoadingTemplateOutside, vueAppRootContainer } from \"#build/nuxt.config.mjs\";\r\nlet entry;\r\nif (import.meta.server) {\r\n  entry = async function createNuxtAppServer(ssrContext) {\r\n    const vueApp = createApp(RootComponent);\r\n    const nuxt = createNuxtApp({ vueApp, ssrContext });\r\n    try {\r\n      await applyPlugins(nuxt, plugins);\r\n      await nuxt.hooks.callHook(\"app:created\", vueApp);\r\n    } catch (error) {\r\n      await nuxt.hooks.callHook(\"app:error\", error);\r\n      nuxt.payload.error ||= createError(error);\r\n    }\r\n    if (ssrContext?._renderResponse) {\r\n      throw new Error(\"skipping render\");\r\n    }\r\n    return vueApp;\r\n  };\r\n}\r\nif (import.meta.client) {\r\n  if (import.meta.dev && import.meta.webpackHot) {\r\n    import.meta.webpackHot.accept();\r\n  }\r\n  let vueAppPromise;\r\n  entry = async function initApp() {\r\n    if (vueAppPromise) {\r\n      return vueAppPromise;\r\n    }\r\n    const isSSR = Boolean(\r\n      (multiApp ? window.__NUXT__?.[appId] : window.__NUXT__)?.serverRendered ?? (multiApp ? document.querySelector(`[data-nuxt-data=\"${appId}\"]`) : document.getElementById(\"__NUXT_DATA__\"))?.dataset.ssr === \"true\"\r\n    );\r\n    const vueApp = isSSR ? createSSRApp(RootComponent) : createApp(RootComponent);\r\n    const nuxt = createNuxtApp({ vueApp });\r\n    async function handleVueError(error) {\r\n      await nuxt.callHook(\"app:error\", error);\r\n      nuxt.payload.error ||= createError(error);\r\n    }\r\n    vueApp.config.errorHandler = handleVueError;\r\n    nuxt.hook(\"app:suspense:resolve\", () => {\r\n      if (vueApp.config.errorHandler === handleVueError) {\r\n        vueApp.config.errorHandler = void 0;\r\n      }\r\n    });\r\n    if (spaLoadingTemplateOutside && !isSSR && appSpaLoaderAttrs.id) {\r\n      nuxt.hook(\"app:suspense:resolve\", () => {\r\n        document.getElementById(appSpaLoaderAttrs.id)?.remove();\r\n      });\r\n    }\r\n    try {\r\n      await applyPlugins(nuxt, plugins);\r\n    } catch (err) {\r\n      handleVueError(err);\r\n    }\r\n    try {\r\n      await nuxt.hooks.callHook(\"app:created\", vueApp);\r\n      await nuxt.hooks.callHook(\"app:beforeMount\", vueApp);\r\n      vueApp.mount(vueAppRootContainer);\r\n      await nuxt.hooks.callHook(\"app:mounted\", vueApp);\r\n      await nextTick();\r\n    } catch (err) {\r\n      handleVueError(err);\r\n    }\r\n    return vueApp;\r\n  };\r\n  vueAppPromise = entry().catch((error) => {\r\n    console.error(\"Error while mounting app:\", error);\r\n    throw error;\r\n  });\r\n}\r\nexport default (ssrContext) => entry(ssrContext);\r\n"],"version":3}