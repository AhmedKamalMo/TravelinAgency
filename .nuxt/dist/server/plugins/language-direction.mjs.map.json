{"file":"language-direction.mjs","mappings":"uNAAA,MAAAA,EAAeC,EAAkBC,GAAY,CAE3C,MAAMC,EAAmBC,EAAgB,CACvC,KAAM,mBACN,OAAQ,CACA,KAAA,CAAE,OAAAC,CAAO,EAAIC,EAAQ,EACvB,IAAAC,EAAiBC,EAAmB,IAAI,EACtC,MAAAC,EAAsBD,EAAI,EAAK,EAG/BE,EAAgBC,GAAiB,CACrC,MAAMC,EAAuB,SAAA,gBACvBC,EAAWN,EAAe,MAGhC,GAAIE,EAAoB,MAAO,OAGzB,MAAAK,EAAaD,IAAa,SAAWF,IAAS,QAC9CI,EAAaF,IAAa,SAAWF,IAAS,QAGhD,GAAA,CAACG,GAAc,CAACC,EAAY,CAClBH,EAAA,IAAMD,GAAQ,QAAU,MAAQ,MAC5CC,EAAY,KAAOD,EAAK,MAAM,GAAG,EAAE,CAAC,EACxBC,EAAA,aAAa,cAAeD,CAAI,EAC5CJ,EAAe,MAAQI,EACvB,MAAA,CAGFF,EAAoB,MAAQ,GAGxBK,EACUF,EAAA,aAAa,wBAAyB,YAAY,EACrDG,GACGH,EAAA,aAAa,wBAAyB,YAAY,EAIhEI,EAAS,IAAM,CACDJ,EAAA,IAAMD,IAAS,QAAU,MAAQ,MAC7CC,EAAY,KAAOD,EAAK,MAAM,GAAG,EAAE,CAAC,EACxBC,EAAA,aAAa,cAAeD,CAAI,EAG5CJ,EAAe,MAAQI,EAGvB,WAAW,IAAM,CACfC,EAAY,gBAAgB,uBAAuB,EACnDH,EAAoB,MAAQ,IAC3B,GAAG,CAAA,CACP,CACH,EAGM,OAAAQ,EAAAZ,EAASa,GAAc,CAC3BR,EAAaQ,CAAS,CAAA,EACrB,CAAE,MAAO,OAAQ,EAQb,CAAC,CACV,EAEA,QAAS,CACA,OAAA,IAAA,CACT,CACD,EAGOhB,EAAA,OAAO,UAAU,mBAAoBC,CAAgB,CAC/D,CAAC","names":["language_direction_hy4PtinbuC2Yo2JqVwist73CgbvSXLGTGPurDx1zHB4","defineNuxtPlugin","nuxtApp","DirectionHandler","defineComponent","locale","useI18n","previousLocale","ref","isDirectionChanging","setDirection","lang","htmlElement","prevLang","isLtrToRtl","isRtlToLtr","nextTick","watch","newLocale"],"sources":["../../../../plugins/language-direction.ts"],"sourcesContent":["export default defineNuxtPlugin((nuxtApp) => {\r\n  // Create a component to handle the language direction\r\n  const DirectionHandler = defineComponent({\r\n    name: 'DirectionHandler',\r\n    setup() {\r\n      const { locale } = useI18n()\r\n      let previousLocale = ref<string | null>(null)\r\n      const isDirectionChanging = ref(false)\r\n\r\n      // Enhanced direction change with transitions\r\n      const setDirection = (lang: string) => {\r\n        const htmlElement = document.documentElement\r\n        const prevLang = previousLocale.value\r\n        \r\n        // Skip if already in progress to prevent stacking transitions\r\n        if (isDirectionChanging.value) return\r\n        \r\n        // Detect direction change\r\n        const isLtrToRtl = prevLang === 'en-US' && lang === 'ar-SA'\r\n        const isRtlToLtr = prevLang === 'ar-SA' && lang === 'en-US'\r\n        \r\n        // Only proceed with transition if we're changing direction\r\n        if (!isLtrToRtl && !isRtlToLtr) {\r\n          htmlElement.dir = lang == 'ar-SA' ? 'rtl' : 'ltr'\r\n          htmlElement.lang = lang.split('-')[0]\r\n          htmlElement.setAttribute('data-locale', lang)\r\n          previousLocale.value = lang\r\n          return\r\n        }\r\n        \r\n        isDirectionChanging.value = true\r\n        \r\n        // Set data attributes for transitions\r\n        if (isLtrToRtl) {\r\n          htmlElement.setAttribute('data-direction-change', 'ltr-to-rtl')\r\n        } else if (isRtlToLtr) {\r\n          htmlElement.setAttribute('data-direction-change', 'rtl-to-ltr')\r\n        }\r\n        \r\n        // Apply the direction change - slight delay helps with transition\r\n        nextTick(() => {\r\n          htmlElement.dir = lang === 'ar-SA' ? 'rtl' : 'ltr'\r\n          htmlElement.lang = lang.split('-')[0]\r\n          htmlElement.setAttribute('data-locale', lang)\r\n          \r\n          // Update previous locale for next change\r\n          previousLocale.value = lang\r\n          \r\n          // Remove direction change attribute after transition\r\n          setTimeout(() => {\r\n            htmlElement.removeAttribute('data-direction-change')\r\n            isDirectionChanging.value = false\r\n          }, 600) // Slightly longer than the CSS transition\r\n        })\r\n      }\r\n\r\n      // Watch for language changes\r\n      watch(locale, (newLocale) => {\r\n        setDirection(newLocale)\r\n      }, { flush: 'post' })\r\n\r\n      // Set initial direction on mount\r\n      onMounted(() => {\r\n        previousLocale.value = locale.value\r\n        setDirection(locale.value)\r\n      })\r\n\r\n      return {}\r\n    },\r\n    // Add render function that returns null since this is a utility component with no UI\r\n    render() {\r\n      return null\r\n    }\r\n  })\r\n\r\n  // Register the component\r\n  nuxtApp.vueApp.component('DirectionHandler', DirectionHandler)\r\n})\r\n"],"version":3}