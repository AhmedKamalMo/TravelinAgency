{"file":"plugin.mjs","mappings":"kPAEA,MAAAA,EAAeC,EAAiB,CAC9B,KAAM,aACN,OAAQ,SACN,MAAMC,EAAUC,EAAkB,EAC5BC,EAAUC,EAAY,EAAG,KAC/BC,EAAK,SAAS,OAAO,MAAM,EAC3B,MAAMC,EAAY,CAAE,EACpB,GAAIH,EAAQ,WAAa,SAAU,CACjC,MAAMI,IAAUC,GAAAC,EAAAR,EAAQ,MAAR,YAAAQ,EAAa,UAAb,YAAAD,EAAsB,QAAQ,MAAO,MAAO,GAC5DF,EAAU,KAAKC,GAAWJ,EAAQ,kBAAoB,kBAAkB,GACpEA,EAAQ,gBAAkB,IAAQA,EAAQ,gBAAkB,gBAC9DG,EAAU,KAAKH,EAAQ,kBAAkB,CAEjD,MACMG,EAAU,KAAKH,EAAQ,kBAAkB,EAE3C,eAAeO,EAAiBC,EAAOC,EAAQ,CAC7C,GAAI,CACF,MAAMC,EAAO,MAAM,OAAOP,EAAU,CAAC,EAAI,IAAMM,EAAS,QAAS,CAC/D,MAAO,CACL,MAAOD,EAAM,KAAK,GAAG,CACjC,CACA,CAAS,EACD,GAAI,CAACE,GAAQA,EAAK,SAAWD,GAAU,CAACC,EAAK,MAC3C,MAAM,IAAI,MAAM,eAAiB,KAAK,UAAUA,CAAI,CAAC,EACvD,OAAOA,CACR,OAAQC,EAAG,CACV,eAAQ,MAAM,8BAA+BA,CAAC,EACvC,IACf,CACA,CACIC,EAAe,GAAI,CAAE,UAAAT,EAAW,EAChC,UAAWM,KAAUT,EAAQ,mBAAqB,CAAA,EAC5CS,GACFI,EAAqBN,EAAkBE,CAAM,CAErD,CAGA,CAAC","names":["plugin_MeUvTuoKUi51yb_kBguab6hdcExVXeTtZtTg9TZZBB8","defineNuxtPlugin","configs","useRuntimeConfig","options","useAppConfig","_api","resources","baseURL","_b","_a","customIconLoader","icons","prefix","data","e","addAPIProvider","setCustomIconsLoader"],"sources":["../../../../../../../../node_modules/@nuxt/icon/dist/runtime/plugin.js"],"sourcesContent":["import { addAPIProvider, _api, setCustomIconsLoader } from \"@iconify/vue\";\nimport { defineNuxtPlugin, useAppConfig, useRuntimeConfig } from \"#imports\";\nexport default defineNuxtPlugin({\n  name: \"@nuxt/icon\",\n  setup() {\n    const configs = useRuntimeConfig();\n    const options = useAppConfig().icon;\n    _api.setFetch($fetch.native);\n    const resources = [];\n    if (options.provider === \"server\") {\n      const baseURL = configs.app?.baseURL?.replace(/\\/$/, \"\") ?? \"\";\n      resources.push(baseURL + (options.localApiEndpoint || \"/api/_nuxt_icon\"));\n      if (options.fallbackToApi === true || options.fallbackToApi === \"client-only\") {\n        resources.push(options.iconifyApiEndpoint);\n      }\n    } else {\n      resources.push(options.iconifyApiEndpoint);\n    }\n    async function customIconLoader(icons, prefix) {\n      try {\n        const data = await $fetch(resources[0] + \"/\" + prefix + \".json\", {\n          query: {\n            icons: icons.join(\",\")\n          }\n        });\n        if (!data || data.prefix !== prefix || !data.icons)\n          throw new Error(\"Invalid data\" + JSON.stringify(data));\n        return data;\n      } catch (e) {\n        console.error(\"Failed to load custom icons\", e);\n        return null;\n      }\n    }\n    addAPIProvider(\"\", { resources });\n    for (const prefix of options.customCollections || []) {\n      if (prefix)\n        setCustomIconsLoader(customIconLoader, prefix);\n    }\n  }\n  // For type portability\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n});\n"],"version":3}