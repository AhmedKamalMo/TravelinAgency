{"version":3,"file":"meta.mjs","sources":["../../../../../../../../../node_modules/@nuxt/image/dist/runtime/utils/meta.js"],"sourcesContent":["export async function imageMeta(_ctx, url) {\n  const meta = await _imageMeta(url).catch((err) => {\n    console.error(\"Failed to get image meta for \" + url, err + \"\");\n    return {\n      width: 0,\n      height: 0,\n      ratio: 0\n    };\n  });\n  return meta;\n}\nasync function _imageMeta(url) {\n  if (import.meta.server) {\n    const imageMeta2 = await import(\"image-meta\").then((r) => r.imageMeta);\n    const data = await fetch(url).then((res) => res.buffer());\n    const metadata = imageMeta2(data);\n    if (!metadata) {\n      throw new Error(`No metadata could be extracted from the image \\`${url}\\`.`);\n    }\n    const { width, height } = metadata;\n    const meta = {\n      width,\n      height,\n      ratio: width && height ? width / height : void 0\n    };\n    return meta;\n  }\n  if (typeof Image === \"undefined\") {\n    throw new TypeError(\"Image not supported\");\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      const meta = {\n        width: img.width,\n        height: img.height,\n        ratio: img.width / img.height\n      };\n      resolve(meta);\n    };\n    img.onerror = (err) => reject(err);\n    img.src = url;\n  });\n}\n"],"names":["imageMeta","_ctx","url","_imageMeta","err","imageMeta2","r","data","res","metadata","width","height"],"mappings":"AAAO,eAAeA,EAAUC,EAAMC,EAAK,CASzC,OARa,MAAMC,EAAWD,CAAG,EAAE,MAAOE,IACxC,QAAQ,MAAM,gCAAkCF,EAAKE,EAAM,EAAE,EACtD,CACL,MAAO,EACP,OAAQ,EACR,MAAO,CACR,EACF,CAEH,CACA,eAAeD,EAAWD,EAAK,CACL,CACtB,MAAMG,EAAa,KAAM,QAAO,YAAY,EAAE,KAAMC,GAAMA,EAAE,SAAS,EAC/DC,EAAO,MAAM,MAAML,CAAG,EAAE,KAAMM,GAAQA,EAAI,QAAQ,EAClDC,EAAWJ,EAAWE,CAAI,EAChC,GAAI,CAACE,EACH,MAAM,IAAI,MAAM,mDAAmDP,CAAG,KAAK,EAE7E,KAAM,CAAE,MAAAQ,EAAO,OAAAC,CAAM,EAAKF,EAM1B,MALa,CACX,MAAAC,EACA,OAAAC,EACA,MAAOD,GAASC,EAASD,EAAQC,EAAS,MAC3C,CAEL,CAiBA","x_google_ignoreList":[0]}