{"file":"NuxtImg.vue2.mjs","mappings":"2nBAsCA,MAAMA,EAAQC,EAERC,EAAQC,EAAS,EAOjBC,EAAW,GAEXC,EAAOC,EAAS,EAEhBC,EAAQC,EAAaR,CAAK,EAE1BS,EAAoBC,EAAI,EAAK,EAC7BC,EAAQD,EAAsB,EAQ9BE,EAAQC,EAAS,IAAMR,EAAK,SAASL,EAAM,IAAM,CACrD,GAAGO,EAAM,QAAQ,MACjB,MAAOP,EAAM,MACb,UAAWA,EAAM,UACjB,UAAW,CACT,GAAGO,EAAM,UAAU,MACnB,MAAOO,EAAUd,EAAM,KAAK,EAC5B,OAAQc,EAAUd,EAAM,MAAM,CAAA,CAChC,CACD,CAAC,EAEIe,EAAWF,EAAS,IAAM,CAC9B,MAAMX,EAAgB,CAAE,GAAGK,EAAM,MAAM,MAAO,gBAAiB,EAAG,EAElE,OAAI,CAACP,EAAM,aAAeS,EAAkB,SAC1CP,EAAM,MAAQU,EAAM,MAAM,MAC1BV,EAAM,OAASU,EAAM,MAAM,QAGtBV,CAAA,CACR,EAEKc,EAAcH,EAAS,IAAM,CACjC,IAAIG,EAAchB,EAAM,YAMpB,GAJAgB,IAAgB,KAClBA,EAAc,IAGZ,CAACA,GAAeP,EAAkB,MAC7B,MAAA,GAGL,GAAA,OAAOO,GAAgB,SAClBA,OAAAA,EAGT,MAAMC,EAAQ,MAAM,QAAQD,CAAW,EACnCA,EACC,OAAOA,GAAgB,SAAW,CAACA,EAAaA,CAAW,EAAI,CAAC,GAAI,EAAE,EAEpE,OAAAX,EAAKL,EAAM,IAAM,CACtB,GAAGO,EAAM,UAAU,MACnB,MAAOU,EAAK,CAAC,EACb,OAAQA,EAAK,CAAC,EACd,QAASA,EAAK,CAAC,GAAK,GACpB,KAAMA,EAAK,CAAC,GAAK,CAAA,EAChBV,EAAM,QAAQ,KAAK,CAAA,CACvB,EAEKW,EAAUL,EAAS,IACvBb,EAAM,MACFY,EAAM,MAAM,IACZP,EAAKL,EAAM,IAAMO,EAAM,UAAU,MAAOA,EAAM,QAAQ,KAAK,CACjE,EAEMY,EAAMN,EAAS,IAAMG,EAAY,MAAQA,EAAY,MAAQE,EAAQ,KAAK,EAE5E,GAAsBlB,EAAM,QAAS,CACjC,MAAAoB,EAAe,OAAO,OAAOR,EAAM,KAAK,EAAE,SAAWS,CAAC,EAEpDC,EAAA,CACN,KAAM,CAAC,CACL,IAAK,UACL,GAAI,QACJ,MAAOtB,EAAM,MACb,GAAKoB,EAED,CACE,KAAMR,EAAM,MAAM,IAClB,WAAYA,EAAM,MAAM,MACxB,YAAaA,EAAM,MAAM,MAC3B,EALA,CAAE,KAAMO,EAAI,OAMhB,GAAI,OAAOnB,EAAM,SAAY,WAAaA,EAAM,QAAQ,cACpD,CAAE,cAAeA,EAAM,QAAQ,aAAA,EAC/B,CAAA,CACL,CAAA,CAAA,CACF,CAAA,CAIC,OAAsB,YAAY,WACpCuB,EAAsBJ,EAAI,MAAOP,EAAM,MAAM,MAAM,EAGrCY,EAAW,EAEC","names":["props","__props","attrs","useAttrs","isServer","$img","useImage","_base","useBaseImage","placeholderLoaded","ref","imgEl","sizes","computed","parseSize","imgAttrs","placeholder","size","mainSrc","src","isResponsive","v","useHead","prerenderStaticImages","useNuxtApp"],"sources":["../../../../../../../../../node_modules/@nuxt/image/dist/runtime/components/NuxtImg.vue"],"sourcesContent":["<template>\n  <img\n    v-if=\"!custom\"\n    ref=\"imgEl\"\n    :class=\"placeholder && !placeholderLoaded ? placeholderClass : undefined\"\n    v-bind=\"{\n      ...isServer ? { onerror: 'this.setAttribute(\\'data-error\\', 1)' } : {},\n      ...imgAttrs,\n      ...attrs,\n    }\"\n    :src=\"src\"\n  >\n  <slot\n    v-else\n    v-bind=\"{\n      ...isServer ? { onerror: 'this.setAttribute(\\'data-error\\', 1)' } : {},\n      imgAttrs: {\n        ...imgAttrs,\n        ...attrs,\n      },\n      isLoaded: placeholderLoaded,\n      src,\n    }\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref, useAttrs } from 'vue'\n\nimport { useImage } from '../composables'\nimport { parseSize } from '../utils'\nimport { prerenderStaticImages } from '../utils/prerender'\nimport { markFeatureUsage } from '../utils/performance'\nimport { imgProps, useBaseImage } from './_base'\n\nimport { useHead } from '#imports'\nimport { useNuxtApp } from '#app/nuxt'\n\nconst props = defineProps(imgProps)\n\nconst attrs = useAttrs()\n\nconst emit = defineEmits<{\n  (event: 'load', payload: Event): unknown\n  (event: 'error', payload: string | Event): unknown\n}>()\n\nconst isServer = import.meta.server\n\nconst $img = useImage()\n\nconst _base = useBaseImage(props)\n\nconst placeholderLoaded = ref(false)\nconst imgEl = ref<HTMLImageElement>()\n\ntype AttrsT = typeof _base.attrs.value & {\n  'sizes'?: string\n  'srcset'?: string\n  'data-nuxt-img'?: string\n}\n\nconst sizes = computed(() => $img.getSizes(props.src!, {\n  ..._base.options.value,\n  sizes: props.sizes,\n  densities: props.densities,\n  modifiers: {\n    ..._base.modifiers.value,\n    width: parseSize(props.width),\n    height: parseSize(props.height),\n  },\n}))\n\nconst imgAttrs = computed(() => {\n  const attrs: AttrsT = { ..._base.attrs.value, 'data-nuxt-img': '' }\n\n  if (!props.placeholder || placeholderLoaded.value) {\n    attrs.sizes = sizes.value.sizes\n    attrs.srcset = sizes.value.srcset\n  }\n\n  return attrs\n})\n\nconst placeholder = computed(() => {\n  let placeholder = props.placeholder\n\n  if (placeholder === '') {\n    placeholder = true\n  }\n\n  if (!placeholder || placeholderLoaded.value) {\n    return false\n  }\n\n  if (typeof placeholder === 'string') {\n    return placeholder\n  }\n\n  const size = (Array.isArray(placeholder)\n    ? placeholder\n    : (typeof placeholder === 'number' ? [placeholder, placeholder] : [10, 10])) as [w: number, h: number, q: number, b: number]\n\n  return $img(props.src!, {\n    ..._base.modifiers.value,\n    width: size[0],\n    height: size[1],\n    quality: size[2] || 50,\n    blur: size[3] || 3,\n  }, _base.options.value)\n})\n\nconst mainSrc = computed(() =>\n  props.sizes\n    ? sizes.value.src\n    : $img(props.src!, _base.modifiers.value, _base.options.value),\n)\n\nconst src = computed(() => placeholder.value ? placeholder.value : mainSrc.value)\n\nif (import.meta.server && props.preload) {\n  const isResponsive = Object.values(sizes.value).every(v => v)\n\n  useHead({\n    link: [{\n      rel: 'preload',\n      as: 'image',\n      nonce: props.nonce,\n      ...(!isResponsive\n        ? { href: src.value }\n        : {\n            href: sizes.value.src,\n            imagesizes: sizes.value.sizes,\n            imagesrcset: sizes.value.srcset,\n          }),\n      ...(typeof props.preload !== 'boolean' && props.preload.fetchPriority\n        ? { fetchpriority: props.preload.fetchPriority }\n        : {}),\n    }],\n  })\n}\n\n// Prerender static images\nif (import.meta.server && import.meta.prerender) {\n  prerenderStaticImages(src.value, sizes.value.srcset)\n}\n\nconst nuxtApp = useNuxtApp()\n\nconst initialLoad = nuxtApp.isHydrating\n\nonMounted(() => {\n  if (placeholder.value || props.custom) {\n    const img = new Image()\n\n    if (mainSrc.value) {\n      img.src = mainSrc.value\n    }\n\n    if (props.sizes) {\n      img.sizes = sizes.value.sizes || ''\n      img.srcset = sizes.value.srcset\n    }\n\n    img.onload = (event) => {\n      placeholderLoaded.value = true\n      emit('load', event)\n    }\n\n    img.onerror = (event) => {\n      emit('error', event)\n    }\n\n    markFeatureUsage('nuxt-image')\n\n    return\n  }\n\n  if (!imgEl.value) {\n    return\n  }\n\n  if (imgEl.value.complete && initialLoad) {\n    if (imgEl.value.getAttribute('data-error')) {\n      emit('error', new Event('error'))\n    }\n    else {\n      emit('load', new Event('load'))\n    }\n  }\n\n  imgEl.value.onload = (event) => {\n    emit('load', event)\n  }\n\n  imgEl.value.onerror = (event) => {\n    emit('error', event)\n  }\n})\n</script>\n\n<script lang=\"ts\">\nexport { imgProps } from './_base'\n</script>\n"],"version":3}