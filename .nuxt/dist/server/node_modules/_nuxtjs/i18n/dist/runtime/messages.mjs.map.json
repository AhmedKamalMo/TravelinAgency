{"file":"messages.mjs","mappings":"gIACA,MAAMA,MAAoC,IACpB,eAAAC,EAAmBC,EAAgBC,EAAM,CAC7D,MAAMC,EAAiB,CAAE,SAAU,EAAG,EACtC,UAAWC,KAAcH,EAAgB,CACvC,KAAM,CAAE,QAASI,CAAS,EAAI,MAAMD,EAAW,EACzCE,EAAWC,EAAWF,CAAQ,EAAI,MAAMH,EAAK,eAAe,SAAY,MAAMG,EAAU,CAAA,EAAIA,EAClGG,EAASF,EAAUH,CAAc,CAAA,CAE5B,OAAAA,CACT,CACgB,SAAAM,EAAwBC,EAAUC,EAAS,CACzD,IAAIC,EAAkB,CAAC,EACnB,GAAAC,EAAQH,CAAQ,EACAE,EAAAF,UACTI,EAASJ,CAAQ,EAAG,CAC7B,MAAMK,EAAU,CAAC,GAAGJ,EAAS,SAAS,EACtC,UAAWK,KAAUD,EACfL,EAASM,CAAM,IACCJ,EAAA,CAAC,GAAGA,EAAiB,GAAGF,EAASM,CAAM,EAAE,OAAO,OAAO,CAAC,EAE9E,MACSC,EAASP,CAAQ,GAAKC,EAAQ,MAAOK,GAAWA,IAAWN,CAAQ,GAC5EE,EAAgB,KAAKF,CAAQ,EAExB,OAAAE,CACT,CACsB,eAAAM,EAAoBC,EAAUC,EAAeC,EAAS,CAC1E,KAAM,CAAE,cAAAC,EAAe,cAAAC,EAAe,YAAAC,EAAa,eAAAC,EAAgB,KAAAC,GAASL,EAC5E,GAAIK,GAAQD,EAAgB,CAC1B,MAAMb,EAAkBH,EAAwBgB,EAAgB,CAACH,EAAeC,CAAa,CAAC,EACxF,MAAA,QAAQ,IAAIX,EAAgB,IAAKI,GAAWW,EAAyBX,EAAQI,EAAeD,CAAQ,CAAC,CAAC,CAAA,CAE9G,MAAMR,EAAUe,EAAO,CAAC,GAAwB,IAAA,IAAA,EAAO,IAAIJ,CAAa,EAAE,IAAIC,CAAa,CAAC,EAAIC,EAC1F,aAAA,QAAQ,IAAIb,EAAQ,IAAKK,GAAWW,EAAyBX,EAAQI,EAAeD,CAAQ,CAAC,CAAC,EAC7FA,CACT,CACA,eAAeS,EAAYZ,EAAQ,CAAE,IAAAa,EAAK,KAAAC,GAAQ,CAChD,IAAIC,EAAU,KACV,GAAA,CAEI,MAAAC,EAAS,MAAMF,IAAO,KAAMG,GAAMA,EAAE,SAAWA,CAAC,EAClD1B,EAAWyB,CAAM,EACTD,EAAA,MAAMC,EAAOhB,CAAM,GAGnBe,EAAAC,EACND,GAAW,MAAQhC,GACPA,EAAA,IAAI8B,EAAKE,CAAO,SAI3BG,EAAG,CACF,QAAA,MAAM,0BAA4BA,EAAE,OAAO,CAAA,CAE9C,OAAAH,CACT,CACsB,eAAAI,EAAWnB,EAAQI,EAAegB,EAAQ,CACxD,MAAAC,EAAUjB,EAAcJ,CAAM,EACpC,GAAIqB,GAAW,KAAM,CACX,QAAA,KAAK,4CAA8CrB,CAAM,EACjE,MAAA,CAEF,MAAMsB,EAAgB,CAAC,EACvB,UAAWC,KAAUF,EAAS,CAC5B,IAAIN,EAAU,KACVhC,GAAiBA,EAAc,IAAIwC,EAAO,GAAG,GAAKA,EAAO,MAEjDR,EAAAhC,EAAc,IAAIwC,EAAO,GAAG,EAI5BR,EAAA,MAAMH,EAAYZ,EAAQuB,CAAM,EAExCR,GAAW,MACbvB,EAASuB,EAASO,CAAa,CACjC,CAEFF,EAAOpB,EAAQsB,CAAa,CAC9B,CACsB,eAAAX,EAAyBX,EAAQI,EAAeD,EAAU,CAMxE,MAAAgB,EAAWnB,EAAQI,EALV,CAACoB,EAAST,IAAY,CACnC,MAAMU,EAAOtB,EAASqB,CAAO,GAAK,CAAC,EACnChC,EAASuB,EAASU,CAAI,EACtBtB,EAASqB,CAAO,EAAIC,CACtB,CAC8C,CAChD","names":["cacheMessages","loadVueI18nOptions","vueI18nConfigs","nuxt","vueI18nOptions","configFile","resolver","resolved","isFunction","deepCopy","makeFallbackLocaleCodes","fallback","locales","fallbackLocales","isArray","isObject","targets","locale","isString","loadInitialMessages","messages","localeLoaders","options","defaultLocale","initialLocale","localeCodes","fallbackLocale","lazy","loadAndSetLocaleMessages","loadMessage","key","load","message","getter","r","e","loadLocale","setter","loaders","targetMessage","loader","locale2","base"],"sources":["../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/messages.js"],"sourcesContent":["import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = isFunction(resolver) ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  let message = null;\n  try {\n    __DEBUG__ && console.log(\"loadMessage: (locale) -\", locale);\n    const getter = await load().then((r) => r.default || r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n      __DEBUG__ && console.log(\"loadMessage: dynamic load\", message);\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n      __DEBUG__ && console.log(\"loadMessage: load\", message);\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      __DEBUG__ && console.log(loader.key + \" is already loaded\");\n      message = cacheMessages.get(loader.key);\n    } else {\n      __DEBUG__ && !loader.cache && console.log(loader.key + \" bypassing cache!\");\n      __DEBUG__ && console.log(loader.key + \" is loading ...\");\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n"],"version":3}