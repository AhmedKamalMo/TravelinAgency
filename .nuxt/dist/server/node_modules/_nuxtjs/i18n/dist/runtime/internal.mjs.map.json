{"file":"internal.mjs","mappings":"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","names":["formatMessage","message","NUXT_I18N_MODULE_ID","callVueI18nInterfaces","i18n","name","args","target","getI18nTarget","obj","method","getVueI18nPropertyValue","unref","defineGetter","key","val","wrapComposable","fn","common","initCommonComposableOptions","parseAcceptLanguage","input","tag","getBrowserLocale","ret","accept","useRequestHeaders","findBrowserLocale","normalizedLocales","getI18nCookie","detect","runtimeDetectBrowserLanguage","cookieKey","DEFAULT_COOKIE_KEY","date","cookieOptions","useNuxtCookie","getLocaleCookie","cookieRef","defaultLocale","localeCode","localeCodes","setLocaleCookie","locale","DetectFailure","DetectFailure2","DefaultDetectBrowserLanguageFromResult","detectBrowserLanguage","route","detectLocaleContext","createLogger","_detect","strategy","useRuntimeConfig","ssg","callType","firstAccess","localeCookie","redirectOn","alwaysRedirect","useCookie","fallbackLocale","path","isString","getLocalesRegex","from","cookieMatch","browserMatch","matchedLocale","resolved","getHost","host","header","detectedHost","isArray","getLocaleDomain","locales","matchingLocale","matchingLocales","domain","hasProtocol","routePath","isObject","matches","l","getDomainFromLocale","runtimeConfig","nuxtApp","useNuxtApp","config","lang","_b","_a","_e","_d","_c","v","_f","protocol","req","useRequestEvent","isHTTPS","opts"],"sources":["../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/internal.js"],"sourcesContent":["import { isArray, isString, isObject } from \"@intlify/shared\";\nimport { hasProtocol } from \"ufo\";\nimport isHTTPS from \"is-https\";\nimport {\n  useRequestHeaders,\n  useRequestEvent,\n  useCookie as useNuxtCookie,\n  useRuntimeConfig,\n  useNuxtApp,\n  unref\n} from \"#imports\";\nimport { NUXT_I18N_MODULE_ID, DEFAULT_COOKIE_KEY, isSSG, localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { findBrowserLocale, getI18nTarget, getLocalesRegex } from \"./routing/utils.js\";\nimport { createLogger, initCommonComposableOptions } from \"./utils.js\";\nexport function formatMessage(message) {\n  return NUXT_I18N_MODULE_ID + \" \" + message;\n}\nexport function callVueI18nInterfaces(i18n, name, ...args) {\n  const target = getI18nTarget(i18n);\n  const [obj, method] = [target, target[name]];\n  return Reflect.apply(method, obj, [...args]);\n}\nexport function getVueI18nPropertyValue(i18n, name) {\n  const target = getI18nTarget(i18n);\n  return unref(target[name]);\n}\nexport function defineGetter(obj, key, val) {\n  Object.defineProperty(obj, key, { get: () => val });\n}\nexport function wrapComposable(fn, common = initCommonComposableOptions()) {\n  return (...args) => fn(common, ...args);\n}\nexport function parseAcceptLanguage(input) {\n  return input.split(\",\").map((tag) => tag.split(\";\")[0]);\n}\nexport function getBrowserLocale() {\n  let ret;\n  if (import.meta.client) {\n    if (navigator.languages) {\n      ret = findBrowserLocale(normalizedLocales, navigator.languages);\n      __DEBUG__ && console.log(\"getBrowserLocale (navigator.languages, ret) -\", navigator.languages, ret);\n    }\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"accept-language\"]);\n    __DEBUG__ && console.log(\"getBrowserLocale accept-language\", header);\n    const accept = header[\"accept-language\"];\n    if (accept) {\n      ret = findBrowserLocale(normalizedLocales, parseAcceptLanguage(accept));\n      __DEBUG__ && console.log(\"getBrowserLocale ret\", ret);\n    }\n  }\n  return ret;\n}\nexport function getI18nCookie() {\n  const detect = runtimeDetectBrowserLanguage();\n  const cookieKey = detect && detect.cookieKey || DEFAULT_COOKIE_KEY;\n  const date = /* @__PURE__ */ new Date();\n  const cookieOptions = {\n    expires: new Date(date.setDate(date.getDate() + 365)),\n    path: \"/\",\n    sameSite: detect && detect.cookieCrossOrigin ? \"none\" : \"lax\",\n    secure: detect && detect.cookieCrossOrigin || detect && detect.cookieSecure\n  };\n  if (detect && detect.cookieDomain) {\n    cookieOptions.domain = detect.cookieDomain;\n  }\n  return useNuxtCookie(cookieKey, cookieOptions);\n}\nexport function getLocaleCookie(cookieRef, detect, defaultLocale) {\n  __DEBUG__ && console.log(\"getLocaleCookie\", {\n    useCookie: detect && detect.useCookie,\n    cookieKey: detect && detect.cookieKey,\n    localeCodes\n  });\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  const localeCode = cookieRef.value ?? void 0;\n  const env = import.meta.client ? \"client\" : \"server\";\n  if (localeCode == null) {\n    __DEBUG__ && console.log(`getLocaleCookie (${env}) - none`);\n    return;\n  }\n  if (localeCodes.includes(localeCode)) {\n    __DEBUG__ && console.log(`getLocaleCookie (${env}) - locale from cookie: `, localeCode);\n    return localeCode;\n  }\n  if (defaultLocale) {\n    __DEBUG__ && console.log(\n      `getLocaleCookie (${env}) - unknown locale cookie (${localeCode}), setting to defaultLocale (${defaultLocale})`\n    );\n    cookieRef.value = defaultLocale;\n    return defaultLocale;\n  }\n  __DEBUG__ && console.log(`getLocaleCookie (${env}) - unknown locale cookie (${localeCode}), unsetting cookie`);\n  cookieRef.value = void 0;\n  return;\n}\nexport function setLocaleCookie(cookieRef, locale, detect) {\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  cookieRef.value = locale;\n}\nexport var DetectFailure = /* @__PURE__ */ ((DetectFailure2) => {\n  DetectFailure2[\"NOT_FOUND\"] = \"not_found_match\";\n  DetectFailure2[\"FIRST_ACCESS\"] = \"first_access_only\";\n  DetectFailure2[\"NO_REDIRECT_ROOT\"] = \"not_redirect_on_root\";\n  DetectFailure2[\"NO_REDIRECT_NO_PREFIX\"] = \"not_redirect_on_no_prefix\";\n  DetectFailure2[\"SSG_IGNORE\"] = \"detect_ignore_on_ssg\";\n  return DetectFailure2;\n})(DetectFailure || {});\nvar DetectFrom = /* @__PURE__ */ ((DetectFrom2) => {\n  DetectFrom2[\"COOKIE\"] = \"cookie\";\n  DetectFrom2[\"NAVIGATOR_HEADER\"] = \"navigator_or_header\";\n  DetectFrom2[\"FALLBACK\"] = \"fallback\";\n  return DetectFrom2;\n})(DetectFrom || {});\nexport const DefaultDetectBrowserLanguageFromResult = { locale: \"\" };\nexport function detectBrowserLanguage(route, detectLocaleContext, locale = \"\") {\n  const logger = createLogger(\"detectBrowserLanguage\");\n  const _detect = runtimeDetectBrowserLanguage();\n  if (!_detect) {\n    return DefaultDetectBrowserLanguageFromResult;\n  }\n  const { strategy } = useRuntimeConfig().public.i18n;\n  const { ssg, callType, firstAccess, localeCookie } = detectLocaleContext;\n  __DEBUG__ && logger.log({ ssg, callType, firstAccess });\n  if (isSSG && strategy === \"no_prefix\" && (import.meta.server || ssg === \"ssg_ignore\")) {\n    return { locale: \"\", reason: \"detect_ignore_on_ssg\" /* SSG_IGNORE */ };\n  }\n  if (!firstAccess) {\n    return { locale: strategy === \"no_prefix\" ? locale : \"\", reason: \"first_access_only\" /* FIRST_ACCESS */ };\n  }\n  const { redirectOn, alwaysRedirect, useCookie, fallbackLocale } = _detect;\n  const path = isString(route) ? route : route.path;\n  __DEBUG__ && logger.log({ locale, path, strategy, alwaysRedirect, redirectOn });\n  if (strategy !== \"no_prefix\") {\n    if (redirectOn === \"root\" && path !== \"/\") {\n      __DEBUG__ && logger.log(\"not root\", { path });\n      return { locale: \"\", reason: \"not_redirect_on_root\" /* NO_REDIRECT_ROOT */ };\n    }\n    __DEBUG__ && redirectOn === \"no prefix\" && logger.log(\"no prefix -\", { path });\n    if (redirectOn === \"no prefix\" && !alwaysRedirect && path.match(getLocalesRegex(localeCodes))) {\n      return { locale: \"\", reason: \"not_redirect_on_no_prefix\" /* NO_REDIRECT_NO_PREFIX */ };\n    }\n  }\n  let from;\n  const cookieMatch = useCookie && localeCookie || void 0;\n  if (useCookie) {\n    from = \"cookie\" /* COOKIE */;\n  }\n  const browserMatch = getBrowserLocale();\n  if (!cookieMatch) {\n    from = \"navigator_or_header\" /* NAVIGATOR_HEADER */;\n  }\n  const matchedLocale = cookieMatch || browserMatch;\n  const resolved = matchedLocale || fallbackLocale || \"\";\n  if (!matchedLocale && fallbackLocale) {\n    from = \"fallback\" /* FALLBACK */;\n  }\n  __DEBUG__ && logger.log({ locale: resolved, cookieMatch, browserMatch, from });\n  return { locale: resolved, from };\n}\nexport function getHost() {\n  let host;\n  if (import.meta.client) {\n    host = window.location.host;\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"x-forwarded-host\", \"host\"]);\n    let detectedHost;\n    if (\"x-forwarded-host\" in header) {\n      detectedHost = header[\"x-forwarded-host\"];\n    } else if (\"host\" in header) {\n      detectedHost = header[\"host\"];\n    }\n    host = isArray(detectedHost) ? detectedHost[0] : detectedHost;\n  }\n  return host;\n}\nexport function getLocaleDomain(locales, strategy, route) {\n  let host = getHost() || \"\";\n  if (host) {\n    __DEBUG__ && console.log(\n      `MultiDomainsMultiLocales: locating domain for host: `,\n      host,\n      strategy,\n      isObject(route) ? route.path : route\n    );\n    let matchingLocale;\n    const matchingLocales = locales.filter((locale) => {\n      if (locale && locale.domain) {\n        let domain = locale.domain;\n        if (hasProtocol(locale.domain)) {\n          domain = locale.domain.replace(/(http|https):\\/\\//, \"\");\n        }\n        return domain === host;\n      } else if (Array.isArray(locale?.domains)) {\n        return locale.domains.includes(host);\n      }\n      return false;\n    });\n    if (matchingLocales.length === 1) {\n      matchingLocale = matchingLocales[0];\n      __DEBUG__ && console.log(`MultiDomainsMultiLocales: found only one matching domain: `, host, matchingLocales[0].code);\n    } else if (matchingLocales.length > 1) {\n      if (strategy === \"no_prefix\") {\n        console.warn(\n          formatMessage(\n            \"Multiple matching domains found! This is not supported for no_prefix strategy in combination with differentDomains!\"\n          )\n        );\n        matchingLocale = matchingLocales[0];\n      } else {\n        if (route) {\n          const routePath = isObject(route) ? route.path : isString(route) ? route : \"\";\n          __DEBUG__ && console.log(`MultiDomainsMultiLocales: Check in matched domain for locale match in path: `, routePath, host);\n          if (routePath && routePath !== \"\") {\n            const matches = routePath.match(getLocalesRegex(matchingLocales.map((l) => l.code)));\n            if (matches && matches.length > 1) {\n              matchingLocale = matchingLocales.find((l) => l.code === matches[1]);\n              __DEBUG__ && console.log(\n                `MultiDomainsMultiLocales: Found matching locale from path. MatchingLocale is now`,\n                matchingLocale?.code\n              );\n            }\n          }\n        }\n        if (!matchingLocale) {\n          matchingLocale = matchingLocales.find(\n            (l) => Array.isArray(l.defaultForDomains) ? l.defaultForDomains.includes(host) : l.domainDefault\n          );\n          __DEBUG__ && console.log(\n            `MultiDomainsMultiLocales: matching locale not found - trying to get default for this domain. MatchingLocale is now`,\n            matchingLocale?.code\n          );\n        }\n      }\n    }\n    if (matchingLocale) {\n      return matchingLocale.code;\n    } else {\n      host = \"\";\n    }\n  }\n  return host;\n}\nexport function getDomainFromLocale(localeCode) {\n  const runtimeConfig = useRuntimeConfig();\n  const nuxtApp = useNuxtApp();\n  const host = getHost();\n  const config = runtimeConfig.public.i18n;\n  const lang = normalizedLocales.find((locale) => locale.code === localeCode);\n  const domain = config?.locales?.[localeCode]?.domain || lang?.domain || config?.locales?.[localeCode]?.domains?.find((v) => v === host) || lang?.domains?.find((v) => v === host);\n  if (domain) {\n    if (hasProtocol(domain, { strict: true })) {\n      return domain;\n    }\n    let protocol;\n    if (import.meta.server) {\n      const {\n        node: { req }\n      } = useRequestEvent(nuxtApp);\n      protocol = req && isHTTPS(req) ? \"https:\" : \"http:\";\n    } else {\n      protocol = new URL(window.location.origin).protocol;\n    }\n    return protocol + \"//\" + domain;\n  }\n  console.warn(formatMessage(\"Could not find domain name for locale \" + localeCode));\n}\nexport const runtimeDetectBrowserLanguage = (opts = useRuntimeConfig().public.i18n) => {\n  if (opts?.detectBrowserLanguage === false) return false;\n  return opts?.detectBrowserLanguage;\n};\n"],"version":3}