{"version":3,"file":"i18n.mjs","sources":["../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/plugins/i18n.js"],"sourcesContent":["import { computed } from \"vue\";\nimport { createI18n } from \"vue-i18n\";\nimport {\n  defineNuxtPlugin,\n  useRoute,\n  addRouteMiddleware,\n  defineNuxtRouteMiddleware,\n  useNuxtApp,\n  useRouter\n} from \"#imports\";\nimport {\n  localeCodes,\n  vueI18nConfigs,\n  isSSG,\n  localeLoaders,\n  parallelPlugin,\n  normalizedLocales\n} from \"#build/i18n.options.mjs\";\nimport { loadVueI18nOptions, loadInitialMessages, loadLocale } from \"../messages.js\";\nimport {\n  loadAndSetLocale,\n  detectLocale,\n  detectRedirect,\n  navigate,\n  injectNuxtHelpers,\n  extendBaseUrl,\n  _setLocale,\n  mergeLocaleMessage\n} from \"../utils.js\";\nimport {\n  getBrowserLocale as _getBrowserLocale,\n  getLocaleCookie as _getLocaleCookie,\n  setLocaleCookie as _setLocaleCookie,\n  detectBrowserLanguage,\n  getI18nCookie,\n  runtimeDetectBrowserLanguage,\n  getHost\n} from \"../internal.js\";\nimport { getComposer, getLocale, setLocale } from \"../routing/utils.js\";\nimport { extendI18n, createLocaleFromRouteGetter } from \"../routing/extends/index.js\";\nexport default defineNuxtPlugin({\n  name: \"i18n:plugin\",\n  parallel: parallelPlugin,\n  async setup(nuxt) {\n    const route = useRoute();\n    const { vueApp: app } = nuxt;\n    const nuxtContext = nuxt;\n    const host = getHost();\n    const { configLocales, defaultLocale, multiDomainLocales, strategy } = nuxtContext.$config.public.i18n;\n    const hasDefaultForDomains = configLocales.some(\n      (l) => typeof l !== \"string\" && Array.isArray(l.defaultForDomains)\n    );\n    let defaultLocaleDomain;\n    if (defaultLocale) {\n      defaultLocaleDomain = defaultLocale;\n    } else if (hasDefaultForDomains) {\n      const findDefaultLocale = configLocales.find(\n        (l) => typeof l === \"string\" || !Array.isArray(l.defaultForDomains) ? false : l.defaultForDomains.includes(host ?? \"\")\n      );\n      defaultLocaleDomain = findDefaultLocale?.code ?? \"\";\n    } else {\n      defaultLocaleDomain = \"\";\n    }\n    if (multiDomainLocales && (strategy === \"prefix_except_default\" || strategy === \"prefix_and_default\")) {\n      const router = useRouter();\n      router.getRoutes().forEach((route2) => {\n        if (route2.name?.toString().includes(\"___default\")) {\n          const routeNameLocale = route2.name.toString().split(\"___\")[1];\n          if (routeNameLocale !== defaultLocaleDomain) {\n            router.removeRoute(route2.name);\n          } else {\n            const newRouteName = route2.name.toString().replace(\"___default\", \"\");\n            route2.name = newRouteName;\n          }\n        }\n      });\n    }\n    const runtimeI18n = { ...nuxtContext.$config.public.i18n, defaultLocale: defaultLocaleDomain };\n    runtimeI18n.baseUrl = extendBaseUrl();\n    const _detectBrowserLanguage = runtimeDetectBrowserLanguage();\n    __DEBUG__ && console.log(\"isSSG\", isSSG);\n    __DEBUG__ && console.log(\"useCookie on setup\", _detectBrowserLanguage && _detectBrowserLanguage.useCookie);\n    __DEBUG__ && console.log(\"defaultLocale on setup\", runtimeI18n.defaultLocale);\n    const vueI18nOptions = await loadVueI18nOptions(vueI18nConfigs, useNuxtApp());\n    vueI18nOptions.messages = vueI18nOptions.messages || {};\n    vueI18nOptions.fallbackLocale = vueI18nOptions.fallbackLocale ?? false;\n    const getLocaleFromRoute = createLocaleFromRouteGetter();\n    const getDefaultLocale = (locale) => locale || vueI18nOptions.locale || \"en-US\";\n    const localeCookie = getI18nCookie();\n    let initialLocale = detectLocale(\n      route,\n      getLocaleFromRoute,\n      getDefaultLocale(runtimeI18n.defaultLocale),\n      {\n        ssg: isSSG && runtimeI18n.strategy === \"no_prefix\" ? \"ssg_ignore\" : \"normal\",\n        callType: \"setup\",\n        firstAccess: true,\n        localeCookie: _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale)\n      },\n      runtimeI18n\n    );\n    __DEBUG__ && console.log(\"first detect initial locale\", initialLocale);\n    vueI18nOptions.messages = await loadInitialMessages(vueI18nOptions.messages, localeLoaders, {\n      localeCodes,\n      initialLocale,\n      lazy: runtimeI18n.lazy,\n      defaultLocale: runtimeI18n.defaultLocale,\n      fallbackLocale: vueI18nOptions.fallbackLocale\n    });\n    initialLocale = getDefaultLocale(initialLocale);\n    __DEBUG__ && console.log(\"final initial locale:\", initialLocale);\n    const i18n = createI18n({ ...vueI18nOptions, locale: initialLocale });\n    let notInitialSetup = true;\n    const isInitialLocaleSetup = (locale) => initialLocale !== locale && notInitialSetup;\n    let ssgModeInitialSetup = true;\n    const isSSGModeInitialSetup = () => isSSG && ssgModeInitialSetup;\n    if (isSSGModeInitialSetup() && runtimeI18n.strategy === \"no_prefix\" && import.meta.client) {\n      const initialLocaleCookie = localeCookie.value;\n      nuxt.hook(\"app:mounted\", () => {\n        __DEBUG__ && console.log(\"hook app:mounted\");\n        const detected = detectBrowserLanguage(\n          route,\n          {\n            ssg: \"ssg_setup\",\n            callType: \"setup\",\n            firstAccess: true,\n            localeCookie: initialLocaleCookie\n          },\n          initialLocale\n        );\n        __DEBUG__ && console.log(\"app:mounted: detectBrowserLanguage (locale, reason, from) -\", Object.values(detected));\n        _setLocale(i18n, detected.locale);\n        ssgModeInitialSetup = false;\n      });\n    }\n    extendI18n(i18n, {\n      locales: runtimeI18n.configLocales,\n      localeCodes,\n      baseUrl: runtimeI18n.baseUrl,\n      context: nuxtContext,\n      hooks: {\n        onExtendComposer(composer) {\n          composer.strategy = runtimeI18n.strategy;\n          composer.localeProperties = computed(\n            () => normalizedLocales.find((l) => l.code === composer.locale.value) || { code: composer.locale.value }\n          );\n          composer.setLocale = async (locale) => {\n            const localeSetup = isInitialLocaleSetup(locale);\n            const modified = await loadAndSetLocale(locale, i18n, runtimeI18n, localeSetup);\n            if (modified && localeSetup) {\n              notInitialSetup = false;\n            }\n            const redirectPath = await nuxtContext.runWithContext(\n              () => detectRedirect({\n                route: { to: route },\n                targetLocale: locale,\n                routeLocaleGetter: getLocaleFromRoute\n              })\n            );\n            __DEBUG__ && console.log(\"redirectPath on setLocale\", redirectPath);\n            await nuxtContext.runWithContext(\n              async () => await navigate(\n                {\n                  nuxtApp: nuxtContext,\n                  i18n,\n                  redirectPath,\n                  locale,\n                  route\n                },\n                { enableNavigate: true }\n              )\n            );\n          };\n          composer.loadLocaleMessages = async (locale) => {\n            const setter = (locale2, message) => mergeLocaleMessage(i18n, locale2, message);\n            await loadLocale(locale, localeLoaders, setter);\n          };\n          composer.differentDomains = runtimeI18n.differentDomains;\n          composer.defaultLocale = runtimeI18n.defaultLocale;\n          composer.getBrowserLocale = () => _getBrowserLocale();\n          composer.getLocaleCookie = () => _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale);\n          composer.setLocaleCookie = (locale) => _setLocaleCookie(localeCookie, locale, _detectBrowserLanguage);\n          composer.onBeforeLanguageSwitch = (oldLocale, newLocale, initialSetup, context) => nuxt.callHook(\"i18n:beforeLocaleSwitch\", { oldLocale, newLocale, initialSetup, context });\n          composer.onLanguageSwitched = (oldLocale, newLocale) => nuxt.callHook(\"i18n:localeSwitched\", { oldLocale, newLocale });\n          composer.finalizePendingLocaleChange = async () => {\n            if (!i18n.__pendingLocale) {\n              return;\n            }\n            setLocale(i18n, i18n.__pendingLocale);\n            if (i18n.__resolvePendingLocalePromise) {\n              await i18n.__resolvePendingLocalePromise();\n            }\n            i18n.__pendingLocale = void 0;\n          };\n          composer.waitForPendingLocaleChange = async () => {\n            if (i18n.__pendingLocale && i18n.__pendingLocalePromise) {\n              await i18n.__pendingLocalePromise;\n            }\n          };\n        },\n        onExtendExportedGlobal(g) {\n          return {\n            strategy: {\n              get() {\n                return g.strategy;\n              }\n            },\n            localeProperties: {\n              get() {\n                return g.localeProperties.value;\n              }\n            },\n            setLocale: {\n              get() {\n                return async (locale) => Reflect.apply(g.setLocale, g, [locale]);\n              }\n            },\n            differentDomains: {\n              get() {\n                return g.differentDomains;\n              }\n            },\n            defaultLocale: {\n              get() {\n                return g.defaultLocale;\n              }\n            },\n            getBrowserLocale: {\n              get() {\n                return () => Reflect.apply(g.getBrowserLocale, g, []);\n              }\n            },\n            getLocaleCookie: {\n              get() {\n                return () => Reflect.apply(g.getLocaleCookie, g, []);\n              }\n            },\n            setLocaleCookie: {\n              get() {\n                return (locale) => Reflect.apply(g.setLocaleCookie, g, [locale]);\n              }\n            },\n            onBeforeLanguageSwitch: {\n              get() {\n                return (oldLocale, newLocale, initialSetup, context) => Reflect.apply(g.onBeforeLanguageSwitch, g, [oldLocale, newLocale, initialSetup, context]);\n              }\n            },\n            onLanguageSwitched: {\n              get() {\n                return (oldLocale, newLocale) => Reflect.apply(g.onLanguageSwitched, g, [oldLocale, newLocale]);\n              }\n            },\n            finalizePendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(g.finalizePendingLocaleChange, g, []);\n              }\n            },\n            waitForPendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(g.waitForPendingLocaleChange, g, []);\n              }\n            }\n          };\n        },\n        onExtendVueI18n(composer) {\n          return {\n            strategy: {\n              get() {\n                return composer.strategy;\n              }\n            },\n            localeProperties: {\n              get() {\n                return composer.localeProperties.value;\n              }\n            },\n            setLocale: {\n              get() {\n                return async (locale) => Reflect.apply(composer.setLocale, composer, [locale]);\n              }\n            },\n            loadLocaleMessages: {\n              get() {\n                return async (locale) => Reflect.apply(composer.loadLocaleMessages, composer, [locale]);\n              }\n            },\n            differentDomains: {\n              get() {\n                return composer.differentDomains;\n              }\n            },\n            defaultLocale: {\n              get() {\n                return composer.defaultLocale;\n              }\n            },\n            getBrowserLocale: {\n              get() {\n                return () => Reflect.apply(composer.getBrowserLocale, composer, []);\n              }\n            },\n            getLocaleCookie: {\n              get() {\n                return () => Reflect.apply(composer.getLocaleCookie, composer, []);\n              }\n            },\n            setLocaleCookie: {\n              get() {\n                return (locale) => Reflect.apply(composer.setLocaleCookie, composer, [locale]);\n              }\n            },\n            onBeforeLanguageSwitch: {\n              get() {\n                return (oldLocale, newLocale, initialSetup, context) => Reflect.apply(composer.onBeforeLanguageSwitch, composer, [\n                  oldLocale,\n                  newLocale,\n                  initialSetup,\n                  context\n                ]);\n              }\n            },\n            onLanguageSwitched: {\n              get() {\n                return (oldLocale, newLocale) => Reflect.apply(composer.onLanguageSwitched, composer, [oldLocale, newLocale]);\n              }\n            },\n            finalizePendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(composer.finalizePendingLocaleChange, composer, []);\n              }\n            },\n            waitForPendingLocaleChange: {\n              get() {\n                return () => Reflect.apply(composer.waitForPendingLocaleChange, composer, []);\n              }\n            }\n          };\n        }\n      }\n    });\n    const pluginOptions = {\n      __composerExtend: (c) => {\n        const g = getComposer(i18n);\n        c.strategy = g.strategy;\n        c.localeProperties = computed(() => g.localeProperties.value);\n        c.setLocale = g.setLocale;\n        c.differentDomains = g.differentDomains;\n        c.getBrowserLocale = g.getBrowserLocale;\n        c.getLocaleCookie = g.getLocaleCookie;\n        c.setLocaleCookie = g.setLocaleCookie;\n        c.onBeforeLanguageSwitch = g.onBeforeLanguageSwitch;\n        c.onLanguageSwitched = g.onLanguageSwitched;\n        c.finalizePendingLocaleChange = g.finalizePendingLocaleChange;\n        c.waitForPendingLocaleChange = g.waitForPendingLocaleChange;\n        return () => {\n        };\n      }\n    };\n    app.use(i18n, pluginOptions);\n    injectNuxtHelpers(nuxtContext, i18n);\n    let routeChangeCount = 0;\n    addRouteMiddleware(\n      \"locale-changing\",\n      defineNuxtRouteMiddleware(async (to, from) => {\n        __DEBUG__ && console.log(\"locale-changing middleware\", to, from);\n        const locale = detectLocale(\n          to,\n          getLocaleFromRoute,\n          () => {\n            return getLocale(i18n) || getDefaultLocale(runtimeI18n.defaultLocale);\n          },\n          {\n            ssg: isSSGModeInitialSetup() && runtimeI18n.strategy === \"no_prefix\" ? \"ssg_ignore\" : \"normal\",\n            callType: \"routing\",\n            firstAccess: routeChangeCount === 0,\n            localeCookie: _getLocaleCookie(localeCookie, _detectBrowserLanguage, runtimeI18n.defaultLocale)\n          },\n          runtimeI18n\n        );\n        __DEBUG__ && console.log(\"detect locale\", locale);\n        const localeSetup = isInitialLocaleSetup(locale);\n        __DEBUG__ && console.log(\"localeSetup\", localeSetup);\n        const modified = await loadAndSetLocale(locale, i18n, runtimeI18n, localeSetup);\n        if (modified && localeSetup) {\n          notInitialSetup = false;\n        }\n        const redirectPath = await nuxtContext.runWithContext(\n          () => detectRedirect({\n            route: { to, from },\n            targetLocale: locale,\n            routeLocaleGetter: runtimeI18n.strategy === \"no_prefix\" ? () => locale : getLocaleFromRoute,\n            calledWithRouting: true\n          })\n        );\n        __DEBUG__ && console.log(\"redirectPath on locale-changing middleware\", redirectPath);\n        routeChangeCount++;\n        return await nuxtContext.runWithContext(\n          async () => navigate({ nuxtApp: nuxtContext, i18n, redirectPath, locale, route: to })\n        );\n      }),\n      { global: true }\n    );\n  }\n});\n"],"names":["i18n_EI7LsD1KYQADczz5hrChviGQCdVM8yUkvFEZLJpmnvM","defineNuxtPlugin","__temp","__restore","route","useRoute","app","nuxt","nuxtContext","host","multiDomainLocales","strategy","l","defaultLocaleDomain","defaultLocale","findDefaultLocale","configLocales","router","useRouter","route2","_a","newRouteName","runtimeI18n","_detectBrowserLanguage","runtimeDetectBrowserLanguage","vueI18nOptions","__executeAsync","loadVueI18nOptions","vueI18nConfigs","useNuxtApp","getLocaleFromRoute","createLocaleFromRouteGetter","getDefaultLocale","locale","localeCookie","getI18nCookie","initialLocale","detectLocale","_getLocaleCookie","loadInitialMessages","localeLoaders","localeCodes","i18n","createI18n","notInitialSetup","isInitialLocaleSetup","extendI18n","composer","computed","normalizedLocales","localeSetup","loadAndSetLocale","detectRedirect","navigate","redirectPath","loadLocale","locale2","message","mergeLocaleMessage","_getBrowserLocale","_setLocaleCookie","oldLocale","newLocale","initialSetup","context","setLocale","g","pluginOptions","c","injectNuxtHelpers","routeChangeCount","addRouteMiddleware","defineNuxtRouteMiddleware","to","from","getLocale"],"mappings":"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","x_google_ignoreList":[0]}