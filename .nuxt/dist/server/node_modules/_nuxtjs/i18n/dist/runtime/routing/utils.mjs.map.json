{"file":"utils.mjs","mappings":"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","names":["getNormalizedLocales","locales","normalized","locale","isString","isI18nInstance","i18n","isComposer","target","isRef","isVueI18n","getI18nTarget","getComposer","getLocale","unref","getLocales","getLocaleCodes","setLocale","getRouteName","routeName","isSymbol","getLocaleRouteName","defaultLocale","strategy","routesNameSeparator","defaultLocaleRouteNameSuffix","differentDomains","localizedRoutes","name","resolveBaseUrl","baseUrl","context","isFunction","matchBrowserLocale","browserLocales","matchedLocales","index","browserCode","matchedLocale","l","languageCode","DefaultBrowserLocaleMatcher","compareBrowserLocale","a","b","DefaultBrowerLocaleComparer","findBrowserLocale","matcher","comparer","normalizedLocales","code","language","getLocalesRegex","localeCodes"],"sources":["../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/utils.js"],"sourcesContent":["import { isString, isSymbol, isFunction } from \"@intlify/shared\";\nimport { isRef, unref } from \"#imports\";\nexport const inBrowser = typeof window !== \"undefined\";\nexport function getNormalizedLocales(locales) {\n  locales = locales || [];\n  const normalized = [];\n  for (const locale of locales) {\n    if (isString(locale)) {\n      normalized.push({ code: locale });\n    } else {\n      normalized.push(locale);\n    }\n  }\n  return normalized;\n}\nfunction isI18nInstance(i18n) {\n  return i18n != null && \"global\" in i18n && \"mode\" in i18n;\n}\nfunction isComposer(target) {\n  return target != null && !(\"__composer\" in target) && \"locale\" in target && isRef(target.locale);\n}\nexport function isVueI18n(target) {\n  return target != null && \"__composer\" in target;\n}\nexport function getI18nTarget(i18n) {\n  return isI18nInstance(i18n) ? i18n.global : i18n;\n}\nexport function getComposer(i18n) {\n  const target = getI18nTarget(i18n);\n  if (isComposer(target)) return target;\n  if (isVueI18n(target)) return target.__composer;\n  return target;\n}\nexport function getLocale(i18n) {\n  return unref(getI18nTarget(i18n).locale);\n}\nexport function getLocales(i18n) {\n  return unref(getI18nTarget(i18n).locales);\n}\nexport function getLocaleCodes(i18n) {\n  return unref(getI18nTarget(i18n).localeCodes);\n}\nexport function setLocale(i18n, locale) {\n  const target = getI18nTarget(i18n);\n  if (isRef(target.locale)) {\n    target.locale.value = locale;\n  } else {\n    target.locale = locale;\n  }\n}\nexport function adjustRoutePathForTrailingSlash(pagePath, trailingSlash, isChildWithRelativePath) {\n  return pagePath.replace(/\\/+$/, \"\") + (trailingSlash ? \"/\" : \"\") || (isChildWithRelativePath ? \"\" : \"/\");\n}\nexport function getRouteName(routeName) {\n  if (isString(routeName)) return routeName;\n  if (isSymbol(routeName)) return routeName.toString();\n  return \"(null)\";\n}\nexport function getLocaleRouteName(routeName, locale, {\n  defaultLocale,\n  strategy,\n  routesNameSeparator,\n  defaultLocaleRouteNameSuffix,\n  differentDomains\n}) {\n  const localizedRoutes = strategy !== \"no_prefix\" || differentDomains;\n  let name = getRouteName(routeName) + (localizedRoutes ? routesNameSeparator + locale : \"\");\n  if (locale === defaultLocale && strategy === \"prefix_and_default\") {\n    name += routesNameSeparator + defaultLocaleRouteNameSuffix;\n  }\n  return name;\n}\nexport function resolveBaseUrl(baseUrl, context) {\n  if (isFunction(baseUrl)) {\n    return baseUrl(context);\n  }\n  return baseUrl;\n}\nfunction matchBrowserLocale(locales, browserLocales) {\n  const matchedLocales = [];\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const matchedLocale = locales.find((l) => l.language.toLowerCase() === browserCode.toLowerCase());\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 1 - index / browserLocales.length });\n      break;\n    }\n  }\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const languageCode = browserCode.split(\"-\")[0].toLowerCase();\n    const matchedLocale = locales.find((l) => l.language.split(\"-\")[0].toLowerCase() === languageCode);\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 0.999 - index / browserLocales.length });\n      break;\n    }\n  }\n  return matchedLocales;\n}\nexport const DefaultBrowserLocaleMatcher = matchBrowserLocale;\nfunction compareBrowserLocale(a, b) {\n  if (a.score === b.score) {\n    return b.code.length - a.code.length;\n  }\n  return b.score - a.score;\n}\nexport const DefaultBrowerLocaleComparer = compareBrowserLocale;\nexport function findBrowserLocale(locales, browserLocales, { matcher = DefaultBrowserLocaleMatcher, comparer = DefaultBrowerLocaleComparer } = {}) {\n  const normalizedLocales = [];\n  for (const l of locales) {\n    const { code } = l;\n    const language = l.language || code;\n    normalizedLocales.push({ code, language });\n  }\n  const matchedLocales = matcher(normalizedLocales, browserLocales);\n  if (matchedLocales.length > 1) {\n    matchedLocales.sort(comparer);\n  }\n  return matchedLocales.length ? matchedLocales[0].code : \"\";\n}\nexport function getLocalesRegex(localeCodes) {\n  return new RegExp(`^/(${localeCodes.join(\"|\")})(?:/|$)`, \"i\");\n}\n"],"version":3}