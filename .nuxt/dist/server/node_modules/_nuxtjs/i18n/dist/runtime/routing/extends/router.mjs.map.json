{"file":"router.mjs","mappings":"gSAIO,SAASA,GAA8B,CAC5C,KAAM,CAAE,oBAAAC,EAAqB,6BAAAC,CAA4B,EAAKC,EAAkB,EAAC,OAAO,KAClFC,EAAiB,IAAIC,EAAY,KAAK,GAAG,CAAC,IAC1CC,EAAuB,MAAML,CAAmB,GAAGC,CAA4B,KAC/EK,EAAa,IAAI,OAAO,GAAGN,CAAmB,GAAGG,CAAc,GAAGE,CAAoB,IAAK,GAAG,EAC9FE,EAAaC,EAAgBJ,CAAW,EAuB9C,OAtB4BK,GAAU,CACpC,GAAIC,EAASD,CAAK,GAChB,GAAIA,EAAM,KAAM,CAEd,MAAME,GADOC,EAASH,EAAM,IAAI,EAAIA,EAAM,KAAOA,EAAM,KAAK,SAAU,GACjD,MAAMH,CAAU,EACrC,GAAIK,GAAWA,EAAQ,OAAS,EAC9B,OAAOA,EAAQ,CAAC,CAE1B,SAAiBF,EAAM,KAAM,CACrB,MAAME,EAAUF,EAAM,KAAK,MAAMF,CAAU,EAC3C,GAAII,GAAWA,EAAQ,OAAS,EAC9B,OAAOA,EAAQ,CAAC,CAE1B,UACeC,EAASH,CAAK,EAAG,CAC1B,MAAME,EAAUF,EAAM,MAAMF,CAAU,EACtC,GAAII,GAAWA,EAAQ,OAAS,EAC9B,OAAOA,EAAQ,CAAC,CAExB,CACI,MAAO,EACR,CAEH","names":["createLocaleFromRouteGetter","routesNameSeparator","defaultLocaleRouteNameSuffix","useRuntimeConfig","localesPattern","localeCodes","defaultSuffixPattern","regexpName","regexpPath","getLocalesRegex","route","isObject","matches","isString"],"sources":["../../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/extends/router.js"],"sourcesContent":["import { isString, isObject } from \"@intlify/shared\";\nimport { getLocalesRegex } from \"../utils.js\";\nimport { localeCodes } from \"#build/i18n.options.mjs\";\nimport { useRuntimeConfig } from \"#imports\";\nexport function createLocaleFromRouteGetter() {\n  const { routesNameSeparator, defaultLocaleRouteNameSuffix } = useRuntimeConfig().public.i18n;\n  const localesPattern = `(${localeCodes.join(\"|\")})`;\n  const defaultSuffixPattern = `(?:${routesNameSeparator}${defaultLocaleRouteNameSuffix})?`;\n  const regexpName = new RegExp(`${routesNameSeparator}${localesPattern}${defaultSuffixPattern}$`, \"i\");\n  const regexpPath = getLocalesRegex(localeCodes);\n  const getLocaleFromRoute = (route) => {\n    if (isObject(route)) {\n      if (route.name) {\n        const name = isString(route.name) ? route.name : route.name.toString();\n        const matches = name.match(regexpName);\n        if (matches && matches.length > 1) {\n          return matches[1];\n        }\n      } else if (route.path) {\n        const matches = route.path.match(regexpPath);\n        if (matches && matches.length > 1) {\n          return matches[1];\n        }\n      }\n    } else if (isString(route)) {\n      const matches = route.match(regexpPath);\n      if (matches && matches.length > 1) {\n        return matches[1];\n      }\n    }\n    return \"\";\n  };\n  return getLocaleFromRoute;\n}\n"],"version":3}