import{isFunction as d,deepCopy as r,isArray as w,isObject as p,isString as m}from"../../../../_intlify/shared/dist/shared.mjs";const l=new Map;async function v(e,a){const n={messages:{}};for(const o of e){const{default:t}=await o(),s=d(t)?await a.runWithContext(async()=>await t()):t;r(s,n)}return n}function h(e,a){let n=[];if(w(e))n=e;else if(p(e)){const o=[...a,"default"];for(const t of o)e[t]&&(n=[...n,...e[t].filter(Boolean)])}else m(e)&&a.every(o=>o!==e)&&n.push(e);return n}async function F(e,a,n){const{defaultLocale:o,initialLocale:t,localeCodes:s,fallbackLocale:i,lazy:f}=n;if(f&&i){const c=h(i,[o,t]);await Promise.all(c.map(y=>u(y,a,e)))}const g=f?[...new Set().add(o).add(t)]:s;return await Promise.all(g.map(c=>u(c,a,e))),e}async function L(e,{key:a,load:n}){let o=null;try{const t=await n().then(s=>s.default||s);d(t)?o=await t(e):(o=t,o!=null&&l&&l.set(a,o))}catch(t){console.error("Failed locale loading: "+t.message)}return o}async function M(e,a,n){const o=a[e];if(o==null){console.warn("Could not find messages for locale code: "+e);return}const t={};for(const s of o){let i=null;l&&l.has(s.key)&&s.cache?i=l.get(s.key):i=await L(e,s),i!=null&&r(i,t)}n(e,t)}async function u(e,a,n){await M(e,a,(t,s)=>{const i=n[t]||{};r(s,i),n[t]=i})}export{u as loadAndSetLocaleMessages,F as loadInitialMessages,M as loadLocale,v as loadVueI18nOptions,h as makeFallbackLocaleCodes};
//# sourceMappingURL=messages.mjs.map
