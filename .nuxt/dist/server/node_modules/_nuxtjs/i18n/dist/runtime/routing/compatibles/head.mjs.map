{"version":3,"file":"head.mjs","sources":["../../../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/head.js"],"sourcesContent":["import { unref, useNuxtApp, useRuntimeConfig } from \"#imports\";\nimport { getComposer, getLocale, getLocales, getNormalizedLocales } from \"../utils.js\";\nimport { getRouteBaseName, localeRoute, switchLocalePath } from \"./routing.js\";\nimport { isArray, isObject } from \"@intlify/shared\";\nimport { joinURL } from \"ufo\";\nexport function localeHead(common, {\n  addDirAttribute = false,\n  addSeoAttributes: seoAttributes = true,\n  identifierAttribute: idAttribute = \"hid\"\n}) {\n  const { defaultDirection } = useRuntimeConfig().public.i18n;\n  const i18n = getComposer(common.i18n);\n  const metaObject = {\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  };\n  if (unref(i18n.locales) == null || unref(i18n.baseUrl) == null) {\n    return metaObject;\n  }\n  const locale = getLocale(common.i18n);\n  const locales = getLocales(common.i18n);\n  const currentLocale = getNormalizedLocales(locales).find((l) => l.code === locale) || {\n    code: locale\n  };\n  const currentLanguage = currentLocale.language;\n  const currentDir = currentLocale.dir || defaultDirection;\n  if (addDirAttribute) {\n    metaObject.htmlAttrs.dir = currentDir;\n  }\n  if (seoAttributes && locale && unref(i18n.locales)) {\n    if (currentLanguage) {\n      metaObject.htmlAttrs.lang = currentLanguage;\n    }\n    metaObject.link.push(\n      ...getHreflangLinks(common, unref(locales), idAttribute),\n      ...getCanonicalLink(common, idAttribute, seoAttributes)\n    );\n    metaObject.meta.push(\n      ...getOgUrl(common, idAttribute, seoAttributes),\n      ...getCurrentOgLocale(currentLocale, currentLanguage, idAttribute),\n      ...getAlternateOgLocales(unref(locales), currentLanguage, idAttribute)\n    );\n  }\n  return metaObject;\n}\nfunction getBaseUrl() {\n  const nuxtApp = useNuxtApp();\n  const i18n = getComposer(nuxtApp.$i18n);\n  return joinURL(unref(i18n.baseUrl), nuxtApp.$config.app.baseURL);\n}\nexport function getHreflangLinks(common, locales, idAttribute) {\n  const baseUrl = getBaseUrl();\n  const { defaultLocale, strategy } = useRuntimeConfig().public.i18n;\n  const links = [];\n  if (strategy === \"no_prefix\") return links;\n  const localeMap = /* @__PURE__ */ new Map();\n  for (const locale of locales) {\n    const localeLanguage = locale.language;\n    if (!localeLanguage) {\n      console.warn(\"Locale `language` ISO code is required to generate alternate link\");\n      continue;\n    }\n    const [language, region] = localeLanguage.split(\"-\");\n    if (language && region && (locale.isCatchallLocale || !localeMap.has(language))) {\n      localeMap.set(language, locale);\n    }\n    localeMap.set(localeLanguage, locale);\n  }\n  for (const [language, mapLocale] of localeMap.entries()) {\n    const localePath = switchLocalePath(common, mapLocale.code);\n    if (localePath) {\n      links.push({\n        [idAttribute]: `i18n-alt-${language}`,\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath, baseUrl),\n        hreflang: language\n      });\n    }\n  }\n  if (defaultLocale) {\n    const localePath = switchLocalePath(common, defaultLocale);\n    if (localePath) {\n      links.push({\n        [idAttribute]: \"i18n-xd\",\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath, baseUrl),\n        hreflang: \"x-default\"\n      });\n    }\n  }\n  return links;\n}\nexport function getCanonicalUrl(common, baseUrl, seoAttributes) {\n  const route = common.router.currentRoute.value;\n  const currentRoute = localeRoute(common, {\n    ...route,\n    path: void 0,\n    name: getRouteBaseName(common, route)\n  });\n  if (!currentRoute) return \"\";\n  let href = toAbsoluteUrl(currentRoute.path, baseUrl);\n  const canonicalQueries = isObject(seoAttributes) && seoAttributes.canonicalQueries || [];\n  const currentRouteQueryParams = currentRoute.query;\n  const params = new URLSearchParams();\n  for (const queryParamName of canonicalQueries) {\n    if (queryParamName in currentRouteQueryParams) {\n      const queryParamValue = currentRouteQueryParams[queryParamName];\n      if (isArray(queryParamValue)) {\n        queryParamValue.forEach((v) => params.append(queryParamName, v || \"\"));\n      } else {\n        params.append(queryParamName, queryParamValue || \"\");\n      }\n    }\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    href = `${href}?${queryString}`;\n  }\n  return href;\n}\nexport function getCanonicalLink(common, idAttribute, seoAttributes) {\n  const baseUrl = getBaseUrl();\n  const href = getCanonicalUrl(common, baseUrl, seoAttributes);\n  if (!href) return [];\n  return [{ [idAttribute]: \"i18n-can\", rel: \"canonical\", href }];\n}\nexport function getOgUrl(common, idAttribute, seoAttributes) {\n  const baseUrl = getBaseUrl();\n  const href = getCanonicalUrl(common, baseUrl, seoAttributes);\n  if (!href) return [];\n  return [{ [idAttribute]: \"i18n-og-url\", property: \"og:url\", content: href }];\n}\nexport function getCurrentOgLocale(currentLocale, currentLanguage, idAttribute) {\n  if (!currentLocale || !currentLanguage) return [];\n  return [{ [idAttribute]: \"i18n-og\", property: \"og:locale\", content: hypenToUnderscore(currentLanguage) }];\n}\nexport function getAlternateOgLocales(locales, currentLanguage, idAttribute) {\n  const alternateLocales = locales.filter((locale) => locale.language && locale.language !== currentLanguage);\n  return alternateLocales.map((locale) => ({\n    [idAttribute]: `i18n-og-alt-${locale.language}`,\n    property: \"og:locale:alternate\",\n    content: hypenToUnderscore(locale.language)\n  }));\n}\nfunction hypenToUnderscore(str) {\n  return (str || \"\").replace(/-/g, \"_\");\n}\nfunction toAbsoluteUrl(urlOrPath, baseUrl) {\n  if (urlOrPath.match(/^https?:\\/\\//)) return urlOrPath;\n  return joinURL(baseUrl, urlOrPath);\n}\n"],"names":["localeHead","common","addDirAttribute","seoAttributes","idAttribute","defaultDirection","useRuntimeConfig","i18n","getComposer","metaObject","unref","locale","getLocale","locales","getLocales","currentLocale","getNormalizedLocales","l","currentLanguage","currentDir","getHreflangLinks","getCanonicalLink","getOgUrl","getCurrentOgLocale","getAlternateOgLocales","getBaseUrl","nuxtApp","useNuxtApp","joinURL","baseUrl","defaultLocale","strategy","links","localeMap","localeLanguage","language","region","mapLocale","localePath","switchLocalePath","toAbsoluteUrl","getCanonicalUrl","route","currentRoute","localeRoute","getRouteBaseName","href","canonicalQueries","isObject","currentRouteQueryParams","params","queryParamName","queryParamValue","isArray","v","queryString","hypenToUnderscore","str","urlOrPath"],"mappings":"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","x_google_ignoreList":[0]}