{"file":"utils.mjs","mappings":"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","names":["setCookieLocale","i18n","locale","callVueI18nInterfaces","mergeLocaleMessage","messages","onBeforeLanguageSwitch","oldLocale","newLocale","initial","context","onLanguageSwitched","initCommonComposableOptions","useNuxtApp","useRouter","useRuntimeConfig","useState","loadAndSetLocale","runtimeI18n","differentDomains","skipSettingLocaleOnNavigate","lazy","opts","runtimeDetectBrowserLanguage","nuxtApp","getLocale","localeCodes","getLocaleCodes","syncCookie","localeOverride","i18nFallbackLocales","getVueI18nPropertyValue","setter","message","fallbackLocales","makeFallbackLocaleCodes","loadLocale","localeLoaders","setLocale","createLogger","label","detectLocale","route","routeLocaleGetter","initialLocaleLoader","detectLocaleContext","strategy","defaultLocale","multiDomainLocales","localeCookie","_detectBrowserLanguage","initialLocale","isFunction","detectedBrowser","detectBrowserLanguage","DetectFailure","detected","getLocaleDomain","normalizedLocales","cookieLocale","detectRedirect","targetLocale","calledWithRouting","common","redirectPath","toFullPath","routePath","switchLocalePath","isString","isEqual","isRootRedirectOptions","rootRedirect","isObject","useRedirectState","NUXT_I18N_MODULE_ID","_navigate","status","navigateTo","navigate","args","enableNavigate","configLocales","host","getHost","currentDomain","locale2","_a","domain","defaultLocaleForDomain","createLocaleFromRouteGetter","state","injectNuxtHelpers","nuxt","defineGetter","getI18nTarget","wrapComposable","getRouteBaseName","localePath","localeRoute","localeHead","extendPrefixable","runtimeConfig","DefaultPrefixable","extendSwitchLocalePathIntercepter","path","getDomainFromLocale","joinURL","DefaultSwitchLocalePathIntercepter","extendBaseUrl","ctx","baseUrl","localeCode"],"sources":["../../../../../../../../node_modules/@nuxtjs/i18n/dist/runtime/utils.js"],"sourcesContent":["import { joinURL, isEqual } from \"ufo\";\nimport { isString, isFunction, isObject } from \"@intlify/shared\";\nimport { navigateTo, useNuxtApp, useRouter, useRuntimeConfig, useState } from \"#imports\";\nimport {\n  NUXT_I18N_MODULE_ID,\n  isSSG,\n  localeLoaders,\n  normalizedLocales\n} from \"#build/i18n.options.mjs\";\nimport {\n  wrapComposable,\n  detectBrowserLanguage,\n  callVueI18nInterfaces,\n  getVueI18nPropertyValue,\n  defineGetter,\n  getLocaleDomain,\n  getDomainFromLocale,\n  runtimeDetectBrowserLanguage,\n  getHost,\n  DetectFailure\n} from \"./internal.js\";\nimport { loadLocale, makeFallbackLocaleCodes } from \"./messages.js\";\nimport {\n  localeHead,\n  localePath,\n  localeRoute,\n  getRouteBaseName,\n  switchLocalePath,\n  DefaultPrefixable,\n  DefaultSwitchLocalePathIntercepter\n} from \"./routing/compatibles/index.js\";\nimport { getLocale, setLocale, getLocaleCodes, getI18nTarget } from \"./routing/utils.js\";\nimport { createLocaleFromRouteGetter } from \"./routing/extends/router.js\";\nexport function _setLocale(i18n, locale) {\n  return callVueI18nInterfaces(i18n, \"setLocale\", locale);\n}\nexport function setCookieLocale(i18n, locale) {\n  return callVueI18nInterfaces(i18n, \"setLocaleCookie\", locale);\n}\nexport function setLocaleMessage(i18n, locale, messages) {\n  return callVueI18nInterfaces(i18n, \"setLocaleMessage\", locale, messages);\n}\nexport function mergeLocaleMessage(i18n, locale, messages) {\n  return callVueI18nInterfaces(i18n, \"mergeLocaleMessage\", locale, messages);\n}\nasync function onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, context) {\n  return callVueI18nInterfaces(i18n, \"onBeforeLanguageSwitch\", oldLocale, newLocale, initial, context);\n}\nexport function onLanguageSwitched(i18n, oldLocale, newLocale) {\n  return callVueI18nInterfaces(i18n, \"onLanguageSwitched\", oldLocale, newLocale);\n}\nexport async function finalizePendingLocaleChange(i18n) {\n  return callVueI18nInterfaces(i18n, \"finalizePendingLocaleChange\");\n}\nexport function initCommonComposableOptions(i18n) {\n  return {\n    i18n: i18n ?? useNuxtApp().$i18n,\n    router: useRouter(),\n    runtimeConfig: useRuntimeConfig(),\n    metaState: useState(\"nuxt-i18n-meta\", () => ({}))\n  };\n}\nexport async function loadAndSetLocale(newLocale, i18n, runtimeI18n, initial = false) {\n  const { differentDomains, skipSettingLocaleOnNavigate, lazy } = runtimeI18n;\n  const opts = runtimeDetectBrowserLanguage(runtimeI18n);\n  const nuxtApp = useNuxtApp();\n  const oldLocale = getLocale(i18n);\n  const localeCodes = getLocaleCodes(i18n);\n  function syncCookie(locale = oldLocale) {\n    if (opts === false || !opts.useCookie) return;\n    if (skipSettingLocaleOnNavigate) return;\n    setCookieLocale(i18n, locale);\n  }\n  __DEBUG__ && console.log(\"setLocale: new -> \", newLocale, \" old -> \", oldLocale, \" initial -> \", initial);\n  if (!newLocale) {\n    syncCookie();\n    return false;\n  }\n  if (!initial && differentDomains) {\n    syncCookie();\n    return false;\n  }\n  if (oldLocale === newLocale) {\n    syncCookie();\n    return false;\n  }\n  const localeOverride = await onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, nuxtApp);\n  if (localeOverride && localeCodes.includes(localeOverride)) {\n    if (oldLocale === localeOverride) {\n      syncCookie();\n      return false;\n    }\n    newLocale = localeOverride;\n  }\n  if (lazy) {\n    const i18nFallbackLocales = getVueI18nPropertyValue(i18n, \"fallbackLocale\");\n    const setter = (locale, message) => mergeLocaleMessage(i18n, locale, message);\n    if (i18nFallbackLocales) {\n      const fallbackLocales = makeFallbackLocaleCodes(i18nFallbackLocales, [newLocale]);\n      await Promise.all(fallbackLocales.map((locale) => loadLocale(locale, localeLoaders, setter)));\n    }\n    await loadLocale(newLocale, localeLoaders, setter);\n  }\n  if (skipSettingLocaleOnNavigate) {\n    return false;\n  }\n  syncCookie(newLocale);\n  setLocale(i18n, newLocale);\n  await onLanguageSwitched(i18n, oldLocale, newLocale);\n  return true;\n}\nexport function createLogger(label) {\n  return {\n    log: console.log.bind(console, `${label}:`)\n    // change to this after implementing logger across runtime code\n    // log: console.log.bind(console, `[i18n:${label}]`)\n  };\n}\nexport function detectLocale(route, routeLocaleGetter, initialLocaleLoader, detectLocaleContext, runtimeI18n) {\n  const { strategy, defaultLocale, differentDomains, multiDomainLocales } = runtimeI18n;\n  const { localeCookie } = detectLocaleContext;\n  const _detectBrowserLanguage = runtimeDetectBrowserLanguage(runtimeI18n);\n  const logger = createLogger(\"detectLocale\");\n  const initialLocale = isFunction(initialLocaleLoader) ? initialLocaleLoader() : initialLocaleLoader;\n  __DEBUG__ && logger.log({ initialLocale });\n  const detectedBrowser = detectBrowserLanguage(route, detectLocaleContext, initialLocale);\n  __DEBUG__ && logger.log({ detectBrowserLanguage: detectedBrowser });\n  if (detectedBrowser.reason === DetectFailure.SSG_IGNORE) {\n    return initialLocale;\n  }\n  if (detectedBrowser.locale && detectedBrowser.from != null) {\n    return detectedBrowser.locale;\n  }\n  let detected = \"\";\n  __DEBUG__ && logger.log(\"1/3\", { detected, strategy });\n  if (differentDomains || multiDomainLocales) {\n    detected ||= getLocaleDomain(normalizedLocales, strategy, route);\n  } else if (strategy !== \"no_prefix\") {\n    detected ||= routeLocaleGetter(route);\n  }\n  __DEBUG__ && logger.log(\"2/3\", { detected, detectBrowserLanguage: _detectBrowserLanguage });\n  const cookieLocale = _detectBrowserLanguage && _detectBrowserLanguage.useCookie && localeCookie;\n  detected ||= cookieLocale || initialLocale || defaultLocale || \"\";\n  __DEBUG__ && logger.log(\"3/3\", { detected, cookieLocale, initialLocale, defaultLocale });\n  return detected;\n}\nexport function detectRedirect({\n  route,\n  targetLocale,\n  routeLocaleGetter,\n  calledWithRouting = false\n}) {\n  const nuxtApp = useNuxtApp();\n  const common = initCommonComposableOptions();\n  const { strategy, differentDomains } = common.runtimeConfig.public.i18n;\n  __DEBUG__ && console.log(\"detectRedirect: targetLocale -> \", targetLocale);\n  __DEBUG__ && console.log(\"detectRedirect: route -> \", route);\n  __DEBUG__ && console.log(\"detectRedirect: calledWithRouting -> \", calledWithRouting, routeLocaleGetter(route.to));\n  let redirectPath = \"\";\n  const { fullPath: toFullPath } = route.to;\n  const isStaticGenerate = isSSG && import.meta.server;\n  if (!isStaticGenerate && !differentDomains && (calledWithRouting || strategy !== \"no_prefix\") && routeLocaleGetter(route.to) !== targetLocale) {\n    const routePath = nuxtApp.$switchLocalePath(targetLocale) || nuxtApp.$localePath(toFullPath, targetLocale);\n    __DEBUG__ && console.log(\"detectRedirect: calculate routePath -> \", routePath, toFullPath);\n    if (isString(routePath) && routePath && !isEqual(routePath, toFullPath) && !routePath.startsWith(\"//\")) {\n      redirectPath = !(route.from && route.from.fullPath === routePath) ? routePath : \"\";\n    }\n  }\n  if ((differentDomains || isSSG && import.meta.client) && routeLocaleGetter(route.to) !== targetLocale) {\n    const routePath = switchLocalePath(common, targetLocale, route.to);\n    __DEBUG__ && console.log(\"detectRedirect: calculate domain or ssg routePath -> \", routePath);\n    if (isString(routePath) && routePath && !isEqual(routePath, toFullPath) && !routePath.startsWith(\"//\")) {\n      redirectPath = routePath;\n    }\n  }\n  return redirectPath;\n}\nfunction isRootRedirectOptions(rootRedirect) {\n  return isObject(rootRedirect) && \"path\" in rootRedirect && \"statusCode\" in rootRedirect;\n}\nconst useRedirectState = () => useState(NUXT_I18N_MODULE_ID + \":redirect\", () => \"\");\nfunction _navigate(redirectPath, status) {\n  return navigateTo(redirectPath, { redirectCode: status });\n}\nexport async function navigate(args, { status = 302, enableNavigate = false } = {}) {\n  const { nuxtApp, i18n, locale, route } = args;\n  const { rootRedirect, differentDomains, multiDomainLocales, skipSettingLocaleOnNavigate, configLocales, strategy } = nuxtApp.$config.public.i18n;\n  let { redirectPath } = args;\n  __DEBUG__ && console.log(\n    \"navigate options \",\n    status,\n    rootRedirect,\n    differentDomains,\n    skipSettingLocaleOnNavigate,\n    enableNavigate\n  );\n  __DEBUG__ && console.log(\"navigate isSSG\", isSSG);\n  if (route.path === \"/\" && rootRedirect) {\n    if (isString(rootRedirect)) {\n      redirectPath = \"/\" + rootRedirect;\n    } else if (isRootRedirectOptions(rootRedirect)) {\n      redirectPath = \"/\" + rootRedirect.path;\n      status = rootRedirect.statusCode;\n    }\n    redirectPath = nuxtApp.$localePath(redirectPath, locale);\n    __DEBUG__ && console.log(\"navigate: rootRedirect mode redirectPath -> \", redirectPath, \" status -> \", status);\n    return _navigate(redirectPath, status);\n  }\n  if (import.meta.client && skipSettingLocaleOnNavigate) {\n    i18n.__pendingLocale = locale;\n    i18n.__pendingLocalePromise = new Promise((resolve) => {\n      i18n.__resolvePendingLocalePromise = resolve;\n    });\n    if (!enableNavigate) {\n      return;\n    }\n  }\n  if (multiDomainLocales && strategy === \"prefix_except_default\") {\n    const host = getHost();\n    const currentDomain = configLocales.find((locale2) => {\n      if (typeof locale2 !== \"string\") {\n        return locale2.defaultForDomains?.find((domain) => domain === host);\n      }\n      return false;\n    });\n    const defaultLocaleForDomain = typeof currentDomain !== \"string\" ? currentDomain?.code : void 0;\n    if (route.path.startsWith(`/${defaultLocaleForDomain}`)) {\n      return _navigate(route.path.replace(`/${defaultLocaleForDomain}`, \"\"), status);\n    } else if (!route.path.startsWith(`/${locale}`) && locale !== defaultLocaleForDomain) {\n      const getLocaleFromRoute = createLocaleFromRouteGetter();\n      const oldLocale = getLocaleFromRoute(route.path);\n      if (oldLocale !== \"\") {\n        return _navigate(`/${locale + route.path.replace(`/${oldLocale}`, \"\")}`, status);\n      } else {\n        return _navigate(`/${locale + (route.path === \"/\" ? \"\" : route.path)}`, status);\n      }\n    } else if (redirectPath && route.path !== redirectPath) {\n      return _navigate(redirectPath, status);\n    }\n    return;\n  }\n  if (!differentDomains) {\n    if (redirectPath) {\n      return _navigate(redirectPath, status);\n    }\n  } else {\n    const state = useRedirectState();\n    __DEBUG__ && console.log(\"redirect state ->\", state.value, \"redirectPath -> \", redirectPath);\n    if (state.value && state.value !== redirectPath) {\n      if (import.meta.client) {\n        state.value = \"\";\n        window.location.assign(redirectPath);\n      } else if (import.meta.server) {\n        __DEBUG__ && console.log(\"differentDomains servermode \", redirectPath);\n        state.value = redirectPath;\n      }\n    }\n  }\n}\nexport function injectNuxtHelpers(nuxt, i18n) {\n  defineGetter(nuxt, \"$i18n\", getI18nTarget(i18n));\n  defineGetter(nuxt, \"$getRouteBaseName\", wrapComposable(getRouteBaseName));\n  defineGetter(nuxt, \"$localePath\", wrapComposable(localePath));\n  defineGetter(nuxt, \"$localeRoute\", wrapComposable(localeRoute));\n  defineGetter(nuxt, \"$switchLocalePath\", wrapComposable(switchLocalePath));\n  defineGetter(nuxt, \"$localeHead\", wrapComposable(localeHead));\n}\nexport function extendPrefixable(runtimeConfig = useRuntimeConfig()) {\n  return (opts) => {\n    __DEBUG__ && console.log(\"extendPrefixable\", DefaultPrefixable(opts));\n    return DefaultPrefixable(opts) && !runtimeConfig.public.i18n.differentDomains;\n  };\n}\nexport function extendSwitchLocalePathIntercepter(runtimeConfig = useRuntimeConfig()) {\n  return (path, locale) => {\n    if (runtimeConfig.public.i18n.differentDomains) {\n      const domain = getDomainFromLocale(locale);\n      __DEBUG__ && console.log(\"extendSwitchLocalePathIntercepter: domain -> \", domain, \" path -> \", path);\n      if (domain) {\n        return joinURL(domain, path);\n      } else {\n        return path;\n      }\n    } else {\n      return DefaultSwitchLocalePathIntercepter(path, locale);\n    }\n  };\n}\nexport function extendBaseUrl() {\n  return () => {\n    const ctx = useNuxtApp();\n    const { baseUrl, defaultLocale, differentDomains } = ctx.$config.public.i18n;\n    if (isFunction(baseUrl)) {\n      const baseUrlResult = baseUrl(ctx);\n      __DEBUG__ && console.log(\"baseUrl: using localeLoader function -\", baseUrlResult);\n      return baseUrlResult;\n    }\n    const localeCode = isFunction(defaultLocale) ? defaultLocale() : defaultLocale;\n    if (differentDomains && localeCode) {\n      const domain = getDomainFromLocale(localeCode);\n      if (domain) {\n        __DEBUG__ && console.log(\"baseUrl: using differentDomains -\", domain);\n        return domain;\n      }\n    }\n    if (baseUrl) {\n      __DEBUG__ && console.log(\"baseUrl: using runtimeConfig -\", baseUrl);\n      return baseUrl;\n    }\n    return baseUrl;\n  };\n}\nexport function getNormalizedLocales(locales) {\n  const normalized = [];\n  for (const locale of locales) {\n    if (isString(locale)) {\n      normalized.push({ code: locale });\n      continue;\n    }\n    normalized.push(locale);\n  }\n  return normalized;\n}\n"],"version":3}