{"file":"nuxt-root.vue.mjs","mappings":"0lBAWA,MAAMA,EAEF,IAAM,KAEJC,EAAUC,EAAW,EACTD,EAAQ,eAAe,EAMRA,EAAQ,WAAW,IACpD,MAAME,EAAiB,GAIfC,EAAAC,EAAiBC,GAAU,EAGnBL,EAAQ,MAAM,aAAaM,GAASA,EAAM,IAAYC,GAAAA,EAAM,CAAA,EAAG,WAAW,EAM1F,MAAMC,EAAQC,EAAS,EAEjBC,EAAoCF,EAAM,OAAS,CAACR,EAAQ,WAAW,MAC7DW,EAAA,CAACC,EAAKC,EAAQC,IAAS,CACrCd,EAAQ,MAAM,SAAS,YAAaY,EAAKC,EAAQC,CAAI,EAAE,MAAmBC,GAAA,QAAQ,MAAM,mCAAoCA,CAAS,CAAC,EACxD,CAC5E,MAAMC,EAAIhB,EAAQ,eAAe,IAAMiB,EAAUL,CAAG,CAAC,EACrD,OAAAM,EAAiB,IAAMF,CAAC,EACjB,EAAA,CACT,CACD,EAGK,MAAAG,EAAsCnB,EAAQ,WAAW","names":["IslandRenderer","nuxtApp","useNuxtApp","SingleRenderer","provide","PageRouteSymbol","useRoute","hooks","hook","error","useError","abortRender","onErrorCaptured","err","target","info","hookError","p","showError","onServerPrefetch","islandContext"],"sources":["../../../../../../../../node_modules/nuxt/dist/app/components/nuxt-root.vue"],"sourcesContent":["<script setup>\nimport { defineAsyncComponent, onErrorCaptured, onServerPrefetch, provide } from 'vue'\nimport { useNuxtApp } from '../nuxt'\nimport { isNuxtError, showError, useError } from '../composables/error'\nimport { useRoute, useRouter } from '../composables/router'\nimport { PageRouteSymbol } from '../components/injections'\nimport AppComponent from '#build/app-component.mjs'\nimport ErrorComponent from '#build/error-component.mjs'\n// @ts-expect-error virtual file\nimport { componentIslands } from '#build/nuxt.config.mjs'\n\nconst IslandRenderer = import.meta.server && componentIslands\n  ? defineAsyncComponent(() => import('./island-renderer').then(r => r.default || r))\n  : () => null\n\nconst nuxtApp = useNuxtApp()\nconst onResolve = nuxtApp.deferHydration()\nif (import.meta.client && nuxtApp.isHydrating) {\n  const removeErrorHook = nuxtApp.hooks.hookOnce('app:error', onResolve)\n  useRouter().beforeEach(removeErrorHook)\n}\n\nconst url = import.meta.server ? nuxtApp.ssrContext.url : window.location.pathname\nconst SingleRenderer = import.meta.test && import.meta.dev && import.meta.server && url.startsWith('/__nuxt_component_test__/') && defineAsyncComponent(() => import('#build/test-component-wrapper.mjs')\n  .then(r => r.default(import.meta.server ? url : window.location.href)))\n\n// Inject default route (outside of pages) as active route\nprovide(PageRouteSymbol, useRoute())\n\n// vue:setup hook\nconst results = nuxtApp.hooks.callHookWith(hooks => hooks.map(hook => hook()), 'vue:setup')\nif (import.meta.dev && results && results.some(i => i && 'then' in i)) {\n  console.error('[nuxt] Error in `vue:setup`. Callbacks must be synchronous.')\n}\n\n// error handling\nconst error = useError()\n// render an empty <div> when plugins have thrown an error but we're not yet rendering the error page\nconst abortRender = import.meta.server && error.value && !nuxtApp.ssrContext.error\nonErrorCaptured((err, target, info) => {\n  nuxtApp.hooks.callHook('vue:error', err, target, info).catch(hookError => console.error('[nuxt] Error in `vue:error` hook', hookError))\n  if (import.meta.server || (isNuxtError(err) && (err.fatal || err.unhandled))) {\n    const p = nuxtApp.runWithContext(() => showError(err))\n    onServerPrefetch(() => p)\n    return false // suppress error from breaking render\n  }\n})\n\n// Component islands context\nconst islandContext = import.meta.server && nuxtApp.ssrContext.islandContext\n</script>\n\n<template>\n  <Suspense @resolve=\"onResolve\">\n    <div v-if=\"abortRender\" />\n    <ErrorComponent\n      v-else-if=\"error\"\n      :error=\"error\"\n    />\n    <IslandRenderer\n      v-else-if=\"islandContext\"\n      :context=\"islandContext\"\n    />\n    <component\n      :is=\"SingleRenderer\"\n      v-else-if=\"SingleRenderer\"\n    />\n    <AppComponent v-else />\n  </Suspense>\n</template>\n"],"version":3}