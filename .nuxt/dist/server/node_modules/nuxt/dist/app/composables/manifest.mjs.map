{"version":3,"file":"manifest.mjs","sources":["../../../../../../../../node_modules/nuxt/dist/app/composables/manifest.js"],"sourcesContent":["import { createMatcherFromExport, createRouter as createRadixRouter, toRouteMatcher } from \"radix3\";\nimport { defu } from \"defu\";\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\nimport { appManifest as isAppManifestEnabled } from \"#build/nuxt.config.mjs\";\nimport { buildAssetsURL } from \"#internal/nuxt/paths\";\nlet manifest;\nlet matcher;\nfunction fetchManifest() {\n  if (!isAppManifestEnabled) {\n    throw new Error(\"[nuxt] app manifest should be enabled with `experimental.appManifest`\");\n  }\n  if (import.meta.server) {\n    manifest = import(\"#app-manifest\");\n  } else {\n    manifest = $fetch(buildAssetsURL(`builds/meta/${useRuntimeConfig().app.buildId}.json`), {\n      responseType: \"json\"\n    });\n  }\n  manifest.then((m) => {\n    matcher = createMatcherFromExport(m.matcher);\n  }).catch((e) => {\n    console.error(\"[nuxt] Error fetching app manifest.\", e);\n  });\n  return manifest;\n}\nexport function getAppManifest() {\n  if (!isAppManifestEnabled) {\n    throw new Error(\"[nuxt] app manifest should be enabled with `experimental.appManifest`\");\n  }\n  if (import.meta.server) {\n    useNuxtApp().ssrContext._preloadManifest = true;\n  }\n  return manifest || fetchManifest();\n}\nexport async function getRouteRules(arg) {\n  const path = typeof arg === \"string\" ? arg : arg.path;\n  if (import.meta.server) {\n    useNuxtApp().ssrContext._preloadManifest = true;\n    const _routeRulesMatcher = toRouteMatcher(\n      createRadixRouter({ routes: useRuntimeConfig().nitro.routeRules })\n    );\n    return defu({}, ..._routeRulesMatcher.matchAll(path).reverse());\n  }\n  await getAppManifest();\n  if (!matcher) {\n    console.error(\"[nuxt] Error creating app manifest matcher.\", matcher);\n    return {};\n  }\n  try {\n    return defu({}, ...matcher.matchAll(path).reverse());\n  } catch (e) {\n    console.error(\"[nuxt] Error matching route rules.\", e);\n    return {};\n  }\n}\n"],"names":["getRouteRules","arg","path","useNuxtApp","_routeRulesMatcher","toRouteMatcher","createRadixRouter","useRuntimeConfig","defu"],"mappings":"6QAkCO,eAAeA,EAAcC,EAAK,CACvC,MAAMC,EAAO,OAAOD,GAAQ,SAAWA,EAAMA,EAAI,KACzB,CACtBE,EAAY,EAAC,WAAW,iBAAmB,GAC3C,MAAMC,EAAqBC,EACzBC,EAAkB,CAAE,OAAQC,EAAgB,EAAG,MAAM,UAAY,CAAA,CAClE,EACD,OAAOC,EAAK,CAAA,EAAI,GAAGJ,EAAmB,SAASF,CAAI,EAAE,SAAS,CAClE,CAYA","x_google_ignoreList":[0]}