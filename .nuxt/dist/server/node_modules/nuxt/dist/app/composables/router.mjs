import{hasInjectionContext as g,inject as R}from"vue";import{sanitizeStatusCode as p}from"F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{hasProtocol as x,isScriptProtocol as v,joinURL as P,withQuery as y}from"../../../../ufo/dist/index.mjs";import{useNuxtApp as o,useRuntimeConfig as U}from"../nuxt.mjs";import{PageRouteSymbol as C}from"../components/injections.mjs";const h=()=>{var e;return(e=o())==null?void 0:e.$router},T=()=>g()?R(C,o()._route):o()._route;function A(e){return e}const O=(e,r,t={})=>{const c=o(),a=t.global||!1,n=r;if(!n){console.warn("[nuxt] No route middleware passed to `addRouteMiddleware`.",e);return}a?c._middleware.global.push(n):c._middleware.named[e]=n},L=()=>{try{if(o()._processingMiddleware)return!0}catch{return!1}return!1},_=/"/g,$=(e,r)=>{e||(e="/");const t=typeof e=="string"?e:"path"in e?b(e):h().resolve(e).href,c=x(t,{acceptRelative:!0}),a=(r==null?void 0:r.external)||c;if(a){if(!(r!=null&&r.external))throw new Error("Navigating to an external URL is not allowed by default. Use `navigateTo(url, { external: true })`.");const{protocol:l}=new URL(t,"http://localhost");if(l&&v(l))throw new Error(`Cannot navigate to a URL with '${l}' protocol.`)}const n=L(),u=h(),s=o();if(s.ssrContext){const l=typeof e=="string"||a?t:u.resolve(e).fullPath||"/",d=a?t:P(U().app.baseURL,l),f=async function(i){await s.callHook("app:redirected");const m=d.replace(_,"%22"),w=E(d,c);return s.ssrContext._renderResponse={statusCode:p((r==null?void 0:r.redirectCode)||302,302),body:`<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0; url=${m}"></head></html>`,headers:{location:w}},i};return!a&&n?(u.afterEach(i=>i.fullPath===l?f(!1):void 0),e):f(n?!1:void 0)}return a?(s._scope.stop(),r!=null&&r.replace?(void 0).replace(t):(void 0).href=t,n?s.isHydrating?new Promise(()=>{}):!1:Promise.resolve()):r!=null&&r.replace?u.replace(e):u.push(e)};function b(e){return y(e.path||"",e.query||{})+(e.hash||"")}function E(e,r=!1){const t=new URL(e,"http://localhost");return r?e.startsWith("//")?t.toString().replace(t.protocol,""):t.toString():t.pathname+t.search+t.hash}export{O as addRouteMiddleware,A as defineNuxtRouteMiddleware,E as encodeURL,$ as navigateTo,b as resolveRouteObject,T as useRoute,h as useRouter};
//# sourceMappingURL=router.mjs.map
