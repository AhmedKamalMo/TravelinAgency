{"version":3,"file":"error.mjs","sources":["../../../../../../../../node_modules/nuxt/dist/app/composables/error.js"],"sourcesContent":["import { createError as createH3Error } from \"h3\";\nimport { toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { useRouter } from \"./router.js\";\nimport { nuxtDefaultErrorValue } from \"#build/nuxt.config.mjs\";\nexport const NUXT_ERROR_SIGNATURE = \"__nuxt_error\";\nexport const useError = () => toRef(useNuxtApp().payload, \"error\");\nexport const showError = (error) => {\n  const nuxtError = createError(error);\n  try {\n    const nuxtApp = useNuxtApp();\n    const error2 = useError();\n    if (import.meta.client) {\n      nuxtApp.hooks.callHook(\"app:error\", nuxtError);\n    }\n    error2.value ||= nuxtError;\n  } catch {\n    throw nuxtError;\n  }\n  return nuxtError;\n};\nexport const clearError = async (options = {}) => {\n  const nuxtApp = useNuxtApp();\n  const error = useError();\n  nuxtApp.callHook(\"app:error:cleared\", options);\n  if (options.redirect) {\n    await useRouter().replace(options.redirect);\n  }\n  error.value = nuxtDefaultErrorValue;\n};\nexport const isNuxtError = (error) => !!error && typeof error === \"object\" && NUXT_ERROR_SIGNATURE in error;\nexport const createError = (error) => {\n  const nuxtError = createH3Error(error);\n  Object.defineProperty(nuxtError, NUXT_ERROR_SIGNATURE, {\n    value: true,\n    configurable: false,\n    writable: false\n  });\n  return nuxtError;\n};\n"],"names":["NUXT_ERROR_SIGNATURE","useError","toRef","useNuxtApp","showError","error","nuxtError","createError","nuxtApp","error2","isNuxtError","createH3Error"],"mappings":"oJAKY,MAACA,EAAuB,eACvBC,EAAW,IAAMC,EAAMC,EAAY,EAAC,QAAS,OAAO,EACpDC,EAAaC,GAAU,CAClC,MAAMC,EAAYC,EAAYF,CAAK,EACnC,GAAI,CACF,MAAMG,EAAUL,EAAY,EACtBM,EAASR,EAAU,EAIzBQ,EAAO,QAAPA,EAAO,MAAUH,EACrB,MAAU,CACN,MAAMA,CACV,CACE,OAAOA,CACT,EAUaI,EAAeL,GAAU,CAAC,CAACA,GAAS,OAAOA,GAAU,UAAYL,KAAwBK,EACzFE,EAAeF,GAAU,CACpC,MAAMC,EAAYK,EAAcN,CAAK,EACrC,cAAO,eAAeC,EAAWN,EAAsB,CACrD,MAAO,GACP,aAAc,GACd,SAAU,EACd,CAAG,EACMM,CACT","x_google_ignoreList":[0]}