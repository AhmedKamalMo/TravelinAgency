{"version":3,"file":"nuxt.mjs","sources":["../../../../../../../node_modules/nuxt/dist/app/nuxt.js"],"sourcesContent":["import { effectScope, getCurrentInstance, getCurrentScope, hasInjectionContext, reactive, shallowReactive } from \"vue\";\nimport { createHooks } from \"hookable\";\nimport { getContext } from \"unctx\";\nimport { appId, chunkErrorEvent, multiApp } from \"#build/nuxt.config.mjs\";\nexport function getNuxtAppCtx(id = appId || \"nuxt-app\") {\n  return getContext(id, {\n    asyncContext: !!__NUXT_ASYNC_CONTEXT__ && import.meta.server\n  });\n}\nexport const NuxtPluginIndicator = \"__nuxt_plugin\";\nexport function createNuxtApp(options) {\n  let hydratingCount = 0;\n  const nuxtApp = {\n    _id: options.id || appId || \"nuxt-app\",\n    _scope: effectScope(),\n    provide: void 0,\n    globalName: \"nuxt\",\n    versions: {\n      get nuxt() {\n        return __NUXT_VERSION__;\n      },\n      get vue() {\n        return nuxtApp.vueApp.version;\n      }\n    },\n    payload: shallowReactive({\n      ...options.ssrContext?.payload || {},\n      data: shallowReactive({}),\n      state: reactive({}),\n      once: /* @__PURE__ */ new Set(),\n      _errors: shallowReactive({})\n    }),\n    static: {\n      data: {}\n    },\n    runWithContext(fn) {\n      if (nuxtApp._scope.active && !getCurrentScope()) {\n        return nuxtApp._scope.run(() => callWithNuxt(nuxtApp, fn));\n      }\n      return callWithNuxt(nuxtApp, fn);\n    },\n    isHydrating: import.meta.client,\n    deferHydration() {\n      if (!nuxtApp.isHydrating) {\n        return () => {\n        };\n      }\n      hydratingCount++;\n      let called = false;\n      return () => {\n        if (called) {\n          return;\n        }\n        called = true;\n        hydratingCount--;\n        if (hydratingCount === 0) {\n          nuxtApp.isHydrating = false;\n          return nuxtApp.callHook(\"app:suspense:resolve\");\n        }\n      };\n    },\n    _asyncDataPromises: {},\n    _asyncData: shallowReactive({}),\n    _payloadRevivers: {},\n    ...options\n  };\n  if (import.meta.server) {\n    nuxtApp.payload.serverRendered = true;\n  }\n  if (import.meta.server && nuxtApp.ssrContext) {\n    nuxtApp.payload.path = nuxtApp.ssrContext.url;\n    nuxtApp.ssrContext.nuxt = nuxtApp;\n    nuxtApp.ssrContext.payload = nuxtApp.payload;\n    nuxtApp.ssrContext.config = {\n      public: nuxtApp.ssrContext.runtimeConfig.public,\n      app: nuxtApp.ssrContext.runtimeConfig.app\n    };\n  }\n  if (import.meta.client) {\n    const __NUXT__ = multiApp ? window.__NUXT__?.[nuxtApp._id] : window.__NUXT__;\n    if (__NUXT__) {\n      for (const key in __NUXT__) {\n        switch (key) {\n          case \"data\":\n          case \"state\":\n          case \"_errors\":\n            Object.assign(nuxtApp.payload[key], __NUXT__[key]);\n            break;\n          default:\n            nuxtApp.payload[key] = __NUXT__[key];\n        }\n      }\n    }\n  }\n  nuxtApp.hooks = createHooks();\n  nuxtApp.hook = nuxtApp.hooks.hook;\n  if (import.meta.server) {\n    const contextCaller = async function(hooks, args) {\n      for (const hook of hooks) {\n        await nuxtApp.runWithContext(() => hook(...args));\n      }\n    };\n    nuxtApp.hooks.callHook = (name, ...args) => nuxtApp.hooks.callHookWith(contextCaller, name, ...args);\n  }\n  nuxtApp.callHook = nuxtApp.hooks.callHook;\n  nuxtApp.provide = (name, value) => {\n    const $name = \"$\" + name;\n    defineGetter(nuxtApp, $name, value);\n    defineGetter(nuxtApp.vueApp.config.globalProperties, $name, value);\n  };\n  defineGetter(nuxtApp.vueApp, \"$nuxt\", nuxtApp);\n  defineGetter(nuxtApp.vueApp.config.globalProperties, \"$nuxt\", nuxtApp);\n  if (import.meta.client) {\n    if (chunkErrorEvent) {\n      window.addEventListener(chunkErrorEvent, (event) => {\n        nuxtApp.callHook(\"app:chunkError\", { error: event.payload });\n        if (nuxtApp.isHydrating || event.payload.message.includes(\"Unable to preload CSS\")) {\n          event.preventDefault();\n        }\n      });\n    }\n    window.useNuxtApp ||= useNuxtApp;\n    const unreg = nuxtApp.hook(\"app:error\", (...args) => {\n      console.error(\"[nuxt] error caught during app initialization\", ...args);\n    });\n    nuxtApp.hook(\"app:mounted\", unreg);\n  }\n  const runtimeConfig = import.meta.server ? options.ssrContext.runtimeConfig : nuxtApp.payload.config;\n  nuxtApp.provide(\"config\", import.meta.client && import.meta.dev ? wrappedConfig(runtimeConfig) : runtimeConfig);\n  return nuxtApp;\n}\nexport function registerPluginHooks(nuxtApp, plugin) {\n  if (plugin.hooks) {\n    nuxtApp.hooks.addHooks(plugin.hooks);\n  }\n}\nexport async function applyPlugin(nuxtApp, plugin) {\n  if (typeof plugin === \"function\") {\n    const { provide } = await nuxtApp.runWithContext(() => plugin(nuxtApp)) || {};\n    if (provide && typeof provide === \"object\") {\n      for (const key in provide) {\n        nuxtApp.provide(key, provide[key]);\n      }\n    }\n  }\n}\nexport async function applyPlugins(nuxtApp, plugins) {\n  const resolvedPlugins = [];\n  const unresolvedPlugins = [];\n  const parallels = [];\n  const errors = [];\n  let promiseDepth = 0;\n  async function executePlugin(plugin) {\n    const unresolvedPluginsForThisPlugin = plugin.dependsOn?.filter((name) => plugins.some((p) => p._name === name) && !resolvedPlugins.includes(name)) ?? [];\n    if (unresolvedPluginsForThisPlugin.length > 0) {\n      unresolvedPlugins.push([new Set(unresolvedPluginsForThisPlugin), plugin]);\n    } else {\n      const promise = applyPlugin(nuxtApp, plugin).then(async () => {\n        if (plugin._name) {\n          resolvedPlugins.push(plugin._name);\n          await Promise.all(unresolvedPlugins.map(async ([dependsOn, unexecutedPlugin]) => {\n            if (dependsOn.has(plugin._name)) {\n              dependsOn.delete(plugin._name);\n              if (dependsOn.size === 0) {\n                promiseDepth++;\n                await executePlugin(unexecutedPlugin);\n              }\n            }\n          }));\n        }\n      });\n      if (plugin.parallel) {\n        parallels.push(promise.catch((e) => errors.push(e)));\n      } else {\n        await promise;\n      }\n    }\n  }\n  for (const plugin of plugins) {\n    if (import.meta.server && nuxtApp.ssrContext?.islandContext && plugin.env?.islands === false) {\n      continue;\n    }\n    registerPluginHooks(nuxtApp, plugin);\n  }\n  for (const plugin of plugins) {\n    if (import.meta.server && nuxtApp.ssrContext?.islandContext && plugin.env?.islands === false) {\n      continue;\n    }\n    await executePlugin(plugin);\n  }\n  await Promise.all(parallels);\n  if (promiseDepth) {\n    for (let i = 0; i < promiseDepth; i++) {\n      await Promise.all(parallels);\n    }\n  }\n  if (errors.length) {\n    throw errors[0];\n  }\n}\n// @__NO_SIDE_EFFECTS__\nexport function defineNuxtPlugin(plugin) {\n  if (typeof plugin === \"function\") {\n    return plugin;\n  }\n  const _name = plugin._name || plugin.name;\n  delete plugin.name;\n  return Object.assign(plugin.setup || (() => {\n  }), plugin, { [NuxtPluginIndicator]: true, _name });\n}\nexport const definePayloadPlugin = defineNuxtPlugin;\nexport function isNuxtPlugin(plugin) {\n  return typeof plugin === \"function\" && NuxtPluginIndicator in plugin;\n}\nexport function callWithNuxt(nuxt, setup, args) {\n  const fn = () => args ? setup(...args) : setup();\n  const nuxtAppCtx = getNuxtAppCtx(nuxt._id);\n  if (import.meta.server) {\n    return nuxt.vueApp.runWithContext(() => nuxtAppCtx.callAsync(nuxt, fn));\n  } else {\n    nuxtAppCtx.set(nuxt);\n    return nuxt.vueApp.runWithContext(fn);\n  }\n}\nexport function tryUseNuxtApp(id) {\n  let nuxtAppInstance;\n  if (hasInjectionContext()) {\n    nuxtAppInstance = getCurrentInstance()?.appContext.app.$nuxt;\n  }\n  nuxtAppInstance ||= getNuxtAppCtx(id).tryUse();\n  return nuxtAppInstance || null;\n}\nexport function useNuxtApp(id) {\n  const nuxtAppInstance = tryUseNuxtApp(id);\n  if (!nuxtAppInstance) {\n    if (import.meta.dev) {\n      throw new Error(\"[nuxt] A composable that requires access to the Nuxt instance was called outside of a plugin, Nuxt hook, Nuxt middleware, or Vue setup function. This is probably not a Nuxt bug. Find out more at `https://nuxt.com/docs/guide/concepts/auto-imports#vue-and-nuxt-composables`.\");\n    } else {\n      throw new Error(\"[nuxt] instance unavailable\");\n    }\n  }\n  return nuxtAppInstance;\n}\n// @__NO_SIDE_EFFECTS__\nexport function useRuntimeConfig(_event) {\n  return useNuxtApp().$config;\n}\nfunction defineGetter(obj, key, val) {\n  Object.defineProperty(obj, key, { get: () => val });\n}\nexport function defineAppConfig(config) {\n  return config;\n}\nconst loggedKeys = /* @__PURE__ */ new Set();\nfunction wrappedConfig(runtimeConfig) {\n  if (!import.meta.dev || import.meta.server) {\n    return runtimeConfig;\n  }\n  const keys = Object.keys(runtimeConfig).map((key) => `\\`${key}\\``);\n  const lastKey = keys.pop();\n  return new Proxy(runtimeConfig, {\n    get(target, p, receiver) {\n      if (typeof p === \"string\" && p !== \"public\" && !(p in target) && !p.startsWith(\"__v\")) {\n        if (!loggedKeys.has(p)) {\n          loggedKeys.add(p);\n          console.warn(`[nuxt] Could not access \\`${p}\\`. The only available runtime config keys on the client side are ${keys.join(\", \")} and ${lastKey}. See https://nuxt.com/docs/guide/going-further/runtime-config for more information.`);\n        }\n      }\n      return Reflect.get(target, p, receiver);\n    }\n  });\n}\n"],"names":["getNuxtAppCtx","id","appId","getContext","NuxtPluginIndicator","createNuxtApp","options","hydratingCount","nuxtApp","effectScope","shallowReactive","_a","reactive","fn","getCurrentScope","callWithNuxt","called","createHooks","contextCaller","hooks","args","hook","name","value","$name","defineGetter","runtimeConfig","registerPluginHooks","plugin","applyPlugin","provide","key","applyPlugins","plugins","resolvedPlugins","unresolvedPlugins","parallels","errors","promiseDepth","executePlugin","unresolvedPluginsForThisPlugin","p","promise","dependsOn","unexecutedPlugin","e","_b","_c","_d","i","defineNuxtPlugin","_name","nuxt","setup","nuxtAppCtx","tryUseNuxtApp","nuxtAppInstance","hasInjectionContext","getCurrentInstance","useNuxtApp","useRuntimeConfig","_event","obj","val"],"mappings":"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","x_google_ignoreList":[0]}