{"file":"prerender.server.mjs","mappings":"siBASA,IAAIA,EAEJ,MAAAC,EAA6BC,EAAiB,SAAY,CAAC,IAAIC,EAAEC,EAI/D,GAHQ,CAAA,YAAA,WAAAC,GAGJL,GAAI,CAAAA,EAAA,OACR,OAEmBM,EAAgB,EAAG,MAAM,WAI5CN,MAAW,MAAM,KAAKO,GAAY,CAAAJ,EAAAC,CAAA,EAAAI,EAAA,IAAA,SAAA,OAAAC,GAAAC,EAAAC,GAAA,SAAA,YAAAF,EAAA,KAAAC,EAAAE,GAAA,EAAAT,EAAA,MAAAA,EAAAC,EAAA,EAAAD,GAAAS,EAAA,CAAA,GAClC,MAAMC,EAAQb,EAAO,OAAC,EAAA,EAAA,EACxBc,EAAED,CAAA,CACF,CAAG,EACGE,EAAoB,4BAC1B,SAASC,EAAgBC,EAAM,CAC/B,MAAA,EACA,CACA,SAASV,EAAcW,EAAQC,EAAA,IAAAC,EAAA,IAAA,IAAA,OAC7B,UAAWC,KAASH,EAAS,CAI3B,GAHIH,EAAkB,KAAKM,EAAM,IAAG,GAAA,GAAAX,EAAAW,EAAA,WAAA,MAAAX,EAAA,SAAAM,EAAA,GACpCI,EAAA,IAAAD,CAAA,EAEIE,EAAM,KAAA,SAAA,GAAA,EACV,SAEA,MAAMC,EAAWC,EAAQJ,EAAME,EAAA,IAAA,EAE/BD,EAAA,IAAAE,CAAA,EAEID,EAAM,UACVd,EAAAc,EAAA,SAAAC,EAAAF,CAAA,CAEJ,CACA,OAAAA","names":["routes","prerender_server_sqIxOBipVr4FbVMA9kqWL0wT8FPop6sKAXLVfifsJzk","defineNuxtPlugin","__temp","__restore","hashMode","useRuntimeConfig","processRoutes","__executeAsync","_b","_a","routerOptions","_routes","batch","prerenderRoutes","OPTIONAL_PARAM_RE","shouldPrerender","path","routes2","currentPath","routesToPrerender","route","fullPath","joinURL"],"sources":["../../../../../../../../../node_modules/nuxt/dist/pages/runtime/plugins/prerender.server.js"],"sourcesContent":["import { joinURL } from \"ufo\";\nimport { createRouter as createRadixRouter, toRouteMatcher } from \"radix3\";\nimport defu from \"defu\";\nimport { defineNuxtPlugin, useRuntimeConfig } from \"#app/nuxt\";\nimport { prerenderRoutes } from \"#app/composables/ssr\";\nimport _routes from \"#build/routes\";\nimport routerOptions, { hashMode } from \"#build/router.options\";\nimport { crawlLinks } from \"#build/nuxt.config.mjs\";\nlet routes;\nlet _routeRulesMatcher = void 0;\nexport default defineNuxtPlugin(async () => {\n  if (!import.meta.server || !import.meta.prerender || hashMode) {\n    return;\n  }\n  if (routes && !routes.length) {\n    return;\n  }\n  const routeRules = useRuntimeConfig().nitro.routeRules;\n  if (!crawlLinks && routeRules && Object.values(routeRules).some((r) => r.prerender)) {\n    _routeRulesMatcher = toRouteMatcher(createRadixRouter({ routes: routeRules }));\n  }\n  routes ||= Array.from(processRoutes(await routerOptions.routes?.(_routes) ?? _routes));\n  const batch = routes.splice(0, 10);\n  prerenderRoutes(batch);\n});\nconst OPTIONAL_PARAM_RE = /^\\/?:.*(?:\\?|\\(\\.\\*\\)\\*)$/;\nfunction shouldPrerender(path) {\n  return !_routeRulesMatcher || defu({}, ..._routeRulesMatcher.matchAll(path).reverse()).prerender;\n}\nfunction processRoutes(routes2, currentPath = \"/\", routesToPrerender = /* @__PURE__ */ new Set()) {\n  for (const route of routes2) {\n    if (OPTIONAL_PARAM_RE.test(route.path) && !route.children?.length && shouldPrerender(currentPath)) {\n      routesToPrerender.add(currentPath);\n    }\n    if (route.path.includes(\":\")) {\n      continue;\n    }\n    const fullPath = joinURL(currentPath, route.path);\n    if (shouldPrerender(fullPath)) {\n      routesToPrerender.add(fullPath);\n    }\n    if (route.children) {\n      processRoutes(route.children, fullPath, routesToPrerender);\n    }\n  }\n  return routesToPrerender;\n}\n"],"version":3}