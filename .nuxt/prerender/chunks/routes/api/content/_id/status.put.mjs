import{defineEventHandler as e,getRouterParam as s,readBody as i,createError as t}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{executeQuery as o}from"../../../../_/database.mjs";import"../../../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const n=e((async e=>{try{const n=s(e,"id"),d=await i(e),{status:a}=d;if(!n)throw t({statusCode:400,statusMessage:"Page ID is required"});if(!a||!["published","draft","archived"].includes(a))throw t({statusCode:400,statusMessage:"Valid status is required (published, draft, archived)"});try{return await o("\n        UPDATE content_pages \n        SET status = ?, updated_at = NOW()\n        WHERE id = ?\n      ",[a,n]),{success:!0,message:`Page status updated to ${a} successfully`,pageId:n,status:a}}catch(e){try{const e=await import("node:fs/promises"),s=(await import("node:path")).join(process.cwd(),"page-statuses.json");let i={};try{const t=await e.readFile(s,"utf-8");i=JSON.parse(t)}catch(e){}i[n]=a,await e.writeFile(s,JSON.stringify(i,null,2))}catch(e){}return{success:!0,message:`Page status updated to ${a} successfully (saved to file)`,pageId:n,status:a,note:"Database not available - status saved to file"}}}catch(e){throw console.error("Error updating page status:",e),t({statusCode:e.statusCode||500,statusMessage:e.statusMessage||"Failed to update page status"})}}));export{n as default};
//# sourceMappingURL=status.put.mjs.map
