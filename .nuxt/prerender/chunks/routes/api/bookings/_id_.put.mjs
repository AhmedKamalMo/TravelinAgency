import{defineEventHandler as e,getRouterParam as t,readBody as n,createError as a}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{e as o}from"../../../_/database.mjs";import"../../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const s=e((async e=>{try{const s=t(e,"id"),i=await n(e);if(!s)throw a({statusCode:400,statusMessage:"Booking ID is required"});if(!(i.customer_name&&i.customer_email&&i.customer_phone&&i.package_id&&i.departure_date&&i.total_amount))throw a({statusCode:400,statusMessage:"Customer name, email, phone, package, departure date, and total amount are required"});if(0===(await o("\n      UPDATE bookings SET\n        package_id = ?,\n        customer_name = ?,\n        customer_email = ?,\n        customer_phone = ?,\n        customer_details = ?,\n        guests_count = ?,\n        guests_details = ?,\n        departure_date = ?,\n        return_date = ?,\n        total_amount = ?,\n        paid_amount = ?,\n        currency = ?,\n        payment_status = ?,\n        booking_status = ?,\n        payment_method = ?,\n        payment_reference = ?,\n        special_requests = ?,\n        notes = ?,\n        cancellation_reason = ?,\n        cancellation_date = ?,\n        confirmed_at = ?,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    ",[i.package_id,i.customer_name,i.customer_email,i.customer_phone,JSON.stringify(i.customer_details||{}),i.guests_count||1,JSON.stringify(i.guests_details||[]),i.departure_date,i.return_date||null,i.total_amount,i.paid_amount||0,i.currency||"SAR",i.payment_status||"pending",i.booking_status||"pending",i.payment_method||null,i.payment_reference||null,i.special_requests||null,i.notes||null,i.cancellation_reason||null,i.cancellation_date||null,i.confirmed_at||null,s])).affectedRows)throw a({statusCode:404,statusMessage:"Booking not found"});const r=await o("\n      SELECT \n        b.id, \n        b.booking_number,\n        b.customer_name,\n        b.customer_email,\n        b.customer_phone,\n        b.customer_details,\n        b.guests_count,\n        b.guests_details,\n        b.departure_date,\n        b.return_date,\n        b.total_amount,\n        b.paid_amount,\n        b.currency,\n        b.payment_status,\n        b.booking_status,\n        b.payment_method,\n        b.payment_reference,\n        b.special_requests,\n        b.notes,\n        b.cancellation_reason,\n        b.cancellation_date,\n        b.confirmed_at,\n        b.created_at,\n        b.updated_at,\n        p.id as package_id,\n        p.title_ar as package_title_ar,\n        p.title_en as package_title_en,\n        p.title as package_title,\n        p.price as package_price,\n        p.duration_days as package_duration,\n        p.travel_period as package_location,\n        p.image_url as package_image\n      FROM bookings b\n      LEFT JOIN packages p ON b.package_id = p.id\n      WHERE b.id = ?\n    ",[s]);if(!r||0===r.length)throw a({statusCode:500,statusMessage:"Failed to retrieve updated booking"});const d=r[0];return{success:!0,message:"Booking updated successfully",data:{id:d.id,booking_number:d.booking_number,customer_name:d.customer_name,customer_email:d.customer_email,customer_phone:d.customer_phone,customer_details:JSON.parse(d.customer_details||"{}"),guests_count:d.guests_count,guests_details:JSON.parse(d.guests_details||"[]"),departure_date:d.departure_date,return_date:d.return_date,total_amount:d.total_amount,paid_amount:d.paid_amount,currency:d.currency,payment_status:d.payment_status,booking_status:d.booking_status,payment_method:d.payment_method,payment_reference:d.payment_reference,special_requests:d.special_requests,notes:d.notes,cancellation_reason:d.cancellation_reason,cancellation_date:d.cancellation_date,confirmed_at:d.confirmed_at,created_at:d.created_at,updated_at:d.updated_at,package:{id:d.package_id,title_ar:d.package_title_ar,title_en:d.package_title_en,title:d.package_title_ar||d.package_title_en||d.package_title,price:d.package_price,duration_days:d.package_duration,location:d.package_location,travel_period:d.package_location,image_url:d.package_image}}}}catch(e){if(console.error("Error updating booking:",e),e.statusCode)throw e;throw a({statusCode:500,statusMessage:"Failed to update booking"})}}));export{s as default};
//# sourceMappingURL=_id_.put.mjs.map
