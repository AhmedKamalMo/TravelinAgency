import{defineEventHandler as e,getRouterParam as n,readBody as i,createError as t}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{executeQuery as s}from"../../../_/database.mjs";import"../../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const o=e((async e=>{try{const o=n(e,"id"),d=await i(e);if(!o)throw t({statusCode:400,statusMessage:"User ID is required"});const r=await s("\n      SELECT id FROM users WHERE id = ?\n    ",[o]);if(!r||0===r.length)throw t({statusCode:404,statusMessage:"User not found"});if(0===(await s("\n      UPDATE users SET\n        email = ?,\n        full_name = ?,\n        phone = ?,\n        role = ?,\n        status = ?,\n        email_verified = ?,\n        phone_verified = ?,\n        bio = ?,\n        date_of_birth = ?,\n        gender = ?,\n        nationality = ?,\n        address = ?,\n        city = ?,\n        country = ?,\n        postal_code = ?,\n        preferences = ?,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    ",[d.email,d.full_name,d.phone||null,d.role||"user",d.status||"active",d.email_verified||0,d.phone_verified||0,d.bio||null,d.date_of_birth||null,d.gender||null,d.nationality||null,d.address||null,d.city||null,d.country||null,d.postal_code||null,JSON.stringify(d.preferences||{}),o])).affectedRows)throw t({statusCode:404,statusMessage:"User not found"});const l=await s("\n      SELECT \n        id,\n        email,\n        full_name,\n        phone,\n        role,\n        status,\n        email_verified,\n        phone_verified,\n        bio,\n        date_of_birth,\n        gender,\n        nationality,\n        address,\n        city,\n        country,\n        postal_code,\n        preferences,\n        created_at,\n        updated_at,\n        last_login,\n        login_count\n      FROM users \n      WHERE id = ?\n    ",[o]);if(!l||0===l.length)throw t({statusCode:500,statusMessage:"Failed to retrieve updated user"});const a=l[0];return{success:!0,message:"User updated successfully",data:{id:a.id,email:a.email,full_name:a.full_name,phone:a.phone,role:a.role,status:a.status,email_verified:a.email_verified,phone_verified:a.phone_verified,bio:a.bio,date_of_birth:a.date_of_birth,gender:a.gender,nationality:a.nationality,address:a.address,city:a.city,country:a.country,postal_code:a.postal_code,preferences:JSON.parse(a.preferences||"{}"),created_at:a.created_at,updated_at:a.updated_at,last_login:a.last_login,login_count:a.login_count}}}catch(e){if(console.error("Error updating user:",e),e.statusCode)throw e;throw t({statusCode:500,statusMessage:"Failed to update user"})}}));export{o as default};
//# sourceMappingURL=_id_.put.mjs.map
