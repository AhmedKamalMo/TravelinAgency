import{defineEventHandler as e,readBody as n,createError as t}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{executeQuery as a}from"../../_/database.mjs";import"../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const o=e((async e=>{try{const o=await n(e);if(!(o.customer_name&&o.customer_email&&o.customer_phone&&o.package_id&&o.departure_date&&o.total_amount))throw t({statusCode:400,statusMessage:"Customer name, email, phone, package, departure date, and total amount are required"});const s=o.booking_number||`BK${Date.now()}`,i=await a("\n      INSERT INTO bookings (\n        booking_number,\n        package_id,\n        customer_name,\n        customer_email,\n        customer_phone,\n        customer_details,\n        guests_count,\n        guests_details,\n        departure_date,\n        return_date,\n        total_amount,\n        paid_amount,\n        currency,\n        payment_status,\n        booking_status,\n        payment_method,\n        payment_reference,\n        special_requests,\n        notes,\n        cancellation_reason,\n        cancellation_date,\n        confirmed_at,\n        created_at,\n        updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n    ",[s,o.package_id,o.customer_name,o.customer_email,o.customer_phone,JSON.stringify(o.customer_details||{}),o.guests_count||1,JSON.stringify(o.guests_details||[]),o.departure_date,o.return_date||null,o.total_amount,o.paid_amount||0,o.currency||"SAR",o.payment_status||"pending",o.booking_status||"pending",o.payment_method||null,o.payment_reference||null,o.special_requests||null,o.notes||null,o.cancellation_reason||null,o.cancellation_date||null,o.confirmed_at||null]),r=await a("\n      SELECT \n        b.id, \n        b.booking_number,\n        b.customer_name,\n        b.customer_email,\n        b.customer_phone,\n        b.customer_details,\n        b.guests_count,\n        b.guests_details,\n        b.departure_date,\n        b.return_date,\n        b.total_amount,\n        b.paid_amount,\n        b.currency,\n        b.payment_status,\n        b.booking_status,\n        b.payment_method,\n        b.payment_reference,\n        b.special_requests,\n        b.notes,\n        b.cancellation_reason,\n        b.cancellation_date,\n        b.confirmed_at,\n        b.created_at,\n        b.updated_at,\n        p.title_ar as package_title,\n        p.title_en as package_title_en,\n        p.price as package_price,\n        p.duration_days as package_duration\n      FROM bookings b\n      LEFT JOIN packages p ON b.package_id = p.id\n      WHERE b.id = ?\n    ",[i.insertId]);if(!r||0===r.length)throw t({statusCode:500,statusMessage:"Failed to retrieve created booking"});const d=r[0];return{success:!0,message:"Booking created successfully",data:{id:d.id,booking_number:d.booking_number,customer_name:d.customer_name,customer_email:d.customer_email,customer_phone:d.customer_phone,customer_details:JSON.parse(d.customer_details||"{}"),guests_count:d.guests_count,guests_details:JSON.parse(d.guests_details||"[]"),departure_date:d.departure_date,return_date:d.return_date,total_amount:d.total_amount,paid_amount:d.paid_amount,currency:d.currency,payment_status:d.payment_status,booking_status:d.booking_status,payment_method:d.payment_method,payment_reference:d.payment_reference,special_requests:d.special_requests,notes:d.notes,cancellation_reason:d.cancellation_reason,cancellation_date:d.cancellation_date,confirmed_at:d.confirmed_at,created_at:d.created_at,updated_at:d.updated_at,package:{id:o.package_id,title_ar:d.package_title,title_en:d.package_title_en,price:d.package_price,duration_days:d.package_duration}}}}catch(e){if(console.error("Error creating booking:",e),e.statusCode)throw e;throw t({statusCode:500,statusMessage:"Failed to create booking"})}}));export{o as default};
//# sourceMappingURL=bookings.post.mjs.map
