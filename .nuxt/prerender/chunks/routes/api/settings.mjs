import{defineEventHandler as e,getMethod as i,readBody as s,createError as n}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{e as t}from"../../_/database.mjs";import"../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const o=e((async e=>{try{if("GET"===i(e)){const e=await t("\n        SELECT \n          setting_key,\n          setting_value\n        FROM cms_site_settings \n        ORDER BY setting_key\n      "),i={};return e.forEach((e=>{try{i[e.setting_key]=JSON.parse(e.setting_value)}catch{i[e.setting_key]=e.setting_value}})),{settings:i}}if("PUT"===i(e)){const i=await s(e),{settings:o}=i;if(!o)throw n({statusCode:400,statusMessage:"Settings data is required"});for(const[e,i]of Object.entries(o))await t("\n          INSERT INTO cms_site_settings (setting_key, setting_value) \n          VALUES (?, ?) \n          ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value)\n        ",[e,JSON.stringify(i)]);return{success:!0,message:"Settings updated successfully"}}}catch(e){if(console.error("Error with settings:",e),e.statusCode)throw e;throw n({statusCode:500,statusMessage:"Failed to process settings request"})}}));export{o as default};
//# sourceMappingURL=settings.mjs.map
