import{defineEventHandler as e,getRouterParam as i,createError as s}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{e as n}from"../../../../_/database.mjs";import"../../../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const o=e((async e=>{try{const o=i(e,"id");if(!o)throw s({statusCode:400,statusMessage:"Page ID is required"});const d=await n("SELECT \n        p.*,\n        u1.email as created_by_email,\n        u2.email as updated_by_email\n       FROM cms_pages p\n       LEFT JOIN users u1 ON p.created_by = u1.id\n       LEFT JOIN users u2 ON p.updated_by = u2.id\n       WHERE p.id = ?",[o]);if(0===d.length)throw s({statusCode:404,statusMessage:"Page not found"});const t=await n("SELECT \n        s.*,\n        (SELECT COUNT(*) FROM cms_content_blocks WHERE section_id = s.id AND is_active = 1) as blocks_count\n       FROM cms_sections s\n       WHERE s.page_id = ? AND s.is_active = 1\n       ORDER BY s.order_index ASC",[o]);for(const e of t)e.content_blocks=await n("SELECT * FROM cms_content_blocks \n         WHERE section_id = ? AND is_active = 1\n         ORDER BY order_index ASC",[e.id]);return{success:!0,data:{page:d[0],sections:t}}}catch(e){if(console.error("Error fetching page:",e),e.statusCode)throw e;throw s({statusCode:500,statusMessage:"Error fetching page"})}}));export{o as default};
//# sourceMappingURL=_id_.get.mjs.map
