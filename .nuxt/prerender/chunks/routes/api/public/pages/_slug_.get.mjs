import{defineEventHandler as e,getRouterParam as s,createError as i}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{executeQuery as t}from"../../../../_/database.mjs";import"../../../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const n=e((async e=>{try{const n=s(e,"slug");if(!n)throw i({statusCode:400,statusMessage:"Page slug is required"});const o=await t("SELECT \n        p.id, p.slug, p.title, p.meta_title, p.meta_description, p.meta_keywords, p.template\n       FROM cms_pages p\n       WHERE p.slug = ? AND p.status = 'published'",[n]);if(0===o.length)throw i({statusCode:404,statusMessage:"Page not found"});const d=await t("SELECT \n        s.id, s.section_type, s.title, s.subtitle, s.content, \n        s.background_color, s.background_image, s.text_color, s.order_index, s.settings\n       FROM cms_sections s\n       WHERE s.page_id = ? AND s.is_active = 1\n       ORDER BY s.order_index ASC",[o[0].id]);for(const e of d){if(e.content_blocks=await t("SELECT \n          id, block_type, title, content, image_url, video_url, link_url, link_text, order_index, settings\n         FROM cms_content_blocks \n         WHERE section_id = ? AND is_active = 1\n         ORDER BY order_index ASC",[e.id]),e.settings)try{e.settings=JSON.parse(e.settings)}catch(s){e.settings={}}e.content_blocks.forEach((e=>{if(e.settings)try{e.settings=JSON.parse(e.settings)}catch(s){e.settings={}}}))}return{success:!0,data:{page:o[0],sections:d}}}catch(e){if(console.error("Error fetching public page:",e),e.statusCode)throw e;throw i({statusCode:500,statusMessage:"Error fetching page"})}}));export{n as default};
//# sourceMappingURL=_slug_.get.mjs.map
