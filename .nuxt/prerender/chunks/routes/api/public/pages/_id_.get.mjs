import{defineEventHandler as e,getRouterParam as t,createError as i}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{e as n}from"../../../../_/database.mjs";import"../../../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const o=e((async e=>{const o=t(e,"id");if(!o)throw i({statusCode:400,statusMessage:"Page ID is required"});try{const e=await n("\n      SELECT \n        id, \n        title,\n        meta_title,\n        meta_description,\n        'page' as type,\n        status,\n        template,\n        created_at,\n        updated_at\n      FROM cms_pages \n      WHERE id = ? AND status = 'published'\n    ",[o]);if(!e||0===e.length)throw i({statusCode:404,statusMessage:"Page not found or not published"});const t=e[0],s=(await n("\n      SELECT \n        id,\n        section_type,\n        title,\n        subtitle,\n        content,\n        background_color,\n        background_image,\n        text_color,\n        order_index,\n        is_active,\n        settings\n      FROM cms_sections \n      WHERE page_id = ? AND is_active = TRUE\n      ORDER BY order_index ASC\n    ",[o])).map((e=>({id:e.id,type:e.section_type,props:{title:e.title||"",subtitle:e.subtitle||"",content:e.content||"",backgroundImage:e.background_image||"",backgroundColor:e.background_color||"",textColor:e.text_color||""},classes:"mb-6"})));return{success:!0,page:{id:t.id,title:t.title,title_ar:t.title,title_en:t.meta_title||t.title,content:t.meta_description||"",content_ar:t.meta_description||"",content_en:t.meta_description||"",components:s,type:t.type,status:t.status,template:t.template,created_at:t.created_at,updated_at:t.updated_at}}}catch(e){if(console.error("Error fetching public page:",e),e.statusCode)throw e;throw i({statusCode:500,statusMessage:"Failed to fetch page data"})}}));export{o as default};
//# sourceMappingURL=_id_.get.mjs.map
