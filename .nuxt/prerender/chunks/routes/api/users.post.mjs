import{defineEventHandler as e,readBody as n,createError as i}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{e as s}from"../../_/database.mjs";import"../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const t=e((async e=>{try{const t=await n(e);if(!t.email||!t.password||!t.full_name)throw i({statusCode:400,statusMessage:"Email, password, and full name are required"});const o=await s("\n      SELECT id FROM users WHERE email = ?\n    ",[t.email]);if(o&&o.length>0)throw i({statusCode:400,statusMessage:"Email already exists"});const d=await s("\n      INSERT INTO users (\n        email,\n        password,\n        full_name,\n        phone,\n        role,\n        status,\n        email_verified,\n        phone_verified,\n        bio,\n        date_of_birth,\n        gender,\n        nationality,\n        address,\n        city,\n        country,\n        postal_code,\n        preferences,\n        created_at,\n        updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n    ",[t.email,t.password,t.full_name,t.phone||null,t.role||"user",t.status||"active",t.email_verified||0,t.phone_verified||0,t.bio||null,t.date_of_birth||null,t.gender||null,t.nationality||null,t.address||null,t.city||null,t.country||null,t.postal_code||null,JSON.stringify(t.preferences||{})]),r=await s("\n      SELECT \n        id,\n        email,\n        full_name,\n        phone,\n        role,\n        status,\n        email_verified,\n        phone_verified,\n        bio,\n        date_of_birth,\n        gender,\n        nationality,\n        address,\n        city,\n        country,\n        postal_code,\n        preferences,\n        created_at,\n        updated_at\n      FROM users \n      WHERE id = ?\n    ",[d.insertId]);if(!r||0===r.length)throw i({statusCode:500,statusMessage:"Failed to retrieve created user"});const a=r[0];return{success:!0,message:"User created successfully",data:{id:a.id,email:a.email,full_name:a.full_name,phone:a.phone,role:a.role,status:a.status,email_verified:a.email_verified,phone_verified:a.phone_verified,bio:a.bio,date_of_birth:a.date_of_birth,gender:a.gender,nationality:a.nationality,address:a.address,city:a.city,country:a.country,postal_code:a.postal_code,preferences:JSON.parse(a.preferences||"{}"),created_at:a.created_at,updated_at:a.updated_at}}}catch(e){if(console.error("Error creating user:",e),e.statusCode)throw e;throw i({statusCode:500,statusMessage:"Failed to create user"})}}));export{t as default};
//# sourceMappingURL=users.post.mjs.map
