import{defineEventHandler as e,readBody as s,createError as t}from"file://F:/TravelinAgency/node_modules/h3/dist/index.mjs";import{executeQuery as n}from"../../_/database.mjs";import"../../_/nitro.mjs";import"file://F:/TravelinAgency/node_modules/destr/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/hookable/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ofetch/dist/node.mjs";import"file://F:/TravelinAgency/node_modules/node-mock-http/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/klona/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/defu/dist/defu.mjs";import"file://F:/TravelinAgency/node_modules/scule/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/radix3/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/vue/index.mjs";import"node:fs";import"node:url";import"file://F:/TravelinAgency/node_modules/pathe/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/@iconify/utils/lib/index.mjs";import"file://F:/TravelinAgency/node_modules/ohash/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/consola/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/ipx/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/dist/index.mjs";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs.mjs";import"file:///F:/TravelinAgency/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js";import"file://F:/TravelinAgency/node_modules/unstorage/drivers/fs-lite.mjs";import"file://F:/TravelinAgency/node_modules/mysql2/promise.js";import"file://F:/TravelinAgency/node_modules/bcryptjs/index.js";import"file://F:/TravelinAgency/node_modules/jsonwebtoken/index.js";const i=e((async e=>{try{const i=await s(e);if(!i.name||!i.email||!i.message)throw t({statusCode:400,statusMessage:"Name, email, and message are required"});try{const e=await n("\n        INSERT INTO contact_messages (\n          name,\n          email,\n          phone,\n          subject,\n          message,\n          status,\n          created_at,\n          updated_at\n        ) VALUES (?, ?, ?, ?, ?, 'new', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n      ",[i.name,i.email,i.phone||"",i.subject||"",i.message]),s=await n("\n        SELECT \n          id, \n          name,\n          email,\n          phone,\n          subject,\n          message,\n          status,\n          created_at,\n          updated_at\n        FROM contact_messages \n        WHERE id = ?\n      ",[e.insertId]);if(!s||0===s.length)throw t({statusCode:500,statusMessage:"Failed to retrieve created message"});const a=s[0];return{success:!0,message:"Contact message sent successfully",data:{id:a.id,name:a.name,email:a.email,phone:a.phone,subject:a.subject,message:a.message,status:a.status,created_at:a.created_at}}}catch(e){console.log("Database insert failed:",e);try{const e=await import("node:fs"),s=(await import("node:path")).join(process.cwd(),"public","contact-messages.json");let t=[];if(e.existsSync(s)){const n=e.readFileSync(s,"utf8");t=JSON.parse(n)}const n={id:Date.now(),name:i.name,email:i.email,phone:i.phone||"",subject:i.subject||"",message:i.message,status:"new",created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()};return t.push(n),e.writeFileSync(s,JSON.stringify(t,null,2)),{success:!0,message:"Contact message sent successfully (stored locally)",data:n}}catch(e){throw console.log("Local file storage failed:",e),t({statusCode:500,statusMessage:"Failed to store contact message"})}}}catch(e){if(console.error("Error creating contact message:",e),e.statusCode)throw e;throw t({statusCode:500,statusMessage:"Failed to send contact message"})}}));export{i as default};
//# sourceMappingURL=contact-messages.post.mjs.map
