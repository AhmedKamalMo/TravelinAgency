import{c as e,r as t,e as n}from"../../_/nitro.mjs";import{e as a}from"../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const i=e((async e=>{try{const i=await t(e);if(!(i.name_ar&&i.name_en&&i.description_ar&&i.description_en&&i.country&&i.city))throw n({statusCode:400,statusMessage:"Name, description, country, and city are required"});const r=await a("\n      INSERT INTO destinations (\n        name,\n        name_ar,\n        name_en,\n        description,\n        description_ar,\n        description_en,\n        country,\n        city,\n        region,\n        type,\n        status,\n        image,\n        images,\n        features,\n        best_time_to_visit,\n        average_temperature,\n        local_language,\n        local_currency,\n        is_featured,\n        seo_title,\n        seo_description,\n        seo_keywords,\n        created_by,\n        created_at,\n        updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n    ",[i.name_ar,i.name_ar,i.name_en,i.description_ar,i.description_ar,i.description_en,i.country,i.city,i.region||null,i.type||"city",i.status||"active",i.image_url||null,JSON.stringify([]),JSON.stringify(i.features||[]),i.best_time_to_visit||null,i.average_temperature||null,i.local_language||null,i.local_currency||null,i.is_featured||0,i.seo_title||null,i.seo_description||null,i.seo_keywords||null,"1"]),s=await a("\n      SELECT \n        id, \n        name,\n        name_ar,\n        name_en,\n        description,\n        description_ar,\n        description_en,\n        country,\n        city,\n        region,\n        type,\n        status,\n        image,\n        images,\n        features,\n        best_time_to_visit,\n        average_temperature,\n        local_language,\n        local_currency,\n        is_featured,\n        seo_title,\n        seo_description,\n        seo_keywords,\n        created_at,\n        updated_at\n      FROM destinations \n      WHERE id = ?\n    ",[r.insertId]);if(!s||0===s.length)throw n({statusCode:500,statusMessage:"Failed to retrieve created destination"});const o=s[0];return{success:!0,message:"Destination created successfully",data:{id:o.id,name:o.name,name_ar:o.name_ar,name_en:o.name_en,description:o.description,description_ar:o.description_ar,description_en:o.description_en,country:o.country,city:o.city,region:o.region,type:o.type,status:o.status,image:o.image,image_url:o.image,images:JSON.parse(o.images||"[]"),features:JSON.parse(o.features||"[]"),best_time_to_visit:o.best_time_to_visit,average_temperature:o.average_temperature,local_language:o.local_language,local_currency:o.local_currency,is_featured:o.is_featured,seo_title:o.seo_title,seo_description:o.seo_description,seo_keywords:o.seo_keywords,created_at:o.created_at,updated_at:o.updated_at}}}catch(e){if(console.error("Error creating destination:",e),e.statusCode)throw e;throw n({statusCode:500,statusMessage:"Failed to create destination"})}}));export{i as default};
//# sourceMappingURL=destinations.post.mjs.map
