import{c as t,j as s,r as e,e as i}from"../../_/nitro.mjs";import{e as o}from"../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const n=t((async t=>{try{if("GET"===s(t)){const t=await o("\n        SELECT \n          setting_key,\n          setting_value\n        FROM cms_site_settings \n        ORDER BY setting_key\n      "),s={};return t.forEach((t=>{try{s[t.setting_key]=JSON.parse(t.setting_value)}catch{s[t.setting_key]=t.setting_value}})),{settings:s}}if("PUT"===s(t)){const s=await e(t),{settings:n}=s;if(!n)throw i({statusCode:400,statusMessage:"Settings data is required"});for(const[t,s]of Object.entries(n))await o("\n          INSERT INTO cms_site_settings (setting_key, setting_value) \n          VALUES (?, ?) \n          ON DUPLICATE KEY UPDATE setting_value = VALUES(setting_value)\n        ",[t,JSON.stringify(s)]);return{success:!0,message:"Settings updated successfully"}}}catch(t){if(console.error("Error with settings:",t),t.statusCode)throw t;throw i({statusCode:500,statusMessage:"Failed to process settings request"})}}));export{n as default};
//# sourceMappingURL=settings.mjs.map
