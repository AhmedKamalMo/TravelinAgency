import{c as t,r as e,e as s}from"../../../_/nitro.mjs";import{e as a}from"../../../_/database.mjs";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"@iconify/utils";import"node:crypto";import"consola";import"ipx";import"node:path";import"mysql2/promise";import"bcryptjs";import"jsonwebtoken";const r=t((async t=>{try{const r=await e(t),{slug:o,title:i,meta_title:p,meta_description:m,meta_keywords:n,status:d="draft",template:l="default",created_by:u=1}=r;if(!o||!i)throw s({statusCode:400,statusMessage:"Slug and title are required"});if((await a("SELECT id FROM cms_pages WHERE slug = ?",[o])).length>0)throw s({statusCode:400,statusMessage:"Page with this slug already exists"});const c="\n      INSERT INTO cms_pages \n      (slug, title, meta_title, meta_description, meta_keywords, status, template, created_by, updated_by)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    ",g=[o,i,p||null,m||null,n||null,d,l,u,u],_=(await a(c,g)).insertId;return{success:!0,data:{page:(await a("SELECT * FROM cms_pages WHERE id = ?",[_]))[0]},message:"Page created successfully"}}catch(t){if(console.error("Error creating page:",t),t.statusCode)throw t;throw s({statusCode:500,statusMessage:"Error creating page"})}}));export{r as default};
//# sourceMappingURL=pages.post.mjs.map
